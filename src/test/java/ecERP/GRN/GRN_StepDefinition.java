package ecERP.GRN;

import java.awt.AWTException;
import java.awt.Robot;
import java.awt.event.KeyEvent;
import java.time.Duration;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.Alert;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.StaleElementReferenceException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;

import ecERP.libglobal.LibGlobal;
import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import io.github.bonigarcia.wdm.WebDriverManager;

public class GRN_StepDefinition extends LibGlobal {

	public static WebDriver driver;

	@Given("User on the login page")
	public void user_on_the_login_page() {

		ChromeOptions options = new ChromeOptions();
		options.addArguments("--remote-allow-origins=*");
		WebDriverManager.chromedriver().setup();
		driver = new ChromeDriver(options);
		driver.get("https://qa-erp.e-consystems.net");
//		driver.get("https://stage-erp.e-consystems.net/#/login");
//		driver.get("http://192.168.8.119:8080/#/login");
//		driver.get("http://localhost:8080/#/login");
//		driver.get("http://localhost:4200/#/");
		driver.manage().window().maximize();
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement appTitle = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//h2[@class = 'heading-erp'][1]")));
		String title = appTitle.getText();
		System.out.println("Title of the Application: " + title);

		String pageTitle = driver.getTitle();
		System.out.println("Page Title: " + pageTitle);

		WebElement logo = driver.findElement(By.xpath("//img[@class = 'logo-src'][1]"));
		Boolean l = (Boolean) ((JavascriptExecutor) driver).executeScript("return arguments[0].complete "
				+ "&& typeof arguments[0].naturalWidth != \"undefined\" " + "&& arguments[0].naturalWidth > 0", logo);
		// verify if status is true
		if (l) {
			System.out.println("Logo present");
		} else {
			System.out.println("Logo not present");
		}
	}

	@Given("User enters the SCM Team Member {string} and {string}")
	public void user_enters_the_SCM_Team_Member_and(String username, String password) {
		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
		WebElement loginID = driver.findElement(By.xpath("//input[@id='loginkey'][1]"));
		loginID.sendKeys(username);
		WebElement loginPassword = driver.findElement(By.xpath("//input[@id='password'][1]"));
		loginPassword.sendKeys(password);
		WebElement btnClick = driver.findElement(By.xpath("//input[@id='remembermeCheck'][1]"));
		btnClick.click();
		WebElement btnUnclick = driver.findElement(By.xpath("//input[@id='remembermeCheck'][1]"));
		btnUnclick.click();
		WebElement signInButton = driver.findElement(By.xpath("//button[@type='submit'][1]"));
		signInButton.click();
	}

	@Given("User enters the PM Team Member {string} and {string}")
	public void user_enters_the_pm_team_member_and(String username, String password) {
		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
		WebElement loginID = driver.findElement(By.xpath("//input[@id='loginkey'][1]"));
		loginID.sendKeys(username);
		WebElement loginPassword = driver.findElement(By.xpath("//input[@id='password'][1]"));
		loginPassword.sendKeys(password);
		WebElement btnClick = driver.findElement(By.xpath("//input[@id='remembermeCheck'][1]"));
		btnClick.click();
		WebElement btnUnclick = driver.findElement(By.xpath("//input[@id='remembermeCheck'][1]"));
		btnUnclick.click();
		WebElement signInButton = driver.findElement(By.xpath("//button[@type='submit'][1]"));
		signInButton.click();
	}

	@When("User create the PO Request for PO ORDER \\(RM-Domestic)")
	public void user_create_the_po_request_for_po_order_rm_domestic() throws InterruptedException {

		WebElement purchaseOrderBtn = driver.findElement(By.xpath("(//a[contains(text(),'Purchase Order')])[1]"));
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		wait.until(ExpectedConditions.visibilityOfNestedElementsLocatedBy(purchaseOrderBtn,
				By.xpath("(//a[contains(text(),'Purchase Order')])[1]")));
		purchaseOrderBtn.click();

		WebElement addBtn = driver.findElement(By.xpath("(//button[@title='Add' and @type='button'])[1]"));
		addBtn.click();
		Thread.sleep(1000);

		WebElement branch = (driver.findElement(By.xpath("(//select)[1]")));
		select(branch).selectByIndex(1);
		Thread.sleep(500);

		WebElement wareHouse = (driver.findElement(By.xpath("(//select)[2]")));
		select(wareHouse).selectByIndex(0);
		Select s = new Select(driver.findElement(By.xpath("(//select)[3]")));
		List<WebElement> options = s.getOptions();
		WebElement storeFieldText = s.getFirstSelectedOption();
		System.out.println("Store : " + storeFieldText.getText());
		Thread.sleep(1000);
		WebElement poNumberFieldText = driver.findElement(
				By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[1]"));
		System.out.println("PO Number : " + poNumberFieldText.getAttribute("value"));

		WebElement poStatusFieldText = driver.findElement(
				By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[2]"));
		System.out.println("PO Status : " + poStatusFieldText.getAttribute("value"));

		WebElement poDateFieldValue = driver.findElement(
				By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[3]"));
		System.out.println("PO Date : " + poDateFieldValue.getAttribute("value"));

		WebElement vendorField = driver.findElement(By.xpath("(//input[@type='text'])[4]"));
		vendorField.sendKeys("A");
		Thread.sleep(500);

		List<WebElement> vendorList = driver.findElements(By.xpath("(//ul[@role='listbox'])[1]//li"));
		for (WebElement webElement : vendorList) {
			String list = webElement.getText();
			if (list.contains("A.K.INDUSTRIES")) {
				Thread.sleep(500);
				JavascriptExecutor k = (JavascriptExecutor) driver;
				k.executeScript("arguments[0].click();", webElement);
				System.out.println(webElement);
				break;
			}
			Thread.sleep(1000);
		}

		Select s1 = new Select(driver.findElement(By.xpath("(//select)[7]")));
		List<WebElement> options1 = s1.getOptions();
		WebElement paymentTerms = s1.getFirstSelectedOption();
		System.out.println("Payment Terms : " + paymentTerms.getText());

		Select s2 = new Select(driver.findElement(By.xpath("(//select)[8]")));
		List<WebElement> options2 = s2.getOptions();
		WebElement paymentMode = s2.getFirstSelectedOption();
		System.out.println("Payment Mode : " + paymentMode.getText());

		Select s3 = new Select(driver.findElement(By.xpath("(//select)[9]")));
		List<WebElement> options3 = s3.getOptions();
		WebElement poOwner = s3.getFirstSelectedOption();
		System.out.println("PO Owner : " + poOwner.getText());

		// PO Order - RM Type

		WebElement orderType = driver.findElement(By.xpath("(//select)[5]"));
		selectOptionByIndex(orderType, 0);

		WebElement materialType = driver.findElement(By.xpath("(//select)[6]"));
		selectOptionByIndex(materialType, 0);

		WebElement jiraNumber = driver.findElement(By.xpath("(//input[@id='JiraNo' and @type='text'])[1]"));
		jiraNumber.sendKeys("12345");

		WebElement quoteNumber = driver.findElement(By.xpath("(//input[@id='QuoteNo' and @type='text'])[1]"));
		quoteNumber.sendKeys("54321");

		WebElement quoteDate = driver.findElement(By.xpath("(//input [@type='date'])[1]"));
		String date = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
		quoteDate.sendKeys(date);

		Select s4 = new Select(driver.findElement(By.xpath("(//select)[10]")));
		List<WebElement> options4 = s4.getOptions();
		WebElement approvalStatus = s4.getFirstSelectedOption();
		System.out.println("Approval Status : " + approvalStatus.getText());
		Thread.sleep(1000);

		// Grid Values

		WebElement costCenter = driver.findElement(By.xpath("//*[@id=\"form_grid_0\"]/div[4]/div[3]/div/div/div[2]"));
		JavascriptExecutor c = (JavascriptExecutor) driver;
		c.executeScript("arguments[0].click();", costCenter);
		WebElement costCenter1 = driver
				.findElement(By.xpath("//*[@id=\"form_grid_0\"]/div[4]/div[3]/div/div/div[2]//select"));
		selectOptionByIndex(costCenter1, 0);

		WebElement expenseCategory = driver
				.findElement(By.xpath("//*[@id=\"form_grid_0\"]/div[4]/div[3]/div/div/div[3]"));
		JavascriptExecutor e = (JavascriptExecutor) driver;
		e.executeScript("arguments[0].click();", expenseCategory);
		WebElement expenseCategory1 = driver
				.findElement(By.xpath("//*[@id=\"form_grid_0\"]/div[4]/div[3]/div/div/div[3]//select"));
		selectOptionByIndex(expenseCategory1, 1);

		WebElement partNo = driver.findElement(By.xpath("//*[@id=\"form_grid_0\"]/div[4]/div[3]/div/div/div[4]"));
		JavascriptExecutor p = (JavascriptExecutor) driver;
		p.executeScript("arguments[0].click();", partNo);
		WebElement partNo1 = driver
				.findElement(By.xpath("//*[@id=\"form_grid_0\"]/div[4]/div[3]/div/div/div[4]//input"));
		partNo1.sendKeys("S");
		WebElement autoSuggestion = driver.findElement(By.xpath("//ul//li[1][@tabindex='-1']"));
		autoSuggestion.click();

		WebElement packingType = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[5]"));
		JavascriptExecutor p1 = (JavascriptExecutor) driver;
		p1.executeScript("arguments[0].click();", packingType);
		WebElement packingType1 = driver
				.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[5]//select"));
		selectOptionByIndex(packingType1, 0);

		WebElement workType = driver.findElement(By.xpath("//*[@id=\"form_grid_0\"]/div[4]/div[3]/div/div/div[6]"));
		JavascriptExecutor w = (JavascriptExecutor) driver;
		w.executeScript("arguments[0].click();", workType);
		WebElement workType1 = driver
				.findElement(By.xpath("//*[@id=\"form_grid_0\"]/div[4]/div[3]/div/div/div[6]//select"));
		selectOptionByIndex(workType1, 0);

		WebElement name = driver.findElement(By.xpath("//*[@id=\"form_grid_0\"]/div[4]/div[3]/div/div/div[7]"));
		JavascriptExecutor n = (JavascriptExecutor) driver;
		n.executeScript("arguments[0].click();", name);
		WebElement name1 = driver.findElement(By.xpath("//*[@id=\"form_grid_0\"]/div[4]/div[3]/div/div/div[7]//input"));
		name1.sendKeys("A");
		WebElement autoSuggestion1 = driver.findElement(By.xpath("//*[@class=\"ui-menu-item\"][1]"));
		autoSuggestion1.click();

		WebElement qty = driver.findElement(By.xpath("//*[@id=\"form_grid_0\"]/div[4]/div[3]/div/div/div[8]"));
		JavascriptExecutor q = (JavascriptExecutor) driver;
		q.executeScript("arguments[0].click();", qty);
		WebElement qty1 = driver.findElement(By.xpath("//*[@id=\"form_grid_0\"]/div[4]/div[3]/div/div/div[8]//input"));
		qty1.sendKeys("100");

		WebElement unitPrice = driver.findElement(By.xpath("//*[@id=\"form_grid_0\"]/div[4]/div[3]/div/div/div[9]"));
		JavascriptExecutor u = (JavascriptExecutor) driver;
		u.executeScript("arguments[0].click();", unitPrice);
		WebElement unitPrice1 = driver
				.findElement(By.xpath("//*[@id=\"form_grid_0\"]/div[4]/div[3]/div/div/div[9]//input"));
		unitPrice1.sendKeys("10");

		WebElement UOM = driver.findElement(By.xpath("//*[@id=\"form_grid_0\"]/div[4]/div[3]/div/div/div[13]"));
		JavascriptExecutor U = (JavascriptExecutor) driver;
		U.executeScript("arguments[0].click();", UOM);
		WebElement UOM1 = driver
				.findElement(By.xpath("//*[@id=\"form_grid_0\"]/div[4]/div[3]/div/div/div[13]//select"));
		selectOptionByIndex(UOM1, 0);

		WebElement deliveryDate = driver
				.findElement(By.xpath("//*[@id=\"form_grid_0\"]/div[4]/div[3]/div/div/div[14]"));
		JavascriptExecutor d = (JavascriptExecutor) driver;
		d.executeScript("arguments[0].click();", deliveryDate);
		WebElement deliverDate1 = driver
				.findElement(By.xpath("//*[@id=\"form_grid_0\"]/div[4]/div[3]/div/div/div[14]//input"));
		String date1 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd-MM-yyyy"));
		deliverDate1.sendKeys(date1);

		// With IQC checkbox code

		WebElement checkBox = driver
				.findElement(By.xpath("(//div[@id='form_grid_0']//div[@style='top:0px']//div)[15]"));
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", checkBox);
		WebElement checkBox1 = driver.findElement(
				By.xpath("(//div[@id='form_grid_0']//div[@style='top:0px']//div)[15]//input[@type='checkbox']"));
		JavascriptExecutor j1 = (JavascriptExecutor) driver;
		j1.executeScript("arguments[0].click();", checkBox1);
		JavascriptExecutor j2 = (JavascriptExecutor) driver;
		j2.executeScript("arguments[0].click();", checkBox1);

		/*
		 *//*
			 * Withot IQC Checkbox code // WebElement insReason = driver
			 * .findElement(By.xpath(
			 * "//*[@id=\"form_grid_0\"]/div[4]/div[3]/div/div/div[15]"));
			 * JavascriptExecutor j2 = (JavascriptExecutor) driver;
			 * j2.executeScript("arguments[0].click();", insReason); WebElement reasonText =
			 * driver.findElement( By.xpath(
			 * "//*[@id=\"form_grid_0\"]/div[4]/div[3]/div/div/div[15]//input[@type='text']"
			 * )); reasonText.sendKeys("Not Required");
			 */

	}

	@When("User create the PO Request for Testing & Services \\(Domestic)")
	public void user_create_the_po_request_for_testing_services_domestic() throws InterruptedException {
		WebElement purchaseOrderBtn = driver.findElement(By.xpath("(//a[contains(text(),'Purchase Order')])[1]"));
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		wait.until(ExpectedConditions.visibilityOfNestedElementsLocatedBy(purchaseOrderBtn,
				By.xpath("(//a[contains(text(),'Purchase Order')])[1]")));
		purchaseOrderBtn.click();

		WebElement addBtn = driver.findElement(By.xpath("(//button[@title='Add' and @type='button'])[1]"));
		addBtn.click();
		Thread.sleep(1000);

		WebElement branch = (driver.findElement(By.xpath("(//select)[1]")));
		select(branch).selectByIndex(1);
		Thread.sleep(500);

		WebElement wareHouse = (driver.findElement(By.xpath("(//select)[2]")));
		select(wareHouse).selectByIndex(0);
		Select s = new Select(driver.findElement(By.xpath("(//select)[3]")));
		List<WebElement> options = s.getOptions();
		WebElement storeFieldText = s.getFirstSelectedOption();
		System.out.println("Store : " + storeFieldText.getText());
		Thread.sleep(1000);
		WebElement poNumberFieldText = driver.findElement(
				By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[1]"));
		System.out.println("PO Number : " + poNumberFieldText.getAttribute("value"));

		WebElement poStatusFieldText = driver.findElement(
				By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[2]"));
		System.out.println("PO Status : " + poStatusFieldText.getAttribute("value"));

		WebElement poDateFieldValue = driver.findElement(
				By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[3]"));
		System.out.println("PO Date : " + poDateFieldValue.getAttribute("value"));

		WebElement vendorField = driver.findElement(By.xpath("(//input[@type='text'])[4]"));
		vendorField.sendKeys("A");
		Thread.sleep(500);

		List<WebElement> vendorList = driver.findElements(By.xpath("(//ul[@role='listbox'])[1]//li"));
		for (WebElement webElement : vendorList) {
			String list = webElement.getText();
			if (list.contains("A.K.INDUSTRIES")) {
				Thread.sleep(500);
				JavascriptExecutor k = (JavascriptExecutor) driver;
				k.executeScript("arguments[0].click();", webElement);
				System.out.println(webElement);
				break;
			}
			Thread.sleep(1000);
		}

		// Testing & Services

		WebElement orderType = driver.findElement(By.xpath("(//select)[5]"));
		selectOptionByIndex(orderType, 2);

		Select s1 = new Select(driver.findElement(By.xpath("(//select)[6]")));
		List<WebElement> options1 = s1.getOptions();
		WebElement paymentTerms = s1.getFirstSelectedOption();
		System.out.println("Payment Terms : " + paymentTerms.getText());

		Select s2 = new Select(driver.findElement(By.xpath("(//select)[7]")));
		List<WebElement> options2 = s2.getOptions();
		WebElement paymentMode = s2.getFirstSelectedOption();
		System.out.println("Payment Mode : " + paymentMode.getText());

		Select s3 = new Select(driver.findElement(By.xpath("(//select)[8]")));
		List<WebElement> options3 = s3.getOptions();
		WebElement poOwner = s3.getFirstSelectedOption();
		System.out.println("PO Owner : " + poOwner.getText());

		WebElement jiraNumber = driver.findElement(By.xpath("(//input[@id='JiraNo' and @type='text'])[1]"));
		jiraNumber.sendKeys("12345");

		WebElement quoteNumber = driver.findElement(By.xpath("(//input[@id='QuoteNo' and @type='text'])[1]"));
		quoteNumber.sendKeys("54321");

		WebElement quoteDate = driver.findElement(By.xpath("(//input [@type='date'])[1]"));
		String date = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
		quoteDate.sendKeys(date);

		Select s4 = new Select(driver.findElement(By.xpath("(//select)[9]")));
		List<WebElement> options4 = s4.getOptions();
		WebElement approvalStatus = s4.getFirstSelectedOption();
		System.out.println("Approval Status : " + approvalStatus.getText());
		Thread.sleep(1000);

		// Grid Values

		WebElement costCenter = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[2]"));
		JavascriptExecutor c = (JavascriptExecutor) driver;
		c.executeScript("arguments[0].click();", costCenter);
		WebElement costCenter1 = driver
				.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[2]//select"));
		selectOptionByIndex(costCenter1, 0);

		WebElement expenseCategory = driver
				.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[3]"));
		JavascriptExecutor e = (JavascriptExecutor) driver;
		e.executeScript("arguments[0].click();", expenseCategory);
		WebElement expenseCategory1 = driver
				.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[3]//select"));
		selectOptionByIndex(expenseCategory1, 1);

		WebElement workType = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[4]"));
		JavascriptExecutor w = (JavascriptExecutor) driver;
		w.executeScript("arguments[0].click();", workType);
		WebElement workType1 = driver
				.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[4]//select"));
		selectOptionByIndex(workType1, 0);

		WebElement name = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[5]"));
		JavascriptExecutor n = (JavascriptExecutor) driver;
		n.executeScript("arguments[0].click();", name);
		WebElement name1 = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[5]//input"));
		name1.sendKeys("A");
		WebElement autoSuggestion = driver.findElement(By.xpath("//*[@class='ui-menu-item'][1]"));
		autoSuggestion.click();

		WebElement serviceDesc = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[6]"));
		n.executeScript("arguments[0].click();", serviceDesc);
		WebElement serviceDesc1 = driver
				.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[6]//input"));
		serviceDesc1.sendKeys("Testing and Services");

		WebElement qty = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[7]"));
		JavascriptExecutor q = (JavascriptExecutor) driver;
		q.executeScript("arguments[0].click();", qty);
		WebElement qty1 = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[7]//input"));
		qty1.sendKeys("100");

		WebElement unitPrice = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[8]"));
		JavascriptExecutor u = (JavascriptExecutor) driver;
		u.executeScript("arguments[0].click();", unitPrice);
		WebElement unitPrice1 = driver
				.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[8]//input"));
		unitPrice1.sendKeys("10");

		WebElement UOM = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[10]"));
		JavascriptExecutor U = (JavascriptExecutor) driver;
		U.executeScript("arguments[0].click();", UOM);
		WebElement UOM1 = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[10]//select"));
		selectOptionByIndex(UOM1, 0);

		WebElement deliveryDate = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[11]"));
		JavascriptExecutor d = (JavascriptExecutor) driver;
		d.executeScript("arguments[0].click();", deliveryDate);
		WebElement deliverDate1 = driver
				.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[11]//input"));
		String date1 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd-MM-yyyy"));
		deliverDate1.sendKeys(date1);

		// With IQC checkbox code

		WebElement checkBox = driver
				.findElement(By.xpath("(//div[@id='form_grid_0']//div[@style='top:0px']//div)[12]"));
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", checkBox);
		WebElement checkBox1 = driver.findElement(
				By.xpath("(//div[@id='form_grid_0']//div[@style='top:0px']//div)[12]//input[@type='checkbox']"));
		JavascriptExecutor j1 = (JavascriptExecutor) driver;
		j1.executeScript("arguments[0].click();", checkBox1);
		JavascriptExecutor j2 = (JavascriptExecutor) driver;
		j2.executeScript("arguments[0].click();", checkBox1);
	}

	@When("User create the PO Request for WEB ORDER \\(RM-Domestic)")
	public void user_create_the_po_request_for_web_order_rm_domestic() throws InterruptedException, AWTException {
		Robot r = new Robot();

		try {
			WebElement purchaseOrderBtn = driver.findElement(By.xpath("(//a[contains(text(),'Purchase Order')])[1]"));
			purchaseOrderBtn.click();

			WebElement addBtn = driver.findElement(By.xpath("(//button[@title='Add' and @type='button'])[1]"));
			addBtn.click();
			Thread.sleep(1000);

			WebElement branch = (driver.findElement(By.xpath("(//select)[1]")));
			select(branch).selectByIndex(1);
			Thread.sleep(500);

			WebElement wareHouse = (driver.findElement(By.xpath("(//select)[2]")));
			select(wareHouse).selectByIndex(0);
			Select s = new Select(driver.findElement(By.xpath("(//select)[3]")));
			List<WebElement> options = s.getOptions();
			WebElement storeFieldText = s.getFirstSelectedOption();
			System.out.println("Store : " + storeFieldText.getText());
			Thread.sleep(1000);
			WebElement poNumberFieldText = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[1]"));
			System.out.println("PO Number : " + poNumberFieldText.getAttribute("value"));

			WebElement poStatusFieldText = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[2]"));
			System.out.println("PO Status : " + poStatusFieldText.getAttribute("value"));

			WebElement poDateFieldValue = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[3]"));
			System.out.println("PO Date : " + poDateFieldValue.getAttribute("value"));

			WebElement vendorField = driver.findElement(By.xpath("(//input[@type='text'])[4]"));
			vendorField.sendKeys("A");
			Thread.sleep(500);

			List<WebElement> vendorList = driver.findElements(By.xpath("(//ul[@role='listbox'])[1]//li"));
			for (WebElement webElement : vendorList) {
				String list = webElement.getText();
				if (list.contains("A.K.INDUSTRIES")) {
					Thread.sleep(500);
					JavascriptExecutor k = (JavascriptExecutor) driver;
					k.executeScript("arguments[0].click();", webElement);
					System.out.println(webElement);
					break;
				}
				Thread.sleep(1000);
			}

			Select s1 = new Select(driver.findElement(By.xpath("(//select)[7]")));
			List<WebElement> options1 = s1.getOptions();
			WebElement paymentTerms = s1.getFirstSelectedOption();
			System.out.println("Payment Terms : " + paymentTerms.getText());

			Select s2 = new Select(driver.findElement(By.xpath("(//select)[8]")));
			List<WebElement> options2 = s2.getOptions();
			WebElement paymentMode = s2.getFirstSelectedOption();
			System.out.println("Payment Mode : " + paymentMode.getText());

			Select s3 = new Select(driver.findElement(By.xpath("(//select)[9]")));
			List<WebElement> options3 = s3.getOptions();
			WebElement poOwner = s3.getFirstSelectedOption();
			System.out.println("PO Owner : " + poOwner.getText());

			// Web Order - RM Type

			WebElement orderType = driver.findElement(By.xpath("(//select)[5]"));
			selectOptionByIndex(orderType, 1);

			WebElement materialType1 = driver.findElement(By.xpath("(//select)[6]"));
			selectOptionByIndex(materialType1, 0);

			WebElement jiraNumber2 = driver.findElement(By.xpath("(//input[@id='QuoteNo' and @type='text'])[1]"));
			jiraNumber2.sendKeys("12345");

			WebElement quoteNumber2 = driver.findElement(By.xpath("(//input[@id='JiraNo' and @type='text'])[1]"));
			quoteNumber2.sendKeys("54321");

			WebElement quoteDate2 = driver.findElement(By.xpath("(//input [@type='date'])[1]"));
			String quotedate3 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			quoteDate2.sendKeys(quotedate3);

			Select s6 = new Select(driver.findElement(By.xpath("(//select)[10]")));
			List<WebElement> options6 = s6.getOptions();
			WebElement approvalStatus2 = s6.getFirstSelectedOption();
			System.out.println("Approval Status : " + approvalStatus2.getText());
			Thread.sleep(1000);

			WebElement importBtn = driver.findElement(By.xpath("//button[@id='importbutton' and @type='button']"));
			importBtn.click();
			Thread.sleep(1000);
			r.keyPress(KeyEvent.VK_R);
			r.keyRelease(KeyEvent.VK_R);
			r.keyPress(KeyEvent.VK_M);
			r.keyRelease(KeyEvent.VK_M);
			Thread.sleep(500);
			r.keyPress(KeyEvent.VK_DOWN);
			r.keyRelease(KeyEvent.VK_DOWN);
			Thread.sleep(500);
			r.keyPress(KeyEvent.VK_ENTER);
			r.keyRelease(KeyEvent.VK_ENTER);
			Thread.sleep(1200);
			WebElement msg = driver.findElement(By.xpath("(//app-alert//div)[1]"));
			System.out.println("PopUp Msg : " + msg.getText().toString());
			String popup = msg.getText().toString().trim();
			Thread.sleep(1000);

			if (popup.contentEquals("Importing in progress ... Please Wait ...")) {
				Thread.sleep(2000);
			}
			if (popup.contentEquals("Imported Successfully ...")) {
				System.out.println("Matched Successfully");
				Thread.sleep(1000);
			} else {
				System.out.println("Not Matching");
			}
		} catch (StaleElementReferenceException e) {
		}
	}

	@When("User create the PO Request for WEB ORDER \\(FG-Domestic)")
	public void user_create_the_po_request_for_web_order_fg_domestic() throws AWTException, InterruptedException {
		Robot r = new Robot();

		try {
			WebElement purchaseOrderBtn = driver.findElement(By.xpath("(//a[contains(text(),'Purchase Order')])[1]"));
			purchaseOrderBtn.click();

			WebElement addBtn = driver.findElement(By.xpath("(//button[@title='Add' and @type='button'])[1]"));
			addBtn.click();
			Thread.sleep(1000);

			WebElement branch = (driver.findElement(By.xpath("(//select)[1]")));
			select(branch).selectByIndex(1);
			Thread.sleep(500);

			WebElement wareHouse = (driver.findElement(By.xpath("(//select)[2]")));
			select(wareHouse).selectByIndex(0);
			Select s = new Select(driver.findElement(By.xpath("(//select)[3]")));
			List<WebElement> options = s.getOptions();
			WebElement storeFieldText = s.getFirstSelectedOption();
			System.out.println("Store : " + storeFieldText.getText());
			Thread.sleep(1000);
			WebElement poNumberFieldText = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[1]"));
			System.out.println("PO Number : " + poNumberFieldText.getAttribute("value"));

			WebElement poStatusFieldText = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[2]"));
			System.out.println("PO Status : " + poStatusFieldText.getAttribute("value"));

			WebElement poDateFieldValue = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[3]"));
			System.out.println("PO Date : " + poDateFieldValue.getAttribute("value"));

			WebElement vendorField = driver.findElement(By.xpath("(//input[@type='text'])[4]"));
			vendorField.sendKeys("A");
			Thread.sleep(500);

			List<WebElement> vendorList = driver.findElements(By.xpath("(//ul[@role='listbox'])[1]//li"));
			for (WebElement webElement : vendorList) {
				String list = webElement.getText();
				if (list.contains("A.K.INDUSTRIES")) {
					Thread.sleep(500);
					JavascriptExecutor k = (JavascriptExecutor) driver;
					k.executeScript("arguments[0].click();", webElement);
					System.out.println(webElement);
					break;
				}
				Thread.sleep(1000);
			}

			Select s1 = new Select(driver.findElement(By.xpath("(//select)[7]")));
			List<WebElement> options1 = s1.getOptions();
			WebElement paymentTerms = s1.getFirstSelectedOption();
			System.out.println("Payment Terms : " + paymentTerms.getText());

			Select s2 = new Select(driver.findElement(By.xpath("(//select)[8]")));
			List<WebElement> options2 = s2.getOptions();
			WebElement paymentMode = s2.getFirstSelectedOption();
			System.out.println("Payment Mode : " + paymentMode.getText());

			Select s3 = new Select(driver.findElement(By.xpath("(//select)[9]")));
			List<WebElement> options3 = s3.getOptions();
			WebElement poOwner = s3.getFirstSelectedOption();
			System.out.println("PO Owner : " + poOwner.getText());

			// Web Order - FG Type

			WebElement orderType = driver.findElement(By.xpath("(//select)[5]"));
			selectOptionByIndex(orderType, 1);

			WebElement materialType1 = driver.findElement(By.xpath("(//select)[6]"));
			selectOptionByIndex(materialType1, 1);

			WebElement jiraNumber2 = driver.findElement(By.xpath("(//input[@id='QuoteNo' and @type='text'])[1]"));
			jiraNumber2.sendKeys("12345");

			WebElement quoteNumber2 = driver.findElement(By.xpath("(//input[@id='JiraNo' and @type='text'])[1]"));
			quoteNumber2.sendKeys("54321");

			WebElement quoteDate2 = driver.findElement(By.xpath("(//input [@type='date'])[1]"));
			String quotedate3 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			quoteDate2.sendKeys(quotedate3);

			Select s6 = new Select(driver.findElement(By.xpath("(//select)[10]")));
			List<WebElement> options6 = s6.getOptions();
			WebElement approvalStatus2 = s6.getFirstSelectedOption();
			System.out.println("Approval Status : " + approvalStatus2.getText());
			Thread.sleep(1000);

			WebElement importBtn = driver.findElement(By.xpath("//button[@id='importbutton' and @type='button']"));
			importBtn.click();
			Thread.sleep(1500);
			r.keyPress(KeyEvent.VK_F);
			r.keyRelease(KeyEvent.VK_F);
			r.keyPress(KeyEvent.VK_G);
			r.keyRelease(KeyEvent.VK_G);
			Thread.sleep(500);
			r.keyPress(KeyEvent.VK_DOWN);
			r.keyRelease(KeyEvent.VK_DOWN);
			Thread.sleep(500);
			r.keyPress(KeyEvent.VK_ENTER);
			r.keyRelease(KeyEvent.VK_ENTER);
			Thread.sleep(1200);
			WebElement msg = driver.findElement(By.xpath("(//app-alert//div)[1]"));
			System.out.println("PopUp Msg : " + msg.getText().toString());
			String popup = msg.getText().toString().trim();
			Thread.sleep(1000);

			if (popup.contentEquals("Importing in progress ... Please Wait ...")) {
				Thread.sleep(2000);
			}
			if (popup.contentEquals("Imported Successfully ...")) {
				System.out.println("Matched Successfully");
				Thread.sleep(1000);
			} else {
				System.out.println("Not Matching");
			}
		} catch (StaleElementReferenceException e) {
		}
	}

	@When("User create the PO Request for WEB ORDER \\(RM-Import)")
	public void user_create_the_po_request_for_web_order_rm_import() throws AWTException, InterruptedException {
		Robot r = new Robot();

		try {
			WebElement purchaseOrderBtn = driver.findElement(By.xpath("(//a[contains(text(),'Purchase Order')])[1]"));
			purchaseOrderBtn.click();

			WebElement addBtn = driver.findElement(By.xpath("(//button[@title='Add' and @type='button'])[1]"));
			addBtn.click();
			Thread.sleep(1000);

			WebElement branch = (driver.findElement(By.xpath("(//select)[1]")));
			select(branch).selectByIndex(1);
			Thread.sleep(500);

			WebElement wareHouse = (driver.findElement(By.xpath("(//select)[2]")));
			select(wareHouse).selectByIndex(0);
			Select s = new Select(driver.findElement(By.xpath("(//select)[3]")));
			List<WebElement> options = s.getOptions();
			WebElement storeFieldText = s.getFirstSelectedOption();
			System.out.println("Store : " + storeFieldText.getText());
			Thread.sleep(1000);
			WebElement poNumberFieldText = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[1]"));
			System.out.println("PO Number : " + poNumberFieldText.getAttribute("value"));

			WebElement poStatusFieldText = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[2]"));
			System.out.println("PO Status : " + poStatusFieldText.getAttribute("value"));

			WebElement poDateFieldValue = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[3]"));
			System.out.println("PO Date : " + poDateFieldValue.getAttribute("value"));

			WebElement vendorField = driver.findElement(By.xpath("(//input[@type='text' and @role='combobox'])[1]"));
			vendorField.sendKeys("DIG");
			Thread.sleep(500);

			List<WebElement> vendorList = driver.findElements(By.xpath("(//ul[@role='listbox'])[1]//li"));
			for (WebElement webElement : vendorList) {
				String list = webElement.getText();
				if (list.contains("Digi-key Electronics")) {
					Thread.sleep(500);
					webElement.click();
					System.out.println(webElement);
					break;
				}
				Thread.sleep(1000);
			}

			Select s1 = new Select(driver.findElement(By.xpath("(//select)[7]")));
			List<WebElement> options1 = s1.getOptions();
			WebElement paymentTerms = s1.getFirstSelectedOption();
			System.out.println("Payment Terms : " + paymentTerms.getText());

			Select s2 = new Select(driver.findElement(By.xpath("(//select)[8]")));
			List<WebElement> options2 = s2.getOptions();
			WebElement paymentMode = s2.getFirstSelectedOption();
			System.out.println("Payment Mode : " + paymentMode.getText());

			Select s3 = new Select(driver.findElement(By.xpath("(//select)[9]")));
			List<WebElement> options3 = s3.getOptions();
			WebElement poOwner = s3.getFirstSelectedOption();
			System.out.println("PO Owner : " + poOwner.getText());

			// Web Order - RM Type

			WebElement orderType = driver.findElement(By.xpath("(//select)[5]"));
			selectOptionByIndex(orderType, 1);

			WebElement materialType1 = driver.findElement(By.xpath("(//select)[6]"));
			selectOptionByIndex(materialType1, 0);

			WebElement jiraNumber2 = driver.findElement(By.xpath("(//input[@id='QuoteNo' and @type='text'])[1]"));
			jiraNumber2.sendKeys("12345");

			WebElement quoteNumber2 = driver.findElement(By.xpath("(//input[@id='JiraNo' and @type='text'])[1]"));
			quoteNumber2.sendKeys("54321");

			WebElement quoteDate2 = driver.findElement(By.xpath("(//input [@type='date'])[1]"));
			String quotedate3 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			quoteDate2.sendKeys(quotedate3);

			Select s6 = new Select(driver.findElement(By.xpath("(//select)[10]")));
			List<WebElement> options6 = s6.getOptions();
			WebElement approvalStatus2 = s6.getFirstSelectedOption();
			System.out.println("Approval Status : " + approvalStatus2.getText());
			Thread.sleep(1000);

			WebElement importBtn = driver.findElement(By.xpath("//button[@id='importbutton' and @type='button']"));
			importBtn.click();
			Thread.sleep(1000);
			r.keyPress(KeyEvent.VK_R);
			r.keyRelease(KeyEvent.VK_R);
			r.keyPress(KeyEvent.VK_M);
			r.keyRelease(KeyEvent.VK_M);
			Thread.sleep(500);
			r.keyPress(KeyEvent.VK_DOWN);
			r.keyRelease(KeyEvent.VK_DOWN);
			Thread.sleep(500);
			r.keyPress(KeyEvent.VK_ENTER);
			r.keyRelease(KeyEvent.VK_ENTER);
			Thread.sleep(1200);
			WebElement msg = driver.findElement(By.xpath("(//app-alert//div)[1]"));
			System.out.println("PopUp Msg : " + msg.getText().toString());
			String popup = msg.getText().toString().trim();
			Thread.sleep(1000);

			if (popup.contentEquals("Importing in progress ... Please Wait ...")) {
				Thread.sleep(2000);
			}
			if (popup.contentEquals("Imported Successfully ...")) {
				System.out.println("Matched Successfully");
				Thread.sleep(1000);
			} else {
				System.out.println("Not Matching");
			}
		} catch (StaleElementReferenceException e) {
		}
	}

	@When("User create the PO Request for WEB ORDER \\(FG-Import)")
	public void user_create_the_po_request_for_web_order_fg_import() throws InterruptedException, AWTException {
		Robot r = new Robot();

		try {
			WebElement purchaseOrderBtn = driver.findElement(By.xpath("(//a[contains(text(),'Purchase Order')])[1]"));
			purchaseOrderBtn.click();

			WebElement addBtn = driver.findElement(By.xpath("(//button[@title='Add' and @type='button'])[1]"));
			addBtn.click();
			Thread.sleep(1000);

			WebElement branch = (driver.findElement(By.xpath("(//select)[1]")));
			select(branch).selectByIndex(1);
			Thread.sleep(500);

			WebElement wareHouse = (driver.findElement(By.xpath("(//select)[2]")));
			select(wareHouse).selectByIndex(0);
			Select s = new Select(driver.findElement(By.xpath("(//select)[3]")));
			List<WebElement> options = s.getOptions();
			WebElement storeFieldText = s.getFirstSelectedOption();
			System.out.println("Store : " + storeFieldText.getText());
			Thread.sleep(1000);
			WebElement poNumberFieldText = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[1]"));
			System.out.println("PO Number : " + poNumberFieldText.getAttribute("value"));

			WebElement poStatusFieldText = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[2]"));
			System.out.println("PO Status : " + poStatusFieldText.getAttribute("value"));

			WebElement poDateFieldValue = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[3]"));
			System.out.println("PO Date : " + poDateFieldValue.getAttribute("value"));

			WebElement vendorField = driver.findElement(By.xpath("(//input[@type='text' and @role='combobox'])[1]"));
			vendorField.sendKeys("DIG");
			Thread.sleep(500);

			List<WebElement> vendorList = driver.findElements(By.xpath("(//ul[@role='listbox'])[1]//li"));
			for (WebElement webElement : vendorList) {
				String list = webElement.getText();
				if (list.contains("Digi-key Electronics")) {
					Thread.sleep(500);
					webElement.click();
					System.out.println(webElement);
					break;
				}
				Thread.sleep(1000);
			}

			Select s1 = new Select(driver.findElement(By.xpath("(//select)[7]")));
			List<WebElement> options1 = s1.getOptions();
			WebElement paymentTerms = s1.getFirstSelectedOption();
			System.out.println("Payment Terms : " + paymentTerms.getText());

			Select s2 = new Select(driver.findElement(By.xpath("(//select)[8]")));
			List<WebElement> options2 = s2.getOptions();
			WebElement paymentMode = s2.getFirstSelectedOption();
			System.out.println("Payment Mode : " + paymentMode.getText());

			Select s3 = new Select(driver.findElement(By.xpath("(//select)[9]")));
			List<WebElement> options3 = s3.getOptions();
			WebElement poOwner = s3.getFirstSelectedOption();
			System.out.println("PO Owner : " + poOwner.getText());

			// Web Order - FG Type

			WebElement orderType = driver.findElement(By.xpath("(//select)[5]"));
			selectOptionByIndex(orderType, 1);

			WebElement materialType1 = driver.findElement(By.xpath("(//select)[6]"));
			selectOptionByIndex(materialType1, 1);

			WebElement jiraNumber2 = driver.findElement(By.xpath("(//input[@id='QuoteNo' and @type='text'])[1]"));
			jiraNumber2.sendKeys("12345");

			WebElement quoteNumber2 = driver.findElement(By.xpath("(//input[@id='JiraNo' and @type='text'])[1]"));
			quoteNumber2.sendKeys("54321");

			WebElement quoteDate2 = driver.findElement(By.xpath("(//input [@type='date'])[1]"));
			String quotedate3 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			quoteDate2.sendKeys(quotedate3);

			Select s6 = new Select(driver.findElement(By.xpath("(//select)[10]")));
			List<WebElement> options6 = s6.getOptions();
			WebElement approvalStatus2 = s6.getFirstSelectedOption();
			System.out.println("Approval Status : " + approvalStatus2.getText());
			Thread.sleep(1000);

			WebElement importBtn = driver.findElement(By.xpath("//button[@id='importbutton' and @type='button']"));
			importBtn.click();
			Thread.sleep(1000);
			r.keyPress(KeyEvent.VK_F);
			r.keyRelease(KeyEvent.VK_F);
			r.keyPress(KeyEvent.VK_G);
			r.keyRelease(KeyEvent.VK_G);
			Thread.sleep(500);
			r.keyPress(KeyEvent.VK_DOWN);
			r.keyRelease(KeyEvent.VK_DOWN);
			Thread.sleep(500);
			r.keyPress(KeyEvent.VK_ENTER);
			r.keyRelease(KeyEvent.VK_ENTER);
			Thread.sleep(1200);
			WebElement msg = driver.findElement(By.xpath("(//app-alert//div)[1]"));
			System.out.println("PopUp Msg : " + msg.getText().toString());
			String popup = msg.getText().toString().trim();
			Thread.sleep(1000);

			if (popup.contentEquals("Importing in progress ... Please Wait ...")) {
				Thread.sleep(2000);
			}
			if (popup.contentEquals("Imported Successfully ...")) {
				System.out.println("Matched Successfully");
				Thread.sleep(1000);
			} else {
				System.out.println("Not Matching");
			}
		} catch (StaleElementReferenceException e) {
		}
	}

	@When("User create the PO Request for PO ORDER \\(FG-Domestic)")
	public void user_create_the_po_request_for_po_order_fg_domestic() throws InterruptedException {
		try {
			JavascriptExecutor j = (JavascriptExecutor)driver;
			WebElement purchaseOrderBtn = driver.findElement(By.xpath("(//a[contains(text(),'Purchase Order')])[1]"));
			purchaseOrderBtn.click();

			WebElement addBtn = driver.findElement(By.xpath("(//button[@title='Add' and @type='button'])[1]"));
			addBtn.click();
			Thread.sleep(1000);

			WebElement branch = (driver.findElement(By.xpath("(//select)[1]")));
			select(branch).selectByIndex(1);
			Thread.sleep(500);

			WebElement wareHouse = (driver.findElement(By.xpath("(//select)[2]")));
			select(wareHouse).selectByIndex(0);
			Select s = new Select(driver.findElement(By.xpath("(//select)[3]")));
			List<WebElement> options = s.getOptions();
			WebElement storeFieldText = s.getFirstSelectedOption();
			System.out.println("Store : " + storeFieldText.getText());
			Thread.sleep(1000);
			WebElement poNumberFieldText = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[1]"));
			System.out.println("PO Number : " + poNumberFieldText.getAttribute("value"));

			WebElement poStatusFieldText = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[2]"));
			System.out.println("PO Status : " + poStatusFieldText.getAttribute("value"));

			WebElement poDateFieldValue = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[3]"));
			System.out.println("PO Date : " + poDateFieldValue.getAttribute("value"));

			WebElement vendorField = driver.findElement(By.xpath("(//input[@type='text'])[4]"));
			vendorField.sendKeys("A");
			Thread.sleep(500);

			List<WebElement> vendorList = driver.findElements(By.xpath("(//ul[@role='listbox'])[1]//li"));
			for (WebElement webElement : vendorList) {
				String list = webElement.getText();
				if (list.contains("A.K.INDUSTRIES")) {
					Thread.sleep(500);
					JavascriptExecutor k = (JavascriptExecutor) driver;
					k.executeScript("arguments[0].click();", webElement);
					System.out.println(webElement);
					break;
				}
				Thread.sleep(1000);
			}

			Select s1 = new Select(driver.findElement(By.xpath("(//select)[7]")));
			List<WebElement> options1 = s1.getOptions();
			WebElement paymentTerms = s1.getFirstSelectedOption();
			System.out.println("Payment Terms : " + paymentTerms.getText());

			Select s2 = new Select(driver.findElement(By.xpath("(//select)[8]")));
			List<WebElement> options2 = s2.getOptions();
			WebElement paymentMode = s2.getFirstSelectedOption();
			System.out.println("Payment Mode : " + paymentMode.getText());

			Select s3 = new Select(driver.findElement(By.xpath("(//select)[9]")));
			List<WebElement> options3 = s3.getOptions();
			WebElement poOwner = s3.getFirstSelectedOption();
			System.out.println("PO Owner : " + poOwner.getText());

			// PO Order - FG Type

			WebElement orderType = driver.findElement(By.xpath("(//select)[5]"));
			selectOptionByIndex(orderType, 0);

			WebElement materialType = driver.findElement(By.xpath("(//select)[6]"));
			selectOptionByIndex(materialType, 1);

			WebElement jiraNumber = driver.findElement(By.xpath("(//input[@id='JiraNo' and @type='text'])[1]"));
			jiraNumber.sendKeys("12345");

			WebElement quoteNumber = driver.findElement(By.xpath("(//input[@id='QuoteNo' and @type='text'])[1]"));
			quoteNumber.sendKeys("54321");

			WebElement quoteDate = driver.findElement(By.xpath("(//input [@type='date'])[1]"));
			String date = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			quoteDate.sendKeys(date);

			Select s4 = new Select(driver.findElement(By.xpath("(//select)[10]")));
			List<WebElement> options4 = s4.getOptions();
			WebElement approvalStatus = s4.getFirstSelectedOption();
			System.out.println("Approval Status : " + approvalStatus.getText());
			Thread.sleep(1000);

			// Grid Values

			WebElement costCenter = driver.findElement(By.xpath(".//div[contains (@class, 'slick-cell l1 r1')]"));
			j.executeScript("arguments[0].click();", costCenter);
			WebElement costCenter1 = driver
					.findElement(By.xpath(".//div[contains (@class, 'slick-cell l1 r1')]//select"));
			selectOptionByIndex(costCenter1, 0);

			WebElement expenseCategory = driver
					.findElement(By.xpath(".//div[contains (@class, 'slick-cell l2 r2')]"));
			j.executeScript("arguments[0].click();", expenseCategory);
			WebElement expenseCategory1 = driver
					.findElement(By.xpath(".//div[contains (@class, 'slick-cell l2 r2')]//select"));
			selectOptionByIndex(expenseCategory1, 0);

			WebElement partNo = driver.findElement(By.xpath(".//div[contains (@class, 'slick-cell l3 r3')]"));
			j.executeScript("arguments[0].click();", partNo);
			WebElement partNo1 = driver
					.findElement(By.xpath(".//div[contains (@class, 'slick-cell l3 r3')]//input"));
			partNo1.sendKeys("A");
			WebElement autoSuggestion = driver.findElement(By.xpath("//ul//li[1][@tabindex='-1']"));
			autoSuggestion.click();

			WebElement orig_Mater_Type = driver
					.findElement(By.xpath(".//div[contains (@class, 'slick-cell l4 r4')]"));
			j.executeScript("arguments[0].click();", orig_Mater_Type);
			Thread.sleep(500);
			try {
				j.executeScript("arguments[0].click();", orig_Mater_Type);
			} catch (Exception e2) {
				orig_Mater_Type = driver
						.findElement(By.xpath(".//div[contains (@class, 'slick-cell l4 r4')]"));
				j.executeScript("arguments[0].click();", orig_Mater_Type);
			}
			WebElement orig_Mater_Type1 = driver
					.findElement(By.xpath(".//div[contains (@class, 'slick-cell l4 r4')]//select"));
			selectOptionByIndex(orig_Mater_Type1, 0);

			WebElement workType = driver.findElement(By.xpath(".//div[contains (@class, 'slick-cell l5 r5')]"));
			j.executeScript("arguments[0].click();", workType);
			Thread.sleep(500);
			try {
				j.executeScript("arguments[0].click();", workType);
			} catch (StaleElementReferenceException e1) {
				workType = driver.findElement(By.xpath(".//div[contains (@class, 'slick-cell l5 r5')]"));
				j.executeScript("arguments[0].click();", workType);
			}
			WebElement workType1 = driver
					.findElement(By.xpath(".//div[contains (@class, 'slick-cell l5 r5')]//select"));
			selectOptionByIndex(workType1, 0);

			WebElement name = driver.findElement(By.xpath(".//div[contains (@class, 'slick-cell l6 r6')]"));
			j.executeScript("arguments[0].click();", name);
			Thread.sleep(500);
			try {
				j.executeScript("arguments[0].click();", name);
			} catch (StaleElementReferenceException e2) {
				name = driver.findElement(By.xpath(".//div[contains (@class, 'slick-cell l6 r6')]"));
				j.executeScript("arguments[0].click();", name);
			}
			Thread.sleep(1000);
			WebElement name1 = driver
					.findElement(By.xpath(".//div[contains (@class, 'slick-cell l6 r6')]//input"));
			name1.sendKeys("A");
			WebElement autoSuggestion1 = driver.findElement(By.xpath("//*[@class='ui-menu-item'][1]"));
			autoSuggestion1.click();

			WebElement qty = driver.findElement(By.xpath(".//div[contains (@class, 'slick-cell l7 r7')]"));
			j.executeScript("arguments[0].click();", qty);
			Thread.sleep(500);
			try {
				j.executeScript("arguments[0].click();", qty);
			} catch (StaleElementReferenceException e3) {
				qty = driver.findElement(By.xpath(".//div[contains (@class, 'slick-cell l7 r7')]"));
				j.executeScript("arguments[0].click();", qty);
			}
			WebElement qty1 = driver
					.findElement(By.xpath(".//div[contains (@class, 'slick-cell l7 r7')]//input"));
			qty1.sendKeys("100");

			WebElement unitPrice = driver.findElement(By.xpath(".//div[contains (@class, 'slick-cell l8 r8')]"));
			j.executeScript("arguments[0].click();", unitPrice);
			Thread.sleep(500);
			try {
				j.executeScript("arguments[0].click();", unitPrice);
			} catch (StaleElementReferenceException e4) {
				unitPrice = driver.findElement(By.xpath(".//div[contains (@class, 'slick-cell l8 r8')]"));
				j.executeScript("arguments[0].click();", unitPrice);
			}
			WebElement unitPrice1 = driver
					.findElement(By.xpath(".//div[contains (@class, 'slick-cell l8 r8')]//input"));
			unitPrice1.sendKeys("10");

			WebElement UOM = driver.findElement(By.xpath(".//div[contains (@class, 'slick-cell l12 r12')]"));
			j.executeScript("arguments[0].click();", UOM);
			Thread.sleep(500);
			try {
				j.executeScript("arguments[0].click();", UOM);
			} catch (StaleElementReferenceException e5) {
				UOM = driver.findElement(By.xpath(".//div[contains (@class, 'slick-cell l12 r12')]"));
				j.executeScript("arguments[0].click();", UOM);
			}
			WebElement UOM1 = driver
					.findElement(By.xpath(".//div[contains (@class, 'slick-cell l12 r12')]//select"));
			selectOptionByIndex(UOM1, 0);

			WebElement deliveryDate = driver
					.findElement(By.xpath(".//div[contains (@class, 'slick-cell l13 r13')]"));
			j.executeScript("arguments[0].click();", deliveryDate);
			Thread.sleep(500);
			try {
				j.executeScript("arguments[0].click();", deliveryDate);
			} catch (StaleElementReferenceException e5) {
				deliveryDate = driver.findElement(By.xpath(".//div[contains (@class, 'slick-cell l13 r13')]"));
				j.executeScript("arguments[0].click();", deliveryDate);
			}
			WebElement deliverDate1 = driver
					.findElement(By.xpath(".//div[contains (@class, 'slick-cell l13 r13')]//input"));
			String date1 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd-MM-yyyy"));
			deliverDate1.sendKeys(date1);

			// With IQC checkbox code

			WebElement checkBox = driver
					.findElement(By.xpath(".//div[contains (@class, 'slick-cell l14 r14')]"));
			j.executeScript("arguments[0].click();", checkBox);
			Thread.sleep(500);
			try {
				j.executeScript("arguments[0].click();", checkBox);
			} catch (StaleElementReferenceException e5) {
				checkBox = driver.findElement(By.xpath(".//div[contains (@class, 'slick-cell l14 r14')]"));
				j.executeScript("arguments[0].click();", checkBox);
			}
			WebElement checkBox1 = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l14 r14')]//input[@type='checkbox']"));
			j.executeScript("arguments[0].click();", checkBox1);
			j.executeScript("arguments[0].click();", checkBox1);

			/*
			 *//*
				 * Withot IQC Checkbox code // WebElement insReason = driver
				 * .findElement(By.xpath(
				 * "//*[@id=\"form_grid_0\"]/div[4]/div[3]/div/div/div[15]"));
				 * JavascriptExecutor j2 = (JavascriptExecutor) driver;
				 * j2.executeScript("arguments[0].click();", insReason); WebElement reasonText =
				 * driver.findElement( By.xpath(
				 * "//*[@id=\"form_grid_0\"]/div[4]/div[3]/div/div/div[15]//input[@type='text']"
				 * )); reasonText.sendKeys("Not Required");
				 */
		}

		catch (StaleElementReferenceException e) {
		}
	}

	@When("User create the PO Request for PO ORDER \\(NPM-Domestic)")
	public void user_create_the_po_request_for_po_order_npm_domestic() throws InterruptedException {
		try {

			WebElement purchaseOrderBtn = driver.findElement(By.xpath("(//a[contains(text(),'Purchase Order')])[1]"));
			purchaseOrderBtn.click();

			WebElement addBtn = driver.findElement(By.xpath("(//button[@title='Add' and @type='button'])[1]"));
			addBtn.click();
			Thread.sleep(1000);

			WebElement branch = (driver.findElement(By.xpath("(//select)[1]")));
			select(branch).selectByIndex(1);
			Thread.sleep(500);

			WebElement wareHouse = (driver.findElement(By.xpath("(//select)[2]")));
			select(wareHouse).selectByIndex(0);
			Select s = new Select(driver.findElement(By.xpath("(//select)[3]")));
			List<WebElement> options = s.getOptions();
			WebElement storeFieldText = s.getFirstSelectedOption();
			System.out.println("Store : " + storeFieldText.getText());
			Thread.sleep(1000);
			WebElement poNumberFieldText = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[1]"));
			System.out.println("PO Number : " + poNumberFieldText.getAttribute("value"));

			WebElement poStatusFieldText = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[2]"));
			System.out.println("PO Status : " + poStatusFieldText.getAttribute("value"));

			WebElement poDateFieldValue = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[3]"));
			System.out.println("PO Date : " + poDateFieldValue.getAttribute("value"));

			WebElement vendorField = driver.findElement(By.xpath("(//input[@type='text'])[4]"));
			vendorField.sendKeys("A");
			Thread.sleep(500);

			List<WebElement> vendorList = driver.findElements(By.xpath("(//ul[@role='listbox'])[1]//li"));
			for (WebElement webElement : vendorList) {
				String list = webElement.getText();
				if (list.contains("A.K.INDUSTRIES")) {
					Thread.sleep(500);
					JavascriptExecutor k = (JavascriptExecutor) driver;
					k.executeScript("arguments[0].click();", webElement);
					System.out.println(webElement);
					break;
				}
				Thread.sleep(1000);
			}

			Select s1 = new Select(driver.findElement(By.xpath("(//select)[7]")));
			List<WebElement> options1 = s1.getOptions();
			WebElement paymentTerms = s1.getFirstSelectedOption();
			System.out.println("Payment Terms : " + paymentTerms.getText());

			Select s2 = new Select(driver.findElement(By.xpath("(//select)[8]")));
			List<WebElement> options2 = s2.getOptions();
			WebElement paymentMode = s2.getFirstSelectedOption();
			System.out.println("Payment Mode : " + paymentMode.getText());

			Select s3 = new Select(driver.findElement(By.xpath("(//select)[9]")));
			List<WebElement> options3 = s3.getOptions();
			WebElement poOwner = s3.getFirstSelectedOption();
			System.out.println("PO Owner : " + poOwner.getText());

			// PO Order - NPM Type

			WebElement orderType = driver.findElement(By.xpath("(//select)[5]"));
			selectOptionByIndex(orderType, 0);

			WebElement materialType = driver.findElement(By.xpath("(//select)[6]"));
			selectOptionByIndex(materialType, 2);

			WebElement jiraNumber = driver.findElement(By.xpath("(//input[@id='JiraNo' and @type='text'])[1]"));
			jiraNumber.sendKeys("12345");

			WebElement quoteNumber = driver.findElement(By.xpath("(//input[@id='QuoteNo' and @type='text'])[1]"));
			quoteNumber.sendKeys("54321");

			WebElement quoteDate = driver.findElement(By.xpath("(//input [@type='date'])[1]"));
			String date = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			quoteDate.sendKeys(date);

			Select s4 = new Select(driver.findElement(By.xpath("(//select)[10]")));
			List<WebElement> options4 = s4.getOptions();
			WebElement approvalStatus = s4.getFirstSelectedOption();
			System.out.println("Approval Status : " + approvalStatus.getText());
			Thread.sleep(1000);

			// Grid Values

			WebElement costCenter = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[2]"));
			JavascriptExecutor c = (JavascriptExecutor) driver;
			c.executeScript("arguments[0].click();", costCenter);
			WebElement costCenter1 = driver
					.findElement(By.xpath("//*[@id=\"form_grid_0\"]/div[4]/div[3]/div/div/div[2]//select"));
			selectOptionByIndex(costCenter1, 0);

			WebElement expenseCategory = driver
					.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[3]"));
			JavascriptExecutor e = (JavascriptExecutor) driver;
			e.executeScript("arguments[0].click();", expenseCategory);
			WebElement expenseCategory1 = driver
					.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[3]//select"));
			selectOptionByIndex(expenseCategory1, 0);

			WebElement partNo = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[4]"));
			JavascriptExecutor p = (JavascriptExecutor) driver;
			p.executeScript("arguments[0].click();", partNo);
			WebElement partNo1 = driver
					.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[4]//input"));
			partNo1.sendKeys("A");
			WebElement autoSuggestion = driver.findElement(By.xpath("//ul//li[1][@tabindex='-1']"));
			autoSuggestion.click();

			WebElement qty = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[5]"));
			JavascriptExecutor q = (JavascriptExecutor) driver;
			q.executeScript("arguments[0].click();", qty);
			Thread.sleep(500);
			try {
				q.executeScript("arguments[0].click();", qty);
			} catch (StaleElementReferenceException e3) {
				qty = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[5]"));
				q.executeScript("arguments[0].click();", qty);
			}
			WebElement qty1 = driver
					.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[5]//input"));
			qty1.sendKeys("100");

			WebElement unitPrice = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[6]"));
			JavascriptExecutor u = (JavascriptExecutor) driver;
			u.executeScript("arguments[0].click();", unitPrice);
			Thread.sleep(500);
			try {
				u.executeScript("arguments[0].click();", unitPrice);
				Thread.sleep(500);
			} catch (StaleElementReferenceException e4) {
				unitPrice = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[6]"));
				u.executeScript("arguments[0].click();", unitPrice);
			}
			WebElement unitPrice1 = driver
					.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[6]//input"));
			unitPrice1.sendKeys("10");

			WebElement UOM = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[10]"));
			JavascriptExecutor U = (JavascriptExecutor) driver;
			U.executeScript("arguments[0].click();", UOM);
			Thread.sleep(500);
			try {
				U.executeScript("arguments[0].click();", UOM);
			} catch (StaleElementReferenceException e5) {
				UOM = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[10]"));
				U.executeScript("arguments[0].click();", UOM);
			}
			WebElement UOM1 = driver
					.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[10]//select"));
			selectOptionByIndex(UOM1, 0);

			WebElement deliveryDate = driver
					.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[11]"));
			JavascriptExecutor d = (JavascriptExecutor) driver;
			d.executeScript("arguments[0].click();", deliveryDate);
			Thread.sleep(500);
			try {
				d.executeScript("arguments[0].click();", deliveryDate);
			} catch (StaleElementReferenceException e5) {
				deliveryDate = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[11]"));
				d.executeScript("arguments[0].click();", deliveryDate);
			}
			WebElement deliverDate1 = driver
					.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[11]//input"));
			String date1 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd-MM-yyyy"));
			deliverDate1.sendKeys(date1);

			// With IQC checkbox code

			WebElement checkBox = driver
					.findElement(By.xpath("(//div[@id='form_grid_0']//div[@style='top:0px']//div)[12]"));
			JavascriptExecutor js = (JavascriptExecutor) driver;
			js.executeScript("arguments[0].click();", checkBox);
			Thread.sleep(500);
			try {
				js.executeScript("arguments[0].click();", checkBox);
			} catch (StaleElementReferenceException e5) {
				checkBox = driver.findElement(By.xpath("(//div[@id='form_grid_0']//div[@style='top:0px']//div)[12]"));
				js.executeScript("arguments[0].click();", checkBox);
			}
			WebElement checkBox1 = driver.findElement(
					By.xpath("(//div[@id='form_grid_0']//div[@style='top:0px']//div)[12]//input[@type='checkbox']"));
			JavascriptExecutor j1 = (JavascriptExecutor) driver;
			j1.executeScript("arguments[0].click();", checkBox1);
			JavascriptExecutor j2 = (JavascriptExecutor) driver;
			j2.executeScript("arguments[0].click();", checkBox1);

			/*
			 *//*
				 * Withot IQC Checkbox code // WebElement insReason = driver
				 * .findElement(By.xpath(
				 * "//*[@id=\"form_grid_0\"]/div[4]/div[3]/div/div/div[15]"));
				 * JavascriptExecutor j2 = (JavascriptExecutor) driver;
				 * j2.executeScript("arguments[0].click();", insReason); WebElement reasonText =
				 * driver.findElement( By.xpath(
				 * "//*[@id=\"form_grid_0\"]/div[4]/div[3]/div/div/div[15]//input[@type='text']"
				 * )); reasonText.sendKeys("Not Required");
				 */
		}

		catch (StaleElementReferenceException e) {
		}
	}

	@When("User create the PO Request for WEB ORDER \\(NPM-Domestic)")
	public void user_create_the_po_request_for_web_order_npm_domestic() throws InterruptedException {
		try {

			WebElement purchaseOrderBtn = driver.findElement(By.xpath("(//a[contains(text(),'Purchase Order')])[1]"));
			purchaseOrderBtn.click();

			WebElement addBtn = driver.findElement(By.xpath("(//button[@title='Add' and @type='button'])[1]"));
			addBtn.click();
			Thread.sleep(1000);

			WebElement branch = (driver.findElement(By.xpath("(//select)[1]")));
			select(branch).selectByIndex(1);
			Thread.sleep(500);

			WebElement wareHouse = (driver.findElement(By.xpath("(//select)[2]")));
			select(wareHouse).selectByIndex(0);
			Select s = new Select(driver.findElement(By.xpath("(//select)[3]")));
			List<WebElement> options = s.getOptions();
			WebElement storeFieldText = s.getFirstSelectedOption();
			System.out.println("Store : " + storeFieldText.getText());
			Thread.sleep(1000);
			WebElement poNumberFieldText = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[1]"));
			System.out.println("PO Number : " + poNumberFieldText.getAttribute("value"));

			WebElement poStatusFieldText = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[2]"));
			System.out.println("PO Status : " + poStatusFieldText.getAttribute("value"));

			WebElement poDateFieldValue = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[3]"));
			System.out.println("PO Date : " + poDateFieldValue.getAttribute("value"));

			WebElement vendorField = driver.findElement(By.xpath("(//input[@type='text'])[4]"));
			vendorField.sendKeys("A");
			Thread.sleep(500);

			List<WebElement> vendorList = driver.findElements(By.xpath("(//ul[@role='listbox'])[1]//li"));
			for (WebElement webElement : vendorList) {
				String list = webElement.getText();
				if (list.contains("A.K.INDUSTRIES")) {
					Thread.sleep(500);
					JavascriptExecutor k = (JavascriptExecutor) driver;
					k.executeScript("arguments[0].click();", webElement);
					System.out.println(webElement);
					break;
				}
				Thread.sleep(1000);
			}

			Select s1 = new Select(driver.findElement(By.xpath("(//select)[7]")));
			List<WebElement> options1 = s1.getOptions();
			WebElement paymentTerms = s1.getFirstSelectedOption();
			System.out.println("Payment Terms : " + paymentTerms.getText());

			Select s2 = new Select(driver.findElement(By.xpath("(//select)[8]")));
			List<WebElement> options2 = s2.getOptions();
			WebElement paymentMode = s2.getFirstSelectedOption();
			System.out.println("Payment Mode : " + paymentMode.getText());

			Select s3 = new Select(driver.findElement(By.xpath("(//select)[9]")));
			List<WebElement> options3 = s3.getOptions();
			WebElement poOwner = s3.getFirstSelectedOption();
			System.out.println("PO Owner : " + poOwner.getText());

			// WEB Order - NPM Type

			WebElement orderType = driver.findElement(By.xpath("(//select)[5]"));
			selectOptionByIndex(orderType, 1);

			WebElement materialType = driver.findElement(By.xpath("(//select)[6]"));
			selectOptionByIndex(materialType, 2);

			WebElement jiraNumber = driver.findElement(By.xpath("(//input[@id='JiraNo' and @type='text'])[1]"));
			jiraNumber.sendKeys("12345");

			WebElement quoteNumber = driver.findElement(By.xpath("(//input[@id='QuoteNo' and @type='text'])[1]"));
			quoteNumber.sendKeys("54321");

			WebElement quoteDate = driver.findElement(By.xpath("(//input [@type='date'])[1]"));
			String date = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			quoteDate.sendKeys(date);

			Select s4 = new Select(driver.findElement(By.xpath("(//select)[10]")));
			List<WebElement> options4 = s4.getOptions();
			WebElement approvalStatus = s4.getFirstSelectedOption();
			System.out.println("Approval Status : " + approvalStatus.getText());
			Thread.sleep(1000);

			// Grid Values

			WebElement costCenter = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[2]"));
			JavascriptExecutor c = (JavascriptExecutor) driver;
			c.executeScript("arguments[0].click();", costCenter);
			WebElement costCenter1 = driver
					.findElement(By.xpath("//*[@id=\"form_grid_0\"]/div[4]/div[3]/div/div/div[2]//select"));
			selectOptionByIndex(costCenter1, 0);

			WebElement expenseCategory = driver
					.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[3]"));
			JavascriptExecutor e = (JavascriptExecutor) driver;
			e.executeScript("arguments[0].click();", expenseCategory);
			WebElement expenseCategory1 = driver
					.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[3]//select"));
			selectOptionByIndex(expenseCategory1, 0);

			WebElement partNo = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[4]"));
			JavascriptExecutor p = (JavascriptExecutor) driver;
			p.executeScript("arguments[0].click();", partNo);
			WebElement partNo1 = driver
					.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[4]//input"));
			partNo1.sendKeys("A");
			WebElement autoSuggestion = driver.findElement(By.xpath("//ul//li[1][@tabindex='-1']"));
			autoSuggestion.click();

			WebElement qty = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[5]"));
			JavascriptExecutor q = (JavascriptExecutor) driver;
			q.executeScript("arguments[0].click();", qty);
			Thread.sleep(500);
			try {
				q.executeScript("arguments[0].click();", qty);
			} catch (StaleElementReferenceException e3) {
				qty = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[5]"));
				q.executeScript("arguments[0].click();", qty);
			}
			WebElement qty1 = driver
					.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[5]//input"));
			qty1.sendKeys("100");

			WebElement unitPrice = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[6]"));
			JavascriptExecutor u = (JavascriptExecutor) driver;
			u.executeScript("arguments[0].click();", unitPrice);
			Thread.sleep(500);
			try {
				u.executeScript("arguments[0].click();", unitPrice);
				Thread.sleep(500);
			} catch (StaleElementReferenceException e4) {
				unitPrice = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[6]"));
				u.executeScript("arguments[0].click();", unitPrice);
			}
			WebElement unitPrice1 = driver
					.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[6]//input"));
			unitPrice1.sendKeys("10");

			WebElement UOM = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[10]"));
			JavascriptExecutor U = (JavascriptExecutor) driver;
			U.executeScript("arguments[0].click();", UOM);
			Thread.sleep(500);
			try {
				U.executeScript("arguments[0].click();", UOM);
			} catch (StaleElementReferenceException e5) {
				UOM = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[10]"));
				U.executeScript("arguments[0].click();", UOM);
			}
			WebElement UOM1 = driver
					.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[10]//select"));
			selectOptionByIndex(UOM1, 0);

			WebElement deliveryDate = driver
					.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[11]"));
			JavascriptExecutor d = (JavascriptExecutor) driver;
			d.executeScript("arguments[0].click();", deliveryDate);
			Thread.sleep(500);
			try {
				d.executeScript("arguments[0].click();", deliveryDate);
			} catch (StaleElementReferenceException e5) {
				deliveryDate = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[11]"));
				d.executeScript("arguments[0].click();", deliveryDate);
			}
			WebElement deliverDate1 = driver
					.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[11]//input"));
			String date1 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd-MM-yyyy"));
			deliverDate1.sendKeys(date1);

			// With IQC checkbox code

			WebElement checkBox = driver
					.findElement(By.xpath("(//div[@id='form_grid_0']//div[@style='top:0px']//div)[12]"));
			JavascriptExecutor js = (JavascriptExecutor) driver;
			js.executeScript("arguments[0].click();", checkBox);
			Thread.sleep(500);
			try {
				js.executeScript("arguments[0].click();", checkBox);
			} catch (StaleElementReferenceException e5) {
				checkBox = driver.findElement(By.xpath("(//div[@id='form_grid_0']//div[@style='top:0px']//div)[12]"));
				js.executeScript("arguments[0].click();", checkBox);
			}
			WebElement checkBox1 = driver.findElement(
					By.xpath("(//div[@id='form_grid_0']//div[@style='top:0px']//div)[12]//input[@type='checkbox']"));
			JavascriptExecutor j1 = (JavascriptExecutor) driver;
			j1.executeScript("arguments[0].click();", checkBox1);
			JavascriptExecutor j2 = (JavascriptExecutor) driver;
			j2.executeScript("arguments[0].click();", checkBox1);

			/*
			 *//*
				 * Withot IQC Checkbox code // WebElement insReason = driver
				 * .findElement(By.xpath(
				 * "//*[@id=\"form_grid_0\"]/div[4]/div[3]/div/div/div[15]"));
				 * JavascriptExecutor j2 = (JavascriptExecutor) driver;
				 * j2.executeScript("arguments[0].click();", insReason); WebElement reasonText =
				 * driver.findElement( By.xpath(
				 * "//*[@id=\"form_grid_0\"]/div[4]/div[3]/div/div/div[15]//input[@type='text']"
				 * )); reasonText.sendKeys("Not Required");
				 */
		}

		catch (StaleElementReferenceException e) {
		}
	}

	@When("User create the PO Request for PO ORDER \\(RM-Import)")
	public void user_create_the_po_request_for_po_order_rm_import() throws InterruptedException {
		WebElement purchaseOrderBtn = driver.findElement(By.xpath("(//a[contains(text(),'Purchase Order')])[1]"));
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		wait.until(ExpectedConditions.visibilityOfNestedElementsLocatedBy(purchaseOrderBtn,
				By.xpath("(//a[contains(text(),'Purchase Order')])[1]")));
		purchaseOrderBtn.click();

		WebElement addBtn = driver.findElement(By.xpath("(//button[@title='Add' and @type='button'])[1]"));
		addBtn.click();
		Thread.sleep(1000);

		WebElement branch = (driver.findElement(By.xpath("(//select)[1]")));
		select(branch).selectByIndex(1);
		Thread.sleep(500);

		WebElement wareHouse = (driver.findElement(By.xpath("(//select)[2]")));
		select(wareHouse).selectByIndex(0);
		Select s = new Select(driver.findElement(By.xpath("(//select)[3]")));
		List<WebElement> options = s.getOptions();
		WebElement storeFieldText = s.getFirstSelectedOption();
		System.out.println("Store : " + storeFieldText.getText());
		Thread.sleep(1000);
		WebElement poNumberFieldText = driver.findElement(
				By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[1]"));
		System.out.println("PO Number : " + poNumberFieldText.getAttribute("value"));

		WebElement poStatusFieldText = driver.findElement(
				By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[2]"));
		System.out.println("PO Status : " + poStatusFieldText.getAttribute("value"));

		WebElement poDateFieldValue = driver.findElement(
				By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[3]"));
		System.out.println("PO Date : " + poDateFieldValue.getAttribute("value"));

		WebElement vendorField = driver.findElement(By.xpath("(//input[@type='text'])[4]"));
		vendorField.sendKeys("DIG");
		Thread.sleep(500);

		List<WebElement> vendorList = driver.findElements(By.xpath("(//ul[@role='listbox'])[1]//li"));
		for (WebElement webElement : vendorList) {
			String list = webElement.getText();
			if (list.contains("Digi-key Electronics")) {
				Thread.sleep(500);
				JavascriptExecutor k = (JavascriptExecutor) driver;
				k.executeScript("arguments[0].click();", webElement);
				System.out.println(webElement);
				break;
			}
			Thread.sleep(1000);
		}

		Select s1 = new Select(driver.findElement(By.xpath("(//select)[7]")));
		List<WebElement> options1 = s1.getOptions();
		WebElement paymentTerms = s1.getFirstSelectedOption();
		System.out.println("Payment Terms : " + paymentTerms.getText());

		Select s2 = new Select(driver.findElement(By.xpath("(//select)[8]")));
		List<WebElement> options2 = s2.getOptions();
		WebElement paymentMode = s2.getFirstSelectedOption();
		System.out.println("Payment Mode : " + paymentMode.getText());

		Select s3 = new Select(driver.findElement(By.xpath("(//select)[9]")));
		List<WebElement> options3 = s3.getOptions();
		WebElement poOwner = s3.getFirstSelectedOption();
		System.out.println("PO Owner : " + poOwner.getText());

		// PO Order - RM Type

		WebElement orderType = driver.findElement(By.xpath("(//select)[5]"));
		selectOptionByIndex(orderType, 0);

		WebElement materialType = driver.findElement(By.xpath("(//select)[6]"));
		selectOptionByIndex(materialType, 0);

		WebElement jiraNumber = driver.findElement(By.xpath("(//input[@id='JiraNo' and @type='text'])[1]"));
		jiraNumber.sendKeys("12345");

		WebElement quoteNumber = driver.findElement(By.xpath("(//input[@id='QuoteNo' and @type='text'])[1]"));
		quoteNumber.sendKeys("54321");

		WebElement quoteDate = driver.findElement(By.xpath("(//input [@type='date'])[1]"));
		String date = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
		quoteDate.sendKeys(date);

		Select s4 = new Select(driver.findElement(By.xpath("(//select)[10]")));
		List<WebElement> options4 = s4.getOptions();
		WebElement approvalStatus = s4.getFirstSelectedOption();
		System.out.println("Approval Status : " + approvalStatus.getText());
		Thread.sleep(1000);

		// Grid Values

		WebElement costCenter = driver.findElement(By.xpath("//*[@id=\"form_grid_0\"]/div[4]/div[3]/div/div/div[2]"));
		JavascriptExecutor c = (JavascriptExecutor) driver;
		c.executeScript("arguments[0].click();", costCenter);
		WebElement costCenter1 = driver
				.findElement(By.xpath("//*[@id=\"form_grid_0\"]/div[4]/div[3]/div/div/div[2]//select"));
		selectOptionByIndex(costCenter1, 0);

		WebElement expenseCategory = driver
				.findElement(By.xpath("//*[@id=\"form_grid_0\"]/div[4]/div[3]/div/div/div[3]"));
		JavascriptExecutor e = (JavascriptExecutor) driver;
		e.executeScript("arguments[0].click();", expenseCategory);
		WebElement expenseCategory1 = driver
				.findElement(By.xpath("//*[@id=\"form_grid_0\"]/div[4]/div[3]/div/div/div[3]//select"));
		selectOptionByIndex(expenseCategory1, 1);

		WebElement partNo = driver.findElement(By.xpath("//*[@id=\"form_grid_0\"]/div[4]/div[3]/div/div/div[4]"));
		JavascriptExecutor p = (JavascriptExecutor) driver;
		p.executeScript("arguments[0].click();", partNo);
		WebElement partNo1 = driver
				.findElement(By.xpath("//*[@id=\"form_grid_0\"]/div[4]/div[3]/div/div/div[4]//input"));
		partNo1.sendKeys("S");
		WebElement autoSuggestion = driver.findElement(By.xpath("//ul//li[1][@tabindex='-1']"));
		autoSuggestion.click();

		WebElement packingType = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[5]"));
		JavascriptExecutor p1 = (JavascriptExecutor) driver;
		p1.executeScript("arguments[0].click();", packingType);
		WebElement packingType1 = driver
				.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[5]//select"));
		selectOptionByIndex(packingType1, 0);

		WebElement workType = driver.findElement(By.xpath("//*[@id=\"form_grid_0\"]/div[4]/div[3]/div/div/div[6]"));
		JavascriptExecutor w = (JavascriptExecutor) driver;
		w.executeScript("arguments[0].click();", workType);
		WebElement workType1 = driver
				.findElement(By.xpath("//*[@id=\"form_grid_0\"]/div[4]/div[3]/div/div/div[6]//select"));
		selectOptionByIndex(workType1, 0);

		WebElement name = driver.findElement(By.xpath("//*[@id=\"form_grid_0\"]/div[4]/div[3]/div/div/div[7]"));
		JavascriptExecutor n = (JavascriptExecutor) driver;
		n.executeScript("arguments[0].click();", name);
		WebElement name1 = driver.findElement(By.xpath("//*[@id=\"form_grid_0\"]/div[4]/div[3]/div/div/div[7]//input"));
		name1.sendKeys("A");
		WebElement autoSuggestion1 = driver.findElement(By.xpath("//*[@class=\"ui-menu-item\"][1]"));
		autoSuggestion1.click();

		WebElement qty = driver.findElement(By.xpath("//*[@id=\"form_grid_0\"]/div[4]/div[3]/div/div/div[8]"));
		JavascriptExecutor q = (JavascriptExecutor) driver;
		q.executeScript("arguments[0].click();", qty);
		WebElement qty1 = driver.findElement(By.xpath("//*[@id=\"form_grid_0\"]/div[4]/div[3]/div/div/div[8]//input"));
		qty1.sendKeys("100");

		WebElement unitPrice = driver.findElement(By.xpath("//*[@id=\"form_grid_0\"]/div[4]/div[3]/div/div/div[9]"));
		JavascriptExecutor u = (JavascriptExecutor) driver;
		u.executeScript("arguments[0].click();", unitPrice);
		WebElement unitPrice1 = driver
				.findElement(By.xpath("//*[@id=\"form_grid_0\"]/div[4]/div[3]/div/div/div[9]//input"));
		unitPrice1.sendKeys("10");

		WebElement UOM = driver.findElement(By.xpath("//*[@id=\"form_grid_0\"]/div[4]/div[3]/div/div/div[13]"));
		JavascriptExecutor U = (JavascriptExecutor) driver;
		U.executeScript("arguments[0].click();", UOM);
		WebElement UOM1 = driver
				.findElement(By.xpath("//*[@id=\"form_grid_0\"]/div[4]/div[3]/div/div/div[13]//select"));
		selectOptionByIndex(UOM1, 0);

		WebElement deliveryDate = driver
				.findElement(By.xpath("//*[@id=\"form_grid_0\"]/div[4]/div[3]/div/div/div[14]"));
		JavascriptExecutor d = (JavascriptExecutor) driver;
		d.executeScript("arguments[0].click();", deliveryDate);
		WebElement deliverDate1 = driver
				.findElement(By.xpath("//*[@id=\"form_grid_0\"]/div[4]/div[3]/div/div/div[14]//input"));
		String date1 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd-MM-yyyy"));
		deliverDate1.sendKeys(date1);

		// With IQC checkbox code

		WebElement checkBox = driver
				.findElement(By.xpath("(//div[@id='form_grid_0']//div[@style='top:0px']//div)[15]"));
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", checkBox);
		WebElement checkBox1 = driver.findElement(
				By.xpath("(//div[@id='form_grid_0']//div[@style='top:0px']//div)[15]//input[@type='checkbox']"));
		JavascriptExecutor j1 = (JavascriptExecutor) driver;
		j1.executeScript("arguments[0].click();", checkBox1);
		JavascriptExecutor j2 = (JavascriptExecutor) driver;
		j2.executeScript("arguments[0].click();", checkBox1);

		/*
		 *//*
			 * Withot IQC Checkbox code // WebElement insReason = driver
			 * .findElement(By.xpath(
			 * "//*[@id=\"form_grid_0\"]/div[4]/div[3]/div/div/div[15]"));
			 * JavascriptExecutor j2 = (JavascriptExecutor) driver;
			 * j2.executeScript("arguments[0].click();", insReason); WebElement reasonText =
			 * driver.findElement( By.xpath(
			 * "//*[@id=\"form_grid_0\"]/div[4]/div[3]/div/div/div[15]//input[@type='text']"
			 * )); reasonText.sendKeys("Not Required");
			 */
	}

	@When("User create the PO Request for Testing & Services \\(Import)")
	public void user_create_the_po_request_for_testing_services_import() throws InterruptedException {
		WebElement purchaseOrderBtn = driver.findElement(By.xpath("(//a[contains(text(),'Purchase Order')])[1]"));
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		wait.until(ExpectedConditions.visibilityOfNestedElementsLocatedBy(purchaseOrderBtn,
				By.xpath("(//a[contains(text(),'Purchase Order')])[1]")));
		purchaseOrderBtn.click();

		WebElement addBtn = driver.findElement(By.xpath("(//button[@title='Add' and @type='button'])[1]"));
		addBtn.click();
		Thread.sleep(1000);

		WebElement branch = (driver.findElement(By.xpath("(//select)[1]")));
		select(branch).selectByIndex(1);
		Thread.sleep(500);

		WebElement wareHouse = (driver.findElement(By.xpath("(//select)[2]")));
		select(wareHouse).selectByIndex(0);
		Select s = new Select(driver.findElement(By.xpath("(//select)[3]")));
		List<WebElement> options = s.getOptions();
		WebElement storeFieldText = s.getFirstSelectedOption();
		System.out.println("Store : " + storeFieldText.getText());
		Thread.sleep(1000);
		WebElement poNumberFieldText = driver.findElement(
				By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[1]"));
		System.out.println("PO Number : " + poNumberFieldText.getAttribute("value"));

		WebElement poStatusFieldText = driver.findElement(
				By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[2]"));
		System.out.println("PO Status : " + poStatusFieldText.getAttribute("value"));

		WebElement poDateFieldValue = driver.findElement(
				By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[3]"));
		System.out.println("PO Date : " + poDateFieldValue.getAttribute("value"));

		WebElement vendorField = driver.findElement(By.xpath("(//input[@type='text'])[4]"));
		vendorField.sendKeys("DIG");
		Thread.sleep(500);

		List<WebElement> vendorList = driver.findElements(By.xpath("(//ul[@role='listbox'])[1]//li"));
		for (WebElement webElement : vendorList) {
			String list = webElement.getText();
			if (list.contains("Digi-key Electronics")) {
				Thread.sleep(500);
				JavascriptExecutor k = (JavascriptExecutor) driver;
				k.executeScript("arguments[0].click();", webElement);
				System.out.println(webElement);
				break;
			}
			Thread.sleep(1000);
		}

		// Testing & Services

		WebElement orderType = driver.findElement(By.xpath("(//select)[5]"));
		selectOptionByIndex(orderType, 2);

		Select s1 = new Select(driver.findElement(By.xpath("(//select)[6]")));
		List<WebElement> options1 = s1.getOptions();
		WebElement paymentTerms = s1.getFirstSelectedOption();
		System.out.println("Payment Terms : " + paymentTerms.getText());

		Select s2 = new Select(driver.findElement(By.xpath("(//select)[7]")));
		List<WebElement> options2 = s2.getOptions();
		WebElement paymentMode = s2.getFirstSelectedOption();
		System.out.println("Payment Mode : " + paymentMode.getText());

		Select s3 = new Select(driver.findElement(By.xpath("(//select)[8]")));
		List<WebElement> options3 = s3.getOptions();
		WebElement poOwner = s3.getFirstSelectedOption();
		System.out.println("PO Owner : " + poOwner.getText());

		WebElement jiraNumber = driver.findElement(By.xpath("(//input[@id='JiraNo' and @type='text'])[1]"));
		jiraNumber.sendKeys("12345");

		WebElement quoteNumber = driver.findElement(By.xpath("(//input[@id='QuoteNo' and @type='text'])[1]"));
		quoteNumber.sendKeys("54321");

		WebElement quoteDate = driver.findElement(By.xpath("(//input [@type='date'])[1]"));
		String date = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
		quoteDate.sendKeys(date);

		Select s4 = new Select(driver.findElement(By.xpath("(//select)[9]")));
		List<WebElement> options4 = s4.getOptions();
		WebElement approvalStatus = s4.getFirstSelectedOption();
		System.out.println("Approval Status : " + approvalStatus.getText());
		Thread.sleep(1000);

		// Grid Values

		WebElement costCenter = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[2]"));
		JavascriptExecutor c = (JavascriptExecutor) driver;
		c.executeScript("arguments[0].click();", costCenter);
		WebElement costCenter1 = driver
				.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[2]//select"));
		selectOptionByIndex(costCenter1, 0);

		WebElement expenseCategory = driver
				.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[3]"));
		JavascriptExecutor e = (JavascriptExecutor) driver;
		e.executeScript("arguments[0].click();", expenseCategory);
		WebElement expenseCategory1 = driver
				.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[3]//select"));
		selectOptionByIndex(expenseCategory1, 1);

		WebElement workType = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[4]"));
		JavascriptExecutor w = (JavascriptExecutor) driver;
		w.executeScript("arguments[0].click();", workType);
		WebElement workType1 = driver
				.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[4]//select"));
		selectOptionByIndex(workType1, 0);

		WebElement name = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[5]"));
		JavascriptExecutor n = (JavascriptExecutor) driver;
		n.executeScript("arguments[0].click();", name);
		WebElement name1 = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[5]//input"));
		name1.sendKeys("A");
		WebElement autoSuggestion = driver.findElement(By.xpath("//*[@class='ui-menu-item'][1]"));
		autoSuggestion.click();

		WebElement serviceDesc = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[6]"));
		n.executeScript("arguments[0].click();", serviceDesc);
		WebElement serviceDesc1 = driver
				.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[6]//input"));
		serviceDesc1.sendKeys("Testing and Services");

		WebElement qty = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[7]"));
		JavascriptExecutor q = (JavascriptExecutor) driver;
		q.executeScript("arguments[0].click();", qty);
		WebElement qty1 = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[7]//input"));
		qty1.sendKeys("100");

		WebElement unitPrice = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[8]"));
		JavascriptExecutor u = (JavascriptExecutor) driver;
		u.executeScript("arguments[0].click();", unitPrice);
		WebElement unitPrice1 = driver
				.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[8]//input"));
		unitPrice1.sendKeys("10");

		WebElement UOM = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[10]"));
		JavascriptExecutor U = (JavascriptExecutor) driver;
		U.executeScript("arguments[0].click();", UOM);
		WebElement UOM1 = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[10]//select"));
		selectOptionByIndex(UOM1, 0);

		WebElement deliveryDate = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[11]"));
		JavascriptExecutor d = (JavascriptExecutor) driver;
		d.executeScript("arguments[0].click();", deliveryDate);
		WebElement deliverDate1 = driver
				.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[11]//input"));
		String date1 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd-MM-yyyy"));
		deliverDate1.sendKeys(date1);

		// With IQC checkbox code

		WebElement checkBox = driver
				.findElement(By.xpath("(//div[@id='form_grid_0']//div[@style='top:0px']//div)[12]"));
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", checkBox);
		WebElement checkBox1 = driver.findElement(
				By.xpath("(//div[@id='form_grid_0']//div[@style='top:0px']//div)[12]//input[@type='checkbox']"));
		JavascriptExecutor j1 = (JavascriptExecutor) driver;
		j1.executeScript("arguments[0].click();", checkBox1);
		JavascriptExecutor j2 = (JavascriptExecutor) driver;
		j2.executeScript("arguments[0].click();", checkBox1);
	}

	@When("User create the PO Request for PO ORDER \\(FG-Import)")
	public void user_create_the_po_request_for_po_order_fg_import() throws InterruptedException {
		try {
			JavascriptExecutor j = (JavascriptExecutor) driver;
			WebElement purchaseOrderBtn = driver.findElement(By.xpath("(//a[contains(text(),'Purchase Order')])[1]"));
			WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
			wait.until(ExpectedConditions.visibilityOfNestedElementsLocatedBy(purchaseOrderBtn,
					By.xpath("(//a[contains(text(),'Purchase Order')])[1]")));
			purchaseOrderBtn.click();

			WebElement addBtn = driver.findElement(By.xpath("(//button[@title='Add' and @type='button'])[1]"));
			addBtn.click();
			Thread.sleep(1000);

			WebElement branch = (driver.findElement(By.xpath("(//select)[1]")));
			select(branch).selectByIndex(1);
			Thread.sleep(500);

			WebElement wareHouse = (driver.findElement(By.xpath("(//select)[2]")));
			select(wareHouse).selectByIndex(0);
			Select s = new Select(driver.findElement(By.xpath("(//select)[3]")));
			List<WebElement> options = s.getOptions();
			WebElement storeFieldText = s.getFirstSelectedOption();
			System.out.println("Store : " + storeFieldText.getText());
			Thread.sleep(1000);
			WebElement poNumberFieldText = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[1]"));
			System.out.println("PO Number : " + poNumberFieldText.getAttribute("value"));

			WebElement poStatusFieldText = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[2]"));
			System.out.println("PO Status : " + poStatusFieldText.getAttribute("value"));

			WebElement poDateFieldValue = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[3]"));
			System.out.println("PO Date : " + poDateFieldValue.getAttribute("value"));

			WebElement vendorField = driver.findElement(By.xpath("(//input[@type='text'])[4]"));
			vendorField.sendKeys("DIG");
			Thread.sleep(500);

			List<WebElement> vendorList = driver.findElements(By.xpath("(//ul[@role='listbox'])[1]//li"));
			for (WebElement webElement : vendorList) {
				String list = webElement.getText();
				if (list.contains("Digi-key Electronics")) {
					Thread.sleep(500);
					JavascriptExecutor k = (JavascriptExecutor) driver;
					k.executeScript("arguments[0].click();", webElement);
					System.out.println(webElement);
					break;
				}
				Thread.sleep(1000);
			}

			Select s1 = new Select(driver.findElement(By.xpath("(//select)[7]")));
			List<WebElement> options1 = s1.getOptions();
			WebElement paymentTerms = s1.getFirstSelectedOption();
			System.out.println("Payment Terms : " + paymentTerms.getText());

			Select s2 = new Select(driver.findElement(By.xpath("(//select)[8]")));
			List<WebElement> options2 = s2.getOptions();
			WebElement paymentMode = s2.getFirstSelectedOption();
			System.out.println("Payment Mode : " + paymentMode.getText());

			Select s3 = new Select(driver.findElement(By.xpath("(//select)[9]")));
			List<WebElement> options3 = s3.getOptions();
			WebElement poOwner = s3.getFirstSelectedOption();
			System.out.println("PO Owner : " + poOwner.getText());

			// PO Order - FG Type

			WebElement orderType = driver.findElement(By.xpath("(//select)[5]"));
			selectOptionByIndex(orderType, 0);

			WebElement materialType = driver.findElement(By.xpath("(//select)[6]"));
			selectOptionByIndex(materialType, 1);

			WebElement jiraNumber = driver.findElement(By.xpath("(//input[@id='JiraNo' and @type='text'])[1]"));
			jiraNumber.sendKeys("12345");

			WebElement quoteNumber = driver.findElement(By.xpath("(//input[@id='QuoteNo' and @type='text'])[1]"));
			quoteNumber.sendKeys("54321");

			WebElement quoteDate = driver.findElement(By.xpath("(//input [@type='date'])[1]"));
			String date = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			quoteDate.sendKeys(date);

			Select s4 = new Select(driver.findElement(By.xpath("(//select)[10]")));
			List<WebElement> options4 = s4.getOptions();
			WebElement approvalStatus = s4.getFirstSelectedOption();
			System.out.println("Approval Status : " + approvalStatus.getText());
			Thread.sleep(1000);

			// Grid Values

			WebElement costCenter = driver
					.findElement(By.xpath(".//div[contains (@class, 'slick-cell l1 r1')]"));
			j.executeScript("arguments[0].click();", costCenter);
			WebElement costCenter1 = driver
					.findElement(By.xpath(".//div[contains (@class, 'slick-cell l1 r1')]//select"));
			selectOptionByIndex(costCenter1, 0);

			WebElement expenseCategory = driver
					.findElement(By.xpath(".//div[contains (@class, 'slick-cell l2 r2')]"));
			j.executeScript("arguments[0].click();", expenseCategory);
			WebElement expenseCategory1 = driver
					.findElement(By.xpath(".//div[contains (@class, 'slick-cell l2 r2')]//select"));
			selectOptionByIndex(expenseCategory1, 0);

			WebElement partNo = driver.findElement(By.xpath(".//div[contains (@class, 'slick-cell l3 r3')]"));
			j.executeScript("arguments[0].click();", partNo);
			WebElement partNo1 = driver
					.findElement(By.xpath(".//div[contains (@class, 'slick-cell l3 r3')]//input"));
			partNo1.sendKeys("S");
			WebElement autoSuggestion = driver.findElement(By.xpath("//ul//li[1][@tabindex='-1']"));
			autoSuggestion.click();
			
			WebElement orig_Mater_Type = driver
					.findElement(By.xpath(".//div[contains (@class, 'slick-cell l4 r4')]"));
			j.executeScript("arguments[0].click();", orig_Mater_Type);
			Thread.sleep(500);
			try {
				j.executeScript("arguments[0].click();", orig_Mater_Type);
			} catch (Exception e2) {
				orig_Mater_Type = driver
						.findElement(By.xpath(".//div[contains (@class, 'slick-cell l4 r4')]"));
				j.executeScript("arguments[0].click();", orig_Mater_Type);
			}
			WebElement orig_Mater_Type1 = driver
					.findElement(By.xpath(".//div[contains (@class, 'slick-cell l4 r4')]//select"));
			selectOptionByIndex(orig_Mater_Type1, 0);

			WebElement workType = driver.findElement(By.xpath(".//div[contains (@class, 'slick-cell l5 r5')]"));
			j.executeScript("arguments[0].click();", workType);
			try {
				j.executeScript("arguments[0].click();", workType);
			} catch (StaleElementReferenceException e2) {
				workType = driver.findElement(By.xpath(".//div[contains (@class, 'slick-cell l5 r5')]"));
				j.executeScript("arguments[0].click();", workType);
			}
			WebElement workType1 = driver
					.findElement(By.xpath(".//div[contains (@class, 'slick-cell l5 r5')]//select"));
			selectOptionByIndex(workType1, 0);

			WebElement name = driver.findElement(By.xpath(".//div[contains (@class, 'slick-cell l6 r6')]"));
			j.executeScript("arguments[0].click();", name);
			Thread.sleep(500);
			try {
				j.executeScript("arguments[0].click();", name);
			} catch (StaleElementReferenceException e3) {
				name = driver.findElement(By.xpath(".//div[contains (@class, 'slick-cell l6 r6')]"));
				j.executeScript("arguments[0].click();", name);
			}
			WebElement name1 = driver
					.findElement(By.xpath(".//div[contains (@class, 'slick-cell l6 r6')]//input"));
			name1.sendKeys("A");
			WebElement autoSuggestion1 = driver.findElement(By.xpath("//*[@class=\"ui-menu-item\"][1]"));
			autoSuggestion1.click();

			WebElement qty = driver.findElement(By.xpath(".//div[contains (@class, 'slick-cell l7 r7')]"));
			j.executeScript("arguments[0].click();", qty);
			Thread.sleep(500);
			try {
				j.executeScript("arguments[0].click();", qty);
			} catch (StaleElementReferenceException e4) {
				qty = driver.findElement(By.xpath(".//div[contains (@class, 'slick-cell l7 r7')]"));
				j.executeScript("arguments[0].click();", qty);
			}
			WebElement qty1 = driver
					.findElement(By.xpath(".//div[contains (@class, 'slick-cell l7 r7')]//input"));
			qty1.sendKeys("100");

			WebElement unitPrice = driver
					.findElement(By.xpath(".//div[contains (@class, 'slick-cell l8 r8')]"));
			j.executeScript("arguments[0].click();", unitPrice);
			Thread.sleep(500);
			try {
				j.executeScript("arguments[0].click();", unitPrice);
			} catch (StaleElementReferenceException e5) {
				unitPrice = driver.findElement(By.xpath(".//div[contains (@class, 'slick-cell l8 r8')]"));
				j.executeScript("arguments[0].click();", unitPrice);
			}
			WebElement unitPrice1 = driver
					.findElement(By.xpath(".//div[contains (@class, 'slick-cell l8 r8')]//input"));
			unitPrice1.sendKeys("10");

			WebElement UOM = driver.findElement(By.xpath(".//div[contains (@class, 'slick-cell l12 r12')]"));
			j.executeScript("arguments[0].click();", UOM);
			Thread.sleep(500);
			try {
				j.executeScript("arguments[0].click();", UOM);
			} catch (StaleElementReferenceException e6) {
				UOM = driver.findElement(By.xpath(".//div[contains (@class, 'slick-cell l12 r12')]"));
				j.executeScript("arguments[0].click();", UOM);
			}
			WebElement UOM1 = driver
					.findElement(By.xpath(".//div[contains (@class, 'slick-cell l12 r12')]//select"));
			selectOptionByIndex(UOM1, 0);

			WebElement deliveryDate = driver
					.findElement(By.xpath(".//div[contains (@class, 'slick-cell l13 r13')]"));
			j.executeScript("arguments[0].click();", deliveryDate);
			Thread.sleep(500);
			try {
				j.executeScript("arguments[0].click();", deliveryDate);
			} catch (StaleElementReferenceException e7) {
				deliveryDate = driver.findElement(By.xpath(".//div[contains (@class, 'slick-cell l13 r13')]"));
				j.executeScript("arguments[0].click();", deliveryDate);
			}
			WebElement deliverDate1 = driver
					.findElement(By.xpath(".//div[contains (@class, 'slick-cell l13 r13')]//input"));
			String date1 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd-MM-yyyy"));
			deliverDate1.sendKeys(date1);

			// With IQC checkbox code

			WebElement checkBox = driver
					.findElement(By.xpath(".//div[contains (@class, 'slick-cell l14 r14')]"));
			j.executeScript("arguments[0].click();", checkBox);
			Thread.sleep(500);
			try {
				j.executeScript("arguments[0].click();", checkBox);
			} catch (StaleElementReferenceException e7) {
				checkBox = driver.findElement(By.xpath(".//div[contains (@class, 'slick-cell l14 r14')]"));
				j.executeScript("arguments[0].click();", checkBox);
			}
			WebElement checkBox1 = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l14 r14')]//input[@type='checkbox']"));
			j.executeScript("arguments[0].click();", checkBox1);
			j.executeScript("arguments[0].click();", checkBox1);

			/* Withot IQC Checkbox code */

			/*
			 * /WebElement insReason = driver .findElement(By.xpath(
			 * "//*[@id=\"form_grid_0\"]/div[4]/div[3]/div/div/div[15]"));
			 * JavascriptExecutor j2 = (JavascriptExecutor) driver;
			 * j2.executeScript("arguments[0].click();", insReason); Thread.sleep(500); try
			 * { j2.executeScript("arguments[0].click();", insReason); } catch
			 * (StaleElementReferenceException e7) { insReason = driver
			 * .findElement(By.xpath(
			 * "//*[@id=\"form_grid_0\"]/div[4]/div[3]/div/div/div[15]"));
			 * j2.executeScript("arguments[0].click();", insReason); } WebElement reasonText
			 * = driver.findElement( By.xpath(
			 * "//*[@id=\"form_grid_0\"]/div[4]/div[3]/div/div/div[15]//input[@type='text']"
			 * )); reasonText.sendKeys("Not Required");
			 * 
			 * WebElement dummyClick = driver.findElement(By.xpath(
			 * "//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[14]")); dummyClick.click();
			 * /
			 */

		} catch (StaleElementReferenceException e) {
		}
	}

	@When("User create the PO Request for PO ORDER \\(NPM-Import)")
	public void user_create_the_po_request_for_po_order_npm_import() throws InterruptedException {
		try {
			WebElement purchaseOrderBtn = driver.findElement(By.xpath("(//a[contains(text(),'Purchase Order')])[1]"));
			WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
			wait.until(ExpectedConditions.visibilityOfNestedElementsLocatedBy(purchaseOrderBtn,
					By.xpath("(//a[contains(text(),'Purchase Order')])[1]")));
			purchaseOrderBtn.click();

			WebElement addBtn = driver.findElement(By.xpath("(//button[@title='Add' and @type='button'])[1]"));
			addBtn.click();
			Thread.sleep(1000);

			WebElement branch = (driver.findElement(By.xpath("(//select)[1]")));
			select(branch).selectByIndex(1);
			Thread.sleep(500);

			WebElement wareHouse = (driver.findElement(By.xpath("(//select)[2]")));
			select(wareHouse).selectByIndex(0);
			Select s = new Select(driver.findElement(By.xpath("(//select)[3]")));
			List<WebElement> options = s.getOptions();
			WebElement storeFieldText = s.getFirstSelectedOption();
			System.out.println("Store : " + storeFieldText.getText());
			Thread.sleep(1000);
			WebElement poNumberFieldText = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[1]"));
			System.out.println("PO Number : " + poNumberFieldText.getAttribute("value"));

			WebElement poStatusFieldText = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[2]"));
			System.out.println("PO Status : " + poStatusFieldText.getAttribute("value"));

			WebElement poDateFieldValue = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[3]"));
			System.out.println("PO Date : " + poDateFieldValue.getAttribute("value"));

			WebElement vendorField = driver.findElement(By.xpath("(//input[@type='text'])[4]"));
			vendorField.sendKeys("DIG");
			Thread.sleep(500);

			List<WebElement> vendorList = driver.findElements(By.xpath("(//ul[@role='listbox'])[1]//li"));
			for (WebElement webElement : vendorList) {
				String list = webElement.getText();
				if (list.contains("Digi-key Electronics")) {
					Thread.sleep(500);
					JavascriptExecutor k = (JavascriptExecutor) driver;
					k.executeScript("arguments[0].click();", webElement);
					System.out.println(webElement);
					break;
				}
				Thread.sleep(1000);
			}

			Select s1 = new Select(driver.findElement(By.xpath("(//select)[7]")));
			List<WebElement> options1 = s1.getOptions();
			WebElement paymentTerms = s1.getFirstSelectedOption();
			System.out.println("Payment Terms : " + paymentTerms.getText());

			Select s2 = new Select(driver.findElement(By.xpath("(//select)[8]")));
			List<WebElement> options2 = s2.getOptions();
			WebElement paymentMode = s2.getFirstSelectedOption();
			System.out.println("Payment Mode : " + paymentMode.getText());

			Select s3 = new Select(driver.findElement(By.xpath("(//select)[9]")));
			List<WebElement> options3 = s3.getOptions();
			WebElement poOwner = s3.getFirstSelectedOption();
			System.out.println("PO Owner : " + poOwner.getText());

			// PO Order - NPM Type

			WebElement orderType = driver.findElement(By.xpath("(//select)[5]"));
			selectOptionByIndex(orderType, 0);

			WebElement materialType = driver.findElement(By.xpath("(//select)[6]"));
			selectOptionByIndex(materialType, 2);

			WebElement jiraNumber = driver.findElement(By.xpath("(//input[@id='JiraNo' and @type='text'])[1]"));
			jiraNumber.sendKeys("12345");

			WebElement quoteNumber = driver.findElement(By.xpath("(//input[@id='QuoteNo' and @type='text'])[1]"));
			quoteNumber.sendKeys("54321");

			WebElement quoteDate = driver.findElement(By.xpath("(//input [@type='date'])[1]"));
			String date = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			quoteDate.sendKeys(date);

			Select s4 = new Select(driver.findElement(By.xpath("(//select)[10]")));
			List<WebElement> options4 = s4.getOptions();
			WebElement approvalStatus = s4.getFirstSelectedOption();
			System.out.println("Approval Status : " + approvalStatus.getText());
			Thread.sleep(1000);

			// Grid Values

			WebElement costCenter = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[2]"));
			JavascriptExecutor c = (JavascriptExecutor) driver;
			c.executeScript("arguments[0].click();", costCenter);
			WebElement costCenter1 = driver
					.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[2]//select"));
			selectOptionByIndex(costCenter1, 0);

			WebElement expenseCategory = driver
					.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[3]"));
			JavascriptExecutor e = (JavascriptExecutor) driver;
			e.executeScript("arguments[0].click();", expenseCategory);
			WebElement expenseCategory1 = driver
					.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[3]//select"));
			selectOptionByIndex(expenseCategory1, 0);

			WebElement partNo = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[4]"));
			JavascriptExecutor p = (JavascriptExecutor) driver;
			p.executeScript("arguments[0].click();", partNo);
			WebElement partNo1 = driver
					.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[4]//input"));
			partNo1.sendKeys("S");
			WebElement autoSuggestion = driver.findElement(By.xpath("//ul//li[1][@tabindex='-1']"));
			autoSuggestion.click();

			WebElement qty = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[5]"));
			JavascriptExecutor q = (JavascriptExecutor) driver;
			q.executeScript("arguments[0].click();", qty);
			Thread.sleep(500);
			try {
				q.executeScript("arguments[0].click();", qty);
			} catch (StaleElementReferenceException e4) {
				qty = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[5]"));
				q.executeScript("arguments[0].click();", qty);
			}
			WebElement qty1 = driver
					.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[5]//input"));
			qty1.sendKeys("100");

			WebElement unitPrice = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[6]"));
			JavascriptExecutor u = (JavascriptExecutor) driver;
			u.executeScript("arguments[0].click();", unitPrice);
			Thread.sleep(500);
			try {
				u.executeScript("arguments[0].click();", unitPrice);
			} catch (StaleElementReferenceException e5) {
				unitPrice = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[6]"));
				u.executeScript("arguments[0].click();", unitPrice);
			}
			WebElement unitPrice1 = driver
					.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[6]//input"));
			unitPrice1.sendKeys("10");

			WebElement UOM = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[10]"));
			JavascriptExecutor U = (JavascriptExecutor) driver;
			U.executeScript("arguments[0].click();", UOM);
			Thread.sleep(500);
			try {
				U.executeScript("arguments[0].click();", UOM);
			} catch (StaleElementReferenceException e6) {
				UOM = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[10]"));
				U.executeScript("arguments[0].click();", UOM);
			}
			WebElement UOM1 = driver
					.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[10]//select"));
			selectOptionByIndex(UOM1, 0);

			WebElement deliveryDate = driver
					.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[11]"));
			JavascriptExecutor d = (JavascriptExecutor) driver;
			d.executeScript("arguments[0].click();", deliveryDate);
			Thread.sleep(500);
			try {
				d.executeScript("arguments[0].click();", deliveryDate);
			} catch (StaleElementReferenceException e7) {
				deliveryDate = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[11]"));
				d.executeScript("arguments[0].click();", deliveryDate);
			}
			WebElement deliverDate1 = driver
					.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[11]//input"));
			String date1 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd-MM-yyyy"));
			deliverDate1.sendKeys(date1);

			// With IQC checkbox code

			WebElement checkBox = driver
					.findElement(By.xpath("(//div[@id='form_grid_0']//div[@style='top:0px']//div)[12]"));
			JavascriptExecutor js = (JavascriptExecutor) driver;
			js.executeScript("arguments[0].click();", checkBox);
			Thread.sleep(500);
			try {
				js.executeScript("arguments[0].click();", checkBox);
			} catch (StaleElementReferenceException e7) {
				checkBox = driver.findElement(By.xpath("(//div[@id='form_grid_0']//div[@style='top:0px']//div)[12]"));
				js.executeScript("arguments[0].click();", checkBox);
			}
			WebElement checkBox1 = driver.findElement(
					By.xpath("(//div[@id='form_grid_0']//div[@style='top:0px']//div)[12]//input[@type='checkbox']"));
			JavascriptExecutor j1 = (JavascriptExecutor) driver;
			j1.executeScript("arguments[0].click();", checkBox1);
			JavascriptExecutor j2 = (JavascriptExecutor) driver;
			j2.executeScript("arguments[0].click();", checkBox1);

			/*
			 *//*
				 * Withot IQC Checkbox code // WebElement insReason = driver
				 * .findElement(By.xpath(
				 * "//*[@id=\"form_grid_0\"]/div[4]/div[3]/div/div/div[15]"));
				 * JavascriptExecutor j2 = (JavascriptExecutor) driver;
				 * j2.executeScript("arguments[0].click();", insReason); WebElement reasonText =
				 * driver.findElement( By.xpath(
				 * "//*[@id=\"form_grid_0\"]/div[4]/div[3]/div/div/div[15]//input[@type='text']"
				 * )); reasonText.sendKeys("Not Required");
				 */
		} catch (StaleElementReferenceException e) {
		}
	}

	@When("User create the PO Request for WEB ORDER \\(NPM-Import)")
	public void user_create_the_po_request_for_web_order_npm_import() throws InterruptedException {
		try {
			WebElement purchaseOrderBtn = driver.findElement(By.xpath("(//a[contains(text(),'Purchase Order')])[1]"));
			WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
			wait.until(ExpectedConditions.visibilityOfNestedElementsLocatedBy(purchaseOrderBtn,
					By.xpath("(//a[contains(text(),'Purchase Order')])[1]")));
			purchaseOrderBtn.click();

			WebElement addBtn = driver.findElement(By.xpath("(//button[@title='Add' and @type='button'])[1]"));
			addBtn.click();
			Thread.sleep(1000);

			WebElement branch = (driver.findElement(By.xpath("(//select)[1]")));
			select(branch).selectByIndex(1);
			Thread.sleep(500);

			WebElement wareHouse = (driver.findElement(By.xpath("(//select)[2]")));
			select(wareHouse).selectByIndex(0);
			Select s = new Select(driver.findElement(By.xpath("(//select)[3]")));
			List<WebElement> options = s.getOptions();
			WebElement storeFieldText = s.getFirstSelectedOption();
			System.out.println("Store : " + storeFieldText.getText());
			Thread.sleep(1000);
			WebElement poNumberFieldText = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[1]"));
			System.out.println("PO Number : " + poNumberFieldText.getAttribute("value"));

			WebElement poStatusFieldText = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[2]"));
			System.out.println("PO Status : " + poStatusFieldText.getAttribute("value"));

			WebElement poDateFieldValue = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[3]"));
			System.out.println("PO Date : " + poDateFieldValue.getAttribute("value"));

			WebElement vendorField = driver.findElement(By.xpath("(//input[@type='text'])[4]"));
			vendorField.sendKeys("DIG");
			Thread.sleep(500);

			List<WebElement> vendorList = driver.findElements(By.xpath("(//ul[@role='listbox'])[1]//li"));
			for (WebElement webElement : vendorList) {
				String list = webElement.getText();
				if (list.contains("Digi-key Electronics")) {
					Thread.sleep(500);
					JavascriptExecutor k = (JavascriptExecutor) driver;
					k.executeScript("arguments[0].click();", webElement);
					System.out.println(webElement);
					break;
				}
				Thread.sleep(1000);
			}

			Select s1 = new Select(driver.findElement(By.xpath("(//select)[7]")));
			List<WebElement> options1 = s1.getOptions();
			WebElement paymentTerms = s1.getFirstSelectedOption();
			System.out.println("Payment Terms : " + paymentTerms.getText());

			Select s2 = new Select(driver.findElement(By.xpath("(//select)[8]")));
			List<WebElement> options2 = s2.getOptions();
			WebElement paymentMode = s2.getFirstSelectedOption();
			System.out.println("Payment Mode : " + paymentMode.getText());

			Select s3 = new Select(driver.findElement(By.xpath("(//select)[9]")));
			List<WebElement> options3 = s3.getOptions();
			WebElement poOwner = s3.getFirstSelectedOption();
			System.out.println("PO Owner : " + poOwner.getText());

			// WEB Order - NPM Type

			WebElement orderType = driver.findElement(By.xpath("(//select)[5]"));
			selectOptionByIndex(orderType, 1);

			WebElement materialType = driver.findElement(By.xpath("(//select)[6]"));
			selectOptionByIndex(materialType, 2);

			WebElement jiraNumber = driver.findElement(By.xpath("(//input[@id='JiraNo' and @type='text'])[1]"));
			jiraNumber.sendKeys("12345");

			WebElement quoteNumber = driver.findElement(By.xpath("(//input[@id='QuoteNo' and @type='text'])[1]"));
			quoteNumber.sendKeys("54321");

			WebElement quoteDate = driver.findElement(By.xpath("(//input [@type='date'])[1]"));
			String date = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			quoteDate.sendKeys(date);

			Select s4 = new Select(driver.findElement(By.xpath("(//select)[10]")));
			List<WebElement> options4 = s4.getOptions();
			WebElement approvalStatus = s4.getFirstSelectedOption();
			System.out.println("Approval Status : " + approvalStatus.getText());
			Thread.sleep(1000);

			// Grid Values

			WebElement costCenter = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[2]"));
			JavascriptExecutor c = (JavascriptExecutor) driver;
			c.executeScript("arguments[0].click();", costCenter);
			WebElement costCenter1 = driver
					.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[2]//select"));
			selectOptionByIndex(costCenter1, 0);

			WebElement expenseCategory = driver
					.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[3]"));
			JavascriptExecutor e = (JavascriptExecutor) driver;
			e.executeScript("arguments[0].click();", expenseCategory);
			WebElement expenseCategory1 = driver
					.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[3]//select"));
			selectOptionByIndex(expenseCategory1, 0);

			WebElement partNo = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[4]"));
			JavascriptExecutor p = (JavascriptExecutor) driver;
			p.executeScript("arguments[0].click();", partNo);
			WebElement partNo1 = driver
					.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[4]//input"));
			partNo1.sendKeys("S");
			WebElement autoSuggestion = driver.findElement(By.xpath("//ul//li[1][@tabindex='-1']"));
			autoSuggestion.click();

			WebElement qty = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[5]"));
			JavascriptExecutor q = (JavascriptExecutor) driver;
			q.executeScript("arguments[0].click();", qty);
			Thread.sleep(500);
			try {
				q.executeScript("arguments[0].click();", qty);
			} catch (StaleElementReferenceException e4) {
				qty = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[5]"));
				q.executeScript("arguments[0].click();", qty);
			}
			WebElement qty1 = driver
					.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[5]//input"));
			qty1.sendKeys("100");

			WebElement unitPrice = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[6]"));
			JavascriptExecutor u = (JavascriptExecutor) driver;
			u.executeScript("arguments[0].click();", unitPrice);
			Thread.sleep(500);
			try {
				u.executeScript("arguments[0].click();", unitPrice);
			} catch (StaleElementReferenceException e5) {
				unitPrice = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[6]"));
				u.executeScript("arguments[0].click();", unitPrice);
			}
			WebElement unitPrice1 = driver
					.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[6]//input"));
			unitPrice1.sendKeys("10");

			WebElement UOM = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[10]"));
			JavascriptExecutor U = (JavascriptExecutor) driver;
			U.executeScript("arguments[0].click();", UOM);
			Thread.sleep(500);
			try {
				U.executeScript("arguments[0].click();", UOM);
			} catch (StaleElementReferenceException e6) {
				UOM = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[10]"));
				U.executeScript("arguments[0].click();", UOM);
			}
			WebElement UOM1 = driver
					.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[10]//select"));
			selectOptionByIndex(UOM1, 0);

			WebElement deliveryDate = driver
					.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[11]"));
			JavascriptExecutor d = (JavascriptExecutor) driver;
			d.executeScript("arguments[0].click();", deliveryDate);
			Thread.sleep(500);
			try {
				d.executeScript("arguments[0].click();", deliveryDate);
			} catch (StaleElementReferenceException e7) {
				deliveryDate = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[11]"));
				d.executeScript("arguments[0].click();", deliveryDate);
			}
			WebElement deliverDate1 = driver
					.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[11]//input"));
			String date1 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd-MM-yyyy"));
			deliverDate1.sendKeys(date1);

			// With IQC checkbox code

			WebElement checkBox = driver
					.findElement(By.xpath("(//div[@id='form_grid_0']//div[@style='top:0px']//div)[12]"));
			JavascriptExecutor js = (JavascriptExecutor) driver;
			js.executeScript("arguments[0].click();", checkBox);
			Thread.sleep(500);
			try {
				js.executeScript("arguments[0].click();", checkBox);
			} catch (StaleElementReferenceException e7) {
				checkBox = driver.findElement(By.xpath("(//div[@id='form_grid_0']//div[@style='top:0px']//div)[12]"));
				js.executeScript("arguments[0].click();", checkBox);
			}
			WebElement checkBox1 = driver.findElement(
					By.xpath("(//div[@id='form_grid_0']//div[@style='top:0px']//div)[12]//input[@type='checkbox']"));
			JavascriptExecutor j1 = (JavascriptExecutor) driver;
			j1.executeScript("arguments[0].click();", checkBox1);
			JavascriptExecutor j2 = (JavascriptExecutor) driver;
			j2.executeScript("arguments[0].click();", checkBox1);

			/*
			 *//*
				 * Withot IQC Checkbox code // WebElement insReason = driver
				 * .findElement(By.xpath(
				 * "//*[@id=\"form_grid_0\"]/div[4]/div[3]/div/div/div[15]"));
				 * JavascriptExecutor j2 = (JavascriptExecutor) driver;
				 * j2.executeScript("arguments[0].click();", insReason); WebElement reasonText =
				 * driver.findElement( By.xpath(
				 * "//*[@id=\"form_grid_0\"]/div[4]/div[3]/div/div/div[15]//input[@type='text']"
				 * )); reasonText.sendKeys("Not Required");
				 */
		} catch (StaleElementReferenceException e) {
		}
	}

	@Then("User click on the Save button and Signout")
	public void user_click_on_the_Save_button_and_Signout() throws InterruptedException {
		Thread.sleep(1000);
		WebElement saveButton = driver.findElement(By.xpath("(//button[@id='submitbutton' and @type='submit'])"));
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].scrollIntoView(true);", saveButton);
		Thread.sleep(1000);
		saveButton.click();
		Thread.sleep(3000);

		WebElement msg = driver.findElement(By.xpath("(//app-alert//div)[1]"));
		System.out.println("PopUp Msg : " + msg.getText().toString());
		String popup = msg.getText().toString().trim().substring(0, 19);
		Thread.sleep(1000);

		WebElement successfullPoCreation = driver
				.findElement(By.xpath("//app-wstable//div[@class='ws-table-head']//table[@role='grid']//tbody//tr[1]"));
		System.out.println("Successfull PO Creation : " + successfullPoCreation.getText().toString());
		String table = successfullPoCreation.getText().toString().trim().substring(0, 19);

		if (popup.equals(table)) {// only true this executes
			System.out.println("Two Values are Equal");
			WebElement profileClick = driver.findElement(By.xpath("//span[@class = 'd-block'][1]"));
			JavascriptExecutor js1 = (JavascriptExecutor) driver;
			js1.executeScript("window.scrollTo(0,0);", profileClick);
			Thread.sleep(1000);
			profileClick.click();
			WebElement signOutBtn = driver.findElement(
					By.xpath("//h3[contains (@class, 'dropdown-item-title') and contains (text(), 'Sign out ')][1]"));
			signOutBtn.click();
			driver.quit();
		} else {
			System.out.println("Not Matching");
		}

	}

	@Given("User enters the SCM Team Head {string} and {string}")
	public void user_enters_the_SCM_Team_Head_and(String username, String password) {
		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
		WebElement loginID = driver.findElement(By.xpath("//input[@id='loginkey'][1]"));
		loginID.sendKeys(username);
		WebElement loginPassword = driver.findElement(By.xpath("//input[@id='password'][1]"));
		loginPassword.sendKeys(password);
		WebElement btnClick = driver.findElement(By.xpath("//input[@id='remembermeCheck'][1]"));
		btnClick.click();
		WebElement btnUnclick = driver.findElement(By.xpath("//input[@id='remembermeCheck'][1]"));
		btnUnclick.click();
		WebElement signInButton = driver.findElement(By.xpath("//button[@type='submit'][1]"));
		signInButton.click();
	}

	@Given("User click on the Edit button")
	public void user_click_on_the_Edit_button() throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement purchaseOrderBtn = wait.until(
				ExpectedConditions.visibilityOfElementLocated(By.xpath("(//a[contains(text(),'Purchase Order')])[1]")));
		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(15));
		wait1.until(ExpectedConditions.elementToBeClickable(purchaseOrderBtn));
		purchaseOrderBtn.click();

		WebDriverWait wait2 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement editBtn = wait2.until(ExpectedConditions
				.visibilityOfElementLocated(By.xpath("//table[@role='grid']//tbody//tr[1]//th//button[1]//i")));
		WebDriverWait wait3 = new WebDriverWait(driver, Duration.ofSeconds(10));
		wait3.until(ExpectedConditions.elementToBeClickable(editBtn));
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", editBtn);

		WebDriverWait wait4 = new WebDriverWait(driver, Duration.ofSeconds(10));
		wait4.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
				"/html/body/app-root/div/app-main/div/app-submenu/div/app-tab/section/div/app-gridwrapper/div/div/div/app-form/section/div")));
	}

	@Given("User verify the PO and providing Pre-Approval")
	public void user_verify_the_PO_and_providing_Pre_Approval() throws InterruptedException {
		driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);
		WebElement dropdown = driver.findElement(By.xpath("(//div//app-form-select//select)"));
		if (dropdown.isEnabled()) {
			Select s = new Select(dropdown);
			Thread.sleep(500);
			s.selectByIndex(1);
			Thread.sleep(500);
		} else {
			System.out.println("Dropdown is disabled. Cannot select an option.");
		}
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		wait.until(ExpectedConditions.visibilityOfElementLocated(
				By.xpath("(//div[1]//input[@pattern='[a-zA-Z0-9*/\\s]+' and @type='text'])[1]")));
		WebElement remarks = driver
				.findElement(By.xpath("(//div[1]//input[@pattern='[a-zA-Z0-9*/\\s]+' and @type='text'])[1]"));
		remarks.sendKeys("Siva Pradeep : Pre Approved");
		Thread.sleep(1000);
	}

	@When("User click on the Save button")
	public void user_click_on_the_Save_button() throws InterruptedException {
		Thread.sleep(1000);
		WebElement saveButton = driver.findElement(By.xpath("(//button[@id='submitbutton' and @type='submit'])"));
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(30));
		wait.until(ExpectedConditions.elementToBeClickable(saveButton));
		JavascriptExecutor js = (JavascriptExecutor) driver;

		if (saveButton.isEnabled()) {
			js.executeScript("arguments[0].click();", saveButton);
			System.out.println("Save Button Enabled");
		} else {
			System.out.println("Save Button Disabled");
			driver.quit();
		}
		Thread.sleep(2000);
	}

	@Then("User verifies the PO Status has been changed and Signout")
	public void user_verifies_the_PO_Status_has_been_changed_and_Signout() throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(20));
		WebElement poStatusFilter = driver.findElement(By.xpath("//select[@name='postatusid']"));
		selectOptionByIndex(poStatusFilter, 0);
		Thread.sleep(1000);

		WebElement poStatus = driver
				.findElement(By.xpath("//app-wstable//div[@class='ws-table-head']//table[@role='grid']//tbody//tr[1]"));
		System.out.println("Approval Status : " + poStatus.getText());
		WebElement profileClick = driver.findElement(By.xpath("(//app-header//div//div//span[@class = 'd-block'])[1]"));
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollTo(0,0);", profileClick);
		wait.until(ExpectedConditions.elementToBeClickable(profileClick));
		js.executeScript("arguments[0].click();", profileClick);
		WebElement signOutBtn = driver.findElement(
				By.xpath("//h3[contains (@class, 'dropdown-item-title') and contains (text(), 'Sign out ')][1]"));
		signOutBtn.click();
		driver.quit();
	}

	@Given("User enters the Operations Head {string} and {string}")
	public void user_enters_the_Operations_Head_and(String username, String password) {
		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
		WebElement loginID = driver.findElement(By.xpath("//input[@id='loginkey'][1]"));
		loginID.sendKeys(username);
		WebElement loginPassword = driver.findElement(By.xpath("//input[@id='password'][1]"));
		loginPassword.sendKeys(password);
		WebElement btnClick = driver.findElement(By.xpath("//input[@id='remembermeCheck'][1]"));
		btnClick.click();
		WebElement btnUnclick = driver.findElement(By.xpath("//input[@id='remembermeCheck'][1]"));
		btnUnclick.click();
		WebElement signInButton = driver.findElement(By.xpath("//button[@type='submit'][1]"));
		signInButton.click();
	}

	@Given("User verify the PO and providing Final-Approval")
	public void user_verify_the_PO_and_providing_Final_Approval() throws InterruptedException {
		driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);
		WebElement dropdown = driver.findElement(By.xpath("(//div//app-form-select//select)"));
		if (dropdown.isEnabled()) {
			Select s = new Select(dropdown);
			Thread.sleep(500);
			s.selectByIndex(1);
			Thread.sleep(500);
		} else {
			System.out.println("Dropdown is disabled. Cannot select an option.");
		}
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		wait.until(ExpectedConditions.visibilityOfElementLocated(
				By.xpath("(//div[1]//input[@pattern='[a-zA-Z0-9*/\\s]+' and @type='text'])[1]")));
		WebElement remarks = driver
				.findElement(By.xpath("(//div[1]//input[@pattern='[a-zA-Z0-9*/\\s]+' and @type='text'])[1]"));
		remarks.sendKeys("Salim : Final Approved");
		Thread.sleep(1000);
	}

	@Given("User click on the Issue icon")
	public void user_click_on_the_Issue_icon() throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(20));
		WebElement purchaseOrderBtn = driver.findElement(By.xpath("(//a[contains(text(),'Purchase Order')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(purchaseOrderBtn));
		j.executeScript("arguments[0].click();", purchaseOrderBtn);
		Thread.sleep(1000);
		
		int maxretries = 3;
		for (int i = 0; i < maxretries; i++) {
			try {
				WebElement issueIcon = wait.until(ExpectedConditions.visibilityOfElementLocated((By.xpath("(//table[@role='grid']//tbody//tr[1]//th//button[2]//i)[1]"))));
				j.executeScript("arguments[0].click();", issueIcon);
				break;
			} catch (StaleElementReferenceException | NoSuchElementException e) {
				System.out.println("Maximum Retry Failed");
			}
		}

//		WebElement issueIcon = wait.until(ExpectedConditions.visibilityOfElementLocated((By.xpath("(//table[@role='grid']//tbody//tr[1]//th//button[2]//i)[1]"))));
//		j.executeScript("arguments[0].click();", issueIcon);
//		try {
//			j.executeScript("arguments[0].click();", issueIcon);
//		} catch (StaleElementReferenceException | NoSuchElementException e) {
//			issueIcon = wait.until(ExpectedConditions.visibilityOfElementLocated((By.xpath("(//table[@role='grid']//tbody//tr[1]//th//button[2]//i)[1]"))));
//			j.executeScript("arguments[0].click();", issueIcon);
//		}
		Thread.sleep(5000);
	}

	@When("User click on the Issue button")
	public void user_click_on_the_Issue_button() throws InterruptedException {
		Select s = new Select(driver.findElement(By.xpath("(//select)[11]")));
		List<WebElement> options = s.getOptions();
		WebElement poApprovalStatus = s.getFirstSelectedOption();
		System.out.println("Approval Status : " + poApprovalStatus.getText());

		WebElement issueButton = driver.findElement(By.xpath("(//button[@id='submitbutton' and @type='submit'])"));
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].scrollIntoView(true);", issueButton);
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		wait.until(ExpectedConditions.elementToBeClickable(issueButton));
		js.executeScript("arguments[0].click();", issueButton);
		Thread.sleep(2000);
	}

	@Then("User verifies the PO Status has been changed to Issued and Signout")
	public void user_verifies_the_PO_Status_has_been_changed_to_Issued_and_Signout() throws InterruptedException {
		WebElement successfullyIssued = driver
				.findElement(By.xpath("//app-wstable//div[@class='ws-table-head']//table[@role='grid']//tbody//tr[1]"));
		System.out.println("Successfull PO Issued : " + successfullyIssued.getText());
		Thread.sleep(1000);

		WebElement profileClick = driver.findElement(By.xpath("(//app-header//div//div//span[@class = 'd-block'])[1]"));
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollTo(0,0);", profileClick);
		Thread.sleep(1000);
		profileClick.click();
		WebElement signOutBtn = driver.findElement(
				By.xpath("//h3[contains (@class, 'dropdown-item-title') and contains (text(), 'Sign out ')][1]"));
		signOutBtn.click();
		driver.quit();
		Thread.sleep(1000);
	}

	// GRN CREATION FOR (PO ORDER - RM - "Domestic")

	@Given("User enters the Store Team Member {string} and {string}")
	public void user_enters_the_Store_Team_Member_and(String username, String password) {
		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
		WebElement loginID = driver.findElement(By.xpath("//input[@id='loginkey'][1]"));
		loginID.sendKeys(username);
		WebElement loginPassword = driver.findElement(By.xpath("//input[@id='password'][1]"));
		loginPassword.sendKeys(password);
		WebElement btnClick = driver.findElement(By.xpath("//input[@id='remembermeCheck'][1]"));
		btnClick.click();
		WebElement btnUnclick = driver.findElement(By.xpath("//input[@id='remembermeCheck'][1]"));
		btnUnclick.click();
		WebElement signInButton = driver.findElement(By.xpath("//button[@type='submit'][1]"));
		signInButton.click();
	}

	@When("User create the GRN Request for Fully Received - \\(PO Order - RM - Domestic)")
	public void user_create_the_grn_request_for_fully_received_po_order_rm_domestic() throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;

		WebElement receiptmodule = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		receiptmodule.click();

		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement addBtn = driver.findElement(By.xpath("(//button[@title='Add' and @type='button'])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(addBtn));
		addBtn.click();
		Thread.sleep(2000);

		// Store Tile Drop-down Fields

		WebElement storeTileDropdown = driver.findElement(By.xpath("//*[@id='headingOne']/h5/button"));
		wait.until(ExpectedConditions.elementToBeClickable(storeTileDropdown));
		j.executeScript("arguments[0].click();", storeTileDropdown);
		Thread.sleep(1000);

		WebElement branch = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[1]/app-form-dyna-select/div/select")));
		wait.until(ExpectedConditions.visibilityOf(branch));
		select(branch).selectByIndex(1);
		Thread.sleep(500);

		WebElement store = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[2]/app-form-dyna-select/div/select")));
		select(store).selectByIndex(0);
		Thread.sleep(500);

		WebElement orderType = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[3]/app-form-dyna-select/div/select")));
		select(orderType).selectByIndex(0);
		Thread.sleep(500);

		WebElement materialType = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[4]/app-form-dyna-select/div/select")));
		select(materialType).selectByIndex(0);
		Thread.sleep(500);

		WebElement vendorField = driver.findElement(By.xpath("(//input[@type='text' and @role='combobox'])[1]"));
		vendorField.sendKeys("A");
		Thread.sleep(500);

		List<WebElement> vendorList = driver.findElements(By.xpath("(//ul[@role='listbox'])[1]//li"));
		for (WebElement webElement : vendorList) {
			String list = webElement.getText();
			if (list.contains("A.K.INDUSTRIES")) {
				Thread.sleep(500);
				webElement.click();
				System.out.println(webElement);
				break;
			}
			Thread.sleep(1000);
		}

		WebElement multiPO = driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[6]/app-form-dyna-select/div/select"));
		select(multiPO);
		int lastIndex = getOptions(multiPO).size() - 1;
		selectOptionByIndex(multiPO, lastIndex);
		Thread.sleep(1000);

		// Master Fields
		/* /for "DOMESTIC"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("1: 2"));

		if (attribute2.equals("1: 2")) {

			WebElement receiptNumber = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[1]"));
			if (receiptNumber.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Receipt Number : " + receiptNumber.getAttribute("value"));
			}

			WebElement receiptDateandTime = driver
					.findElement(By.xpath("(//app-form-text//div//input [@type='text'])[2]"));
			if (receiptDateandTime.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Receipt Date/Time : " + receiptDateandTime.getAttribute("value"));
			}

			WebElement invoiceDate = driver.findElement(By.xpath("(//input [@type='date'])[1]"));
			String date = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			invoiceDate.sendKeys(date);

			WebElement invoiceNumber = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[2]"));
			invoiceNumber.sendKeys(UUID());

			WebElement logisticsCarrier = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[1]"));
			selectOptionByIndex(logisticsCarrier, 1);

			WebElement incoterm = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]"));
			if (incoterm.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Incoterm : " + incoterm.getAttribute("text"));
			}

			WebElement purchaseCategory = driver
					.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]//option[@value='1: 2']"));
			if (purchaseCategory.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Purchase Category : " + purchaseCategory.getAttribute("text"));
			}

			WebElement trackingNo = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[3]"));
			trackingNo.sendKeys("12345");
			Thread.sleep(500);

			WebElement noOfPackages = driver.findElement(By.xpath("(//input[@pattern='[0-9]*'])[1]"));
			noOfPackages.sendKeys("10");

			// Store Tile Drop-down Fields

			WebElement geDate = driver.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[2]"));
			String date1 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			geDate.sendKeys(date1);
			Thread.sleep(1000);

			WebElement gateEntryNo = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[4]"));
			gateEntryNo.sendKeys("2");

			WebElement paymentTerms = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[8]"));
			if (paymentTerms.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Payment Terms : " + paymentTerms.getAttribute("text"));
			}

			WebElement paymentDueDate = driver
					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[3]"));
			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			paymentDueDate.sendKeys(date2);
			Thread.sleep(1000);

			WebElement currency = driver.findElement(By.xpath("(//app-form-dyna-select[1]//div[1]//select)[9]"));
			if (currency.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Currency : " + currency.getAttribute("text"));
			}

			WebElement totalReceiptValue = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[9]"));
			if (totalReceiptValue.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Total Receipt Value : " + totalReceiptValue.getAttribute("value"));
			}

			WebElement additionalChargesTax = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[10]"));
			additionalChargesTax.sendKeys("100");

			WebElement additionalChargesNonTax = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[11]"));
			additionalChargesNonTax.sendKeys("50");

			WebElement remarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[1]"));
			remarks.sendKeys("Suresh : GRN Entry");
			Thread.sleep(1000);

			WebElement toBeCredit = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[12]"));
			if (toBeCredit.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");

			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("To Be Credit Value : " + toBeCredit.getAttribute("value"));
			}

			WebElement checkBox = driver.findElement(By.xpath("(//input[@type='checkbox'])[2]"));
			checkBox.click();

			WebElement moveToReceiveQtyButton = driver
					.findElement(By.xpath("//div//button[contains (text(), 'Move to Receive Qty')]"));
			moveToReceiveQtyButton.click();
			Thread.sleep(3000);

			String attribute = totalReceiptValue.getAttribute("value");
			WebElement invoiceValue = driver.findElement(
					By.xpath("(//app-form-text//div[1]//input [@pattern='^[+-]?((\\d+(\\.\\d*)?)|(\\.\\d+))$'])"));
			invoiceValue.sendKeys(attribute);
		} else {
			System.out.println("Purchase Category NOT MATCHING");
		}
	}

	@When("User create the GRN Request for Fully Received - \\(CSM - Domestic)")
	public void user_create_the_grn_request_for_fully_received_csm_domestic() throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;

		WebElement receiptmodule = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		receiptmodule.click();

		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement addBtn = driver.findElement(By.xpath("(//button[@title='Add' and @type='button'])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(addBtn));
		addBtn.click();
		Thread.sleep(2000);

		// Store Tile Drop-down Fields

		WebElement storeTileDropdown = driver.findElement(By.xpath("//*[@id='headingOne']/h5/button"));
		wait.until(ExpectedConditions.elementToBeClickable(storeTileDropdown));
		j.executeScript("arguments[0].click();", storeTileDropdown);
		Thread.sleep(1000);

		WebElement branch = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[1]/app-form-dyna-select/div/select")));
		wait.until(ExpectedConditions.visibilityOf(branch));
		select(branch).selectByIndex(1);
		Thread.sleep(500);

		WebElement store = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[2]/app-form-dyna-select/div/select")));
		select(store).selectByIndex(0);
		Thread.sleep(500);

		WebElement orderType = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[3]/app-form-dyna-select/div/select")));
		select(orderType).selectByIndex(3);
		Thread.sleep(500);

		WebElement vendorField = driver.findElement(By.xpath("(//input[@type='text' and @role='combobox'])[1]"));
		vendorField.sendKeys("A");
		Thread.sleep(500);

		List<WebElement> vendorList = driver.findElements(By.xpath("(//ul[@role='listbox'])[1]//li"));
		for (WebElement webElement : vendorList) {
			String list = webElement.getText();
			if (list.contains("A La Carte Media")) {
				Thread.sleep(500);
				webElement.click();
				System.out.println(webElement);
				break;
			}
			Thread.sleep(1000);
		}

		WebElement currency = driver.findElement(By.xpath("(//app-form-dyna-select[1]//div[1]//select)[7]"));
		selectOptionByIndex(currency, 0);

		// Master Fields
		/* /for "DOMESTIC"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("1: 2"));

		if (attribute2.equals("1: 2")) {

			WebElement receiptNumber = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[1]"));
			if (receiptNumber.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Receipt Number : " + receiptNumber.getAttribute("value"));
			}

			WebElement receiptDateandTime = driver
					.findElement(By.xpath("(//app-form-text//div//input [@type='text'])[2]"));
			if (receiptDateandTime.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Receipt Date/Time : " + receiptDateandTime.getAttribute("value"));
			}

			WebElement invoiceDate = driver.findElement(By.xpath("(//input [@type='date'])[1]"));
			String date = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			invoiceDate.sendKeys(date);

			WebElement invoiceNumber = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[2]"));
			invoiceNumber.sendKeys(UUID());

			WebElement logisticsCarrier = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[1]"));
			selectOptionByIndex(logisticsCarrier, 1);

			WebElement incoterm = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]"));
			if (incoterm.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Incoterm : " + incoterm.getAttribute("text"));
			}

			WebElement purchaseCategory = driver
					.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]//option[@value='1: 2']"));
			if (purchaseCategory.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Purchase Category : " + purchaseCategory.getAttribute("text"));
			}

			WebElement trackingNo = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[3]"));
			trackingNo.sendKeys("12345");
			Thread.sleep(500);

			WebElement noOfPackages = driver.findElement(By.xpath("(//input[@pattern='[0-9]*'])[1]"));
			noOfPackages.sendKeys("10");

			// Store Tile Drop-down Fields

			WebElement geDate = driver.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[2]"));
			String date1 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			geDate.sendKeys(date1);
			Thread.sleep(1000);

			WebElement gateEntryNo = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[4]"));
			gateEntryNo.sendKeys("2");

			WebElement paymentDueDate = driver
					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[3]"));
			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			paymentDueDate.sendKeys(date2);
			Thread.sleep(1000);

			WebElement totalReceiptValue = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[8]"));
			if (totalReceiptValue.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Total Receipt Value : " + totalReceiptValue.getAttribute("value"));
			}

			WebElement additionalChargesTax = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[9]"));
			additionalChargesTax.sendKeys("100");

			WebElement additionalChargesNonTax = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[10]"));
			additionalChargesNonTax.sendKeys("50");

			WebElement remarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[1]"));
			remarks.sendKeys("Suresh : GRN Entry");
			Thread.sleep(1000);

			/* / Grid Fields / */

			WebElement itemDesc = driver.findElement(By.xpath(".//div[contains (@class, 'slick-cell l2 r2')]"));
			j.executeScript("arguments[0].click();", itemDesc);
			WebElement itemDesc1 = driver
					.findElement(By.xpath(".//div[contains (@class, 'slick-cell l2 r2')]//input"));
			itemDesc1.sendKeys("Customer Supplied Material");
			Thread.sleep(500);

			// With IQC checkbox code
			WebElement checkBox = driver
					.findElement(By.xpath(".//div[contains (@class, 'slick-cell l3 r3')]"));
			j.executeScript("arguments[0].click();", checkBox);
			Thread.sleep(500);
			try {
				j.executeScript("arguments[0].click();", checkBox);
			} catch (StaleElementReferenceException e5) {
				checkBox = driver.findElement(By.xpath(".//div[contains (@class, 'slick-cell l3 r3')]"));
				j.executeScript("arguments[0].click();", checkBox);
			}
			
			WebElement checkBox1 = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l3 r3')]//input[@type='checkbox']"));
			j.executeScript("arguments[0].click();", checkBox1);
			j.executeScript("arguments[0].click();", checkBox1);

			WebElement storeReceiveQty = driver
					.findElement(By.xpath(".//div[contains (@class, 'slick-cell l4 r4')]"));
			j.executeScript("arguments[0].click();", storeReceiveQty);
			Thread.sleep(500);
			try {
				j.executeScript("arguments[0].click();", storeReceiveQty);
			} catch (StaleElementReferenceException e5) {
				storeReceiveQty = driver.findElement(By.xpath(".//div[contains (@class, 'slick-cell l4 r4')]"));
				j.executeScript("arguments[0].click();", storeReceiveQty);
			}
			WebElement storeReceiveQty1 = driver
					.findElement(By.xpath(".//div[contains (@class, 'slick-cell l4 r4')]//input"));
			storeReceiveQty1.sendKeys("100");

			WebElement unitPrice = driver.findElement(By.xpath(".//div[contains (@class, 'slick-cell l6 r6')]"));
			j.executeScript("arguments[0].click();", unitPrice);
			Thread.sleep(500);
			try {
				j.executeScript("arguments[0].click();", unitPrice);
			} catch (StaleElementReferenceException e5) {
				unitPrice = driver.findElement(By.xpath(".//div[contains (@class, 'slick-cell l6 r6')]"));
				j.executeScript("arguments[0].click();", unitPrice);
			}
			WebElement unitPrice1 = driver
					.findElement(By.xpath(".//div[contains (@class, 'slick-cell l6 r6')]//input"));
			unitPrice1.sendKeys("10");

			WebElement costCenter = driver.findElement(By.xpath(".//div[contains (@class, 'slick-cell l8 r8')]"));
			j.executeScript("arguments[0].click();", costCenter);
			Thread.sleep(500);
			try {
				j.executeScript("arguments[0].click();", costCenter);
			} catch (StaleElementReferenceException e5) {
				costCenter = driver.findElement(By.xpath(".//div[contains (@class, 'slick-cell l8 r8')]"));
				j.executeScript("arguments[0].click();", costCenter);
			}
			WebElement costCenter1 = driver
					.findElement(By.xpath(".//div[contains (@class, 'slick-cell l8 r8')]//select"));
			selectOptionByIndex(costCenter1, 0);

			WebElement expenseCategory = driver
					.findElement(By.xpath(".//div[contains (@class, 'slick-cell l9 r9')]"));
			j.executeScript("arguments[0].click();", expenseCategory);
			Thread.sleep(500);
			try {
				j.executeScript("arguments[0].click();", expenseCategory);
			} catch (StaleElementReferenceException e5) {
				expenseCategory = driver.findElement(By.xpath(".//div[contains (@class, 'slick-cell l9 r9')]"));
				j.executeScript("arguments[0].click();", expenseCategory);
			}
			WebElement expenseCategory1 = driver
					.findElement(By.xpath(".//div[contains (@class, 'slick-cell l9 r9')]//select"));
			selectOptionByIndex(expenseCategory1, 1);

			WebElement workType = driver.findElement(By.xpath(".//div[contains (@class, 'slick-cell l10 r10')]"));
			j.executeScript("arguments[0].click();", workType);
			Thread.sleep(500);
			try {
				j.executeScript("arguments[0].click();", workType);
			} catch (StaleElementReferenceException e5) {
				workType = driver.findElement(By.xpath(".//div[contains (@class, 'slick-cell l10 r10')]"));
				j.executeScript("arguments[0].click();", workType);
			}
			WebElement workType1 = driver
					.findElement(By.xpath(".//div[contains (@class, 'slick-cell l10 r10')]//select"));
			selectOptionByIndex(workType1, 0);

			WebElement name = driver.findElement(By.xpath(".//div[contains (@class, 'slick-cell l11 r11')]"));
			j.executeScript("arguments[0].click();", name);
			Thread.sleep(500);
			try {
				j.executeScript("arguments[0].click();", name);
			} catch (StaleElementReferenceException e5) {
				name = driver.findElement(By.xpath(".//div[contains (@class, 'slick-cell l11 r11')]"));
				j.executeScript("arguments[0].click();", name);
			}
			WebElement name1 = driver
					.findElement(By.xpath(".//div[contains (@class, 'slick-cell l11 r11')]//input"));
			name1.sendKeys("A");
			WebElement autoSuggestion1 = driver.findElement(By.xpath("//*[@class='ui-menu-item'][1]"));
			autoSuggestion1.click();

			WebElement UOM = driver.findElement(By.xpath(".//div[contains (@class, 'slick-cell l12 r12')]"));
			j.executeScript("arguments[0].click();", UOM);
			Thread.sleep(500);
			try {
				j.executeScript("arguments[0].click();", UOM);
			} catch (StaleElementReferenceException e5) {
				UOM = driver.findElement(By.xpath(".//div[contains (@class, 'slick-cell l12 r12')]"));
				j.executeScript("arguments[0].click();", UOM);
			}
			WebElement UOM1 = driver
					.findElement(By.xpath(".//div[contains (@class, 'slick-cell l12 r12')]//select"));
			selectOptionByIndex(UOM1, 0);

			String attribute = totalReceiptValue.getAttribute("value");
			WebElement invoiceValue = driver.findElement(
					By.xpath(".//input [contains (@pattern, '[+-]?((\\d+(\\.\\d*)?)|(\\.\\d+))$')]"));
			invoiceValue.sendKeys(attribute);
		} else {
			System.out.println("Purchase Category NOT MATCHING");
		}
	}

	@When("User create the GRN Request for Fully Received - \\(WEB Order - RM - Domestic)")
	public void user_create_the_grn_request_for_fully_received_web_order_rm_domestic() throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;

		WebElement receiptmodule = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		receiptmodule.click();

		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement addBtn = driver.findElement(By.xpath("(//button[@title='Add' and @type='button'])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(addBtn));
		addBtn.click();
		Thread.sleep(2000);

		// Store Tile Drop-down Fields

		WebElement storeTileDropdown = driver.findElement(By.xpath("//*[@id='headingOne']/h5/button"));
		wait.until(ExpectedConditions.elementToBeClickable(storeTileDropdown));
		j.executeScript("arguments[0].click();", storeTileDropdown);
		Thread.sleep(1000);

		WebElement branch = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[1]/app-form-dyna-select/div/select")));
		wait.until(ExpectedConditions.visibilityOf(branch));
		select(branch).selectByIndex(1);
		Thread.sleep(500);

		WebElement store = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[2]/app-form-dyna-select/div/select")));
		select(store).selectByIndex(0);
		Thread.sleep(500);

		WebElement orderType = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[3]/app-form-dyna-select/div/select")));
		select(orderType).selectByIndex(1);
		Thread.sleep(500);

		WebElement materialType = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[4]/app-form-dyna-select/div/select")));
		select(materialType).selectByIndex(0);
		Thread.sleep(500);

		WebElement vendorField = driver.findElement(By.xpath("(//input[@type='text' and @role='combobox'])[1]"));
		vendorField.sendKeys("A");
		Thread.sleep(500);

		List<WebElement> vendorList = driver.findElements(By.xpath("(//ul[@role='listbox'])[1]//li"));
		for (WebElement webElement : vendorList) {
			String list = webElement.getText();
			if (list.contains("A.K.INDUSTRIES")) {
				Thread.sleep(500);
				webElement.click();
				System.out.println(webElement);
				break;
			}
			Thread.sleep(1000);
		}

		WebElement multiPO = driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[6]/app-form-dyna-select/div/select"));
		select(multiPO);
		int lastIndex = getOptions(multiPO).size() - 1;
		selectOptionByIndex(multiPO, lastIndex);
		Thread.sleep(1000);

		// Master Fields
		/* /for "DOMESTIC"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("1: 2"));

		if (attribute2.equals("1: 2")) {

			WebElement receiptNumber = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[1]"));
			if (receiptNumber.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Receipt Number : " + receiptNumber.getAttribute("value"));
			}

			WebElement receiptDateandTime = driver
					.findElement(By.xpath("(//app-form-text//div//input [@type='text'])[2]"));
			if (receiptDateandTime.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Receipt Date/Time : " + receiptDateandTime.getAttribute("value"));
			}

			WebElement invoiceDate = driver.findElement(By.xpath("(//input [@type='date'])[1]"));
			String date = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			invoiceDate.sendKeys(date);

			WebElement invoiceNumber = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[2]"));
			invoiceNumber.sendKeys(UUID());

			WebElement logisticsCarrier = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[1]"));
			selectOptionByIndex(logisticsCarrier, 1);

			WebElement incoterm = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]"));
			if (incoterm.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Incoterm : " + incoterm.getAttribute("text"));
			}

			WebElement purchaseCategory = driver
					.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]//option[@value='1: 2']"));
			if (purchaseCategory.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Purchase Category : " + purchaseCategory.getAttribute("text"));
			}

			WebElement trackingNo = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[3]"));
			trackingNo.sendKeys("12345");
			Thread.sleep(500);

			WebElement noOfPackages = driver.findElement(By.xpath("(//input[@pattern='[0-9]*'])[1]"));
			noOfPackages.sendKeys("10");

			// Store Tile Drop-down Fields

			WebElement geDate = driver.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[2]"));
			String date1 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			geDate.sendKeys(date1);
			Thread.sleep(1000);

			WebElement gateEntryNo = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[4]"));
			gateEntryNo.sendKeys("2");

			WebElement paymentTerms = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[8]"));
			if (paymentTerms.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Payment Terms : " + paymentTerms.getAttribute("text"));
			}

			WebElement paymentDueDate = driver
					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[3]"));
			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			paymentDueDate.sendKeys(date2);
			Thread.sleep(1000);

			WebElement currency = driver.findElement(By.xpath("(//app-form-dyna-select[1]//div[1]//select)[9]"));
			if (currency.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Currency : " + currency.getAttribute("text"));
			}

			WebElement totalReceiptValue = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[9]"));
			if (totalReceiptValue.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Total Receipt Value : " + totalReceiptValue.getAttribute("value"));
			}

			WebElement additionalChargesTax = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[10]"));
			additionalChargesTax.sendKeys("100");

			WebElement additionalChargesNonTax = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[11]"));
			additionalChargesNonTax.sendKeys("50");

			WebElement remarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[1]"));
			remarks.sendKeys("Suresh : GRN Entry");
			Thread.sleep(1000);

			WebElement toBeCredit = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[12]"));
			if (toBeCredit.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");

			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("To Be Credit Value : " + toBeCredit.getAttribute("value"));
			}

			WebElement checkBox = driver.findElement(By.xpath("(//input[@type='checkbox'])[2]"));
			checkBox.click();

			WebElement moveToReceiveQtyButton = driver
					.findElement(By.xpath("//div//button[contains (text(), 'Move to Receive Qty')]"));
			moveToReceiveQtyButton.click();
			Thread.sleep(3000);

			String attribute = totalReceiptValue.getAttribute("value");
			WebElement invoiceValue = driver.findElement(
					By.xpath("(//app-form-text//div[1]//input [@pattern='^[+-]?((\\d+(\\.\\d*)?)|(\\.\\d+))$'])"));
			invoiceValue.sendKeys(attribute);
		} else {
			System.out.println("Purchase Category NOT MATCHING");
		}
	}

	@When("User create the GRN Request for Fully Received - \\(Testing & Services - Domestic)")
	public void user_create_the_grn_request_for_fully_received_testing_services_domestic() throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;

		WebElement receiptmodule = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		receiptmodule.click();

		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement addBtn = driver.findElement(By.xpath("(//button[@title='Add' and @type='button'])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(addBtn));
		addBtn.click();
		Thread.sleep(2000);

		// Store Tile Drop-down Fields

		WebElement storeTileDropdown = driver.findElement(By.xpath("//*[@id='headingOne']/h5/button"));
		wait.until(ExpectedConditions.elementToBeClickable(storeTileDropdown));
		j.executeScript("arguments[0].click();", storeTileDropdown);
		Thread.sleep(1000);

		WebElement branch = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[1]/app-form-dyna-select/div/select")));
		wait.until(ExpectedConditions.visibilityOf(branch));
		select(branch).selectByIndex(1);
		Thread.sleep(500);

		WebElement store = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[2]/app-form-dyna-select/div/select")));
		select(store).selectByIndex(0);
		Thread.sleep(500);

		WebElement orderType = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[3]/app-form-dyna-select/div/select")));
		select(orderType).selectByIndex(2);
		Thread.sleep(500);

		WebElement vendorField = driver.findElement(By.xpath("(//input[@type='text' and @role='combobox'])[1]"));
		vendorField.sendKeys("A");
		Thread.sleep(500);

		List<WebElement> vendorList = driver.findElements(By.xpath("(//ul[@role='listbox'])[1]//li"));
		for (WebElement webElement : vendorList) {
			String list = webElement.getText();
			if (list.contains("A.K.INDUSTRIES")) {
				Thread.sleep(500);
				webElement.click();
				System.out.println(webElement);
				break;
			}
			Thread.sleep(1000);
		}

		WebElement multiPO = driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[5]/app-form-dyna-select/div/select"));
		select(multiPO);
		int lastIndex = getOptions(multiPO).size() - 1;
		selectOptionByIndex(multiPO, lastIndex);
		Thread.sleep(1000);

		// Master Fields
		/* /for "DOMESTIC"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("1: 2"));

		if (attribute2.equals("1: 2")) {

			WebElement receiptNumber = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[1]"));
			if (receiptNumber.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Receipt Number : " + receiptNumber.getAttribute("value"));
			}

			WebElement receiptDateandTime = driver
					.findElement(By.xpath("(//app-form-text//div//input [@type='text'])[2]"));
			if (receiptDateandTime.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Receipt Date/Time : " + receiptDateandTime.getAttribute("value"));
			}

			WebElement invoiceDate = driver.findElement(By.xpath("(//input [@type='date'])[1]"));
			String date = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			invoiceDate.sendKeys(date);

			WebElement invoiceNumber = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[2]"));
			invoiceNumber.sendKeys(UUID());

			WebElement logisticsCarrier = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[1]"));
			selectOptionByIndex(logisticsCarrier, 1);

			WebElement incoterm = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]"));
			if (incoterm.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Incoterm : " + incoterm.getAttribute("text"));
			}

			WebElement purchaseCategory = driver
					.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]//option[@value='1: 2']"));
			if (purchaseCategory.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Purchase Category : " + purchaseCategory.getAttribute("text"));
			}

			WebElement trackingNo = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[3]"));
			trackingNo.sendKeys("12345");
			Thread.sleep(500);

			WebElement noOfPackages = driver.findElement(By.xpath("(//input[@pattern='[0-9]*'])[1]"));
			noOfPackages.sendKeys("10");

			// Store Tile Drop-down Fields

			WebElement geDate = driver.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[2]"));
			String date1 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			geDate.sendKeys(date1);
			Thread.sleep(1000);

			WebElement gateEntryNo = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[4]"));
			gateEntryNo.sendKeys("2");

			WebElement paymentTerms = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[8]"));
			if (paymentTerms.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Payment Terms : " + paymentTerms.getAttribute("text"));
			}

			WebElement paymentDueDate = driver
					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[3]"));
			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			paymentDueDate.sendKeys(date2);
			Thread.sleep(1000);

			WebElement currency = driver.findElement(By.xpath("(//app-form-dyna-select[1]//div[1]//select)[8]"));
			if (currency.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Currency : " + currency.getAttribute("text"));
			}

			WebElement totalReceiptValue = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[9]"));
			if (totalReceiptValue.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Total Receipt Value : " + totalReceiptValue.getAttribute("value"));
			}

			WebElement additionalChargesTax = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[10]"));
			additionalChargesTax.sendKeys("100");

			WebElement additionalChargesNonTax = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[11]"));
			additionalChargesNonTax.sendKeys("50");

			WebElement remarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[1]"));
			remarks.sendKeys("Suresh : GRN Entry");
			Thread.sleep(1000);

			WebElement toBeCredit = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[12]"));
			if (toBeCredit.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");

			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("To Be Credit Value : " + toBeCredit.getAttribute("value"));
			}

			WebElement checkBox = driver.findElement(By.xpath("(//input[@type='checkbox'])[2]"));
			checkBox.click();

			WebElement moveToReceiveQtyButton = driver
					.findElement(By.xpath("//div//button[contains (text(), 'Move to Receive Qty')]"));
			moveToReceiveQtyButton.click();
			Thread.sleep(3000);

			String attribute = totalReceiptValue.getAttribute("value");
			WebElement invoiceValue = driver.findElement(
					By.xpath("(//app-form-text//div[1]//input [@pattern='^[+-]?((\\d+(\\.\\d*)?)|(\\.\\d+))$'])"));
			invoiceValue.sendKeys(attribute);
		} else {
			System.out.println("Purchase Category NOT MATCHING");
		}
	}

	@When("User create the GRN Request for Fully Received - \\(PO Order - FG - Domestic)")
	public void user_create_the_grn_request_for_fully_received_po_order_fg_domestic() throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;

		WebElement receiptmodule = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		receiptmodule.click();

		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement addBtn = driver.findElement(By.xpath("(//button[@title='Add' and @type='button'])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(addBtn));
		addBtn.click();
		Thread.sleep(2000);

		// Store Tile Drop-down Fields

		WebElement storeTileDropdown = driver.findElement(By.xpath("//*[@id='headingOne']/h5/button"));
		wait.until(ExpectedConditions.elementToBeClickable(storeTileDropdown));
		j.executeScript("arguments[0].click();", storeTileDropdown);
		Thread.sleep(1000);

		WebElement branch = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[1]/app-form-dyna-select/div/select")));
		wait.until(ExpectedConditions.visibilityOf(branch));
		select(branch).selectByIndex(1);
		Thread.sleep(500);

		WebElement store = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[2]/app-form-dyna-select/div/select")));
		select(store).selectByIndex(0);
		Thread.sleep(500);

		WebElement orderType = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[3]/app-form-dyna-select/div/select")));
		select(orderType).selectByIndex(0);
		Thread.sleep(500);

		WebElement materialType = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[4]/app-form-dyna-select/div/select")));
		select(materialType).selectByIndex(1);
		Thread.sleep(500);

		WebElement vendorField = driver.findElement(By.xpath("(//input[@type='text' and @role='combobox'])[1]"));
		vendorField.sendKeys("A");
		Thread.sleep(500);

		List<WebElement> vendorList = driver.findElements(By.xpath("(//ul[@role='listbox'])[1]//li"));
		for (WebElement webElement : vendorList) {
			String list = webElement.getText();
			if (list.contains("A.K.INDUSTRIES")) {
				Thread.sleep(500);
				webElement.click();
				System.out.println(webElement);
				break;
			}
			Thread.sleep(1000);
		}

		WebElement multiPO = driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[6]/app-form-dyna-select/div/select"));
		select(multiPO);
		int lastIndex = getOptions(multiPO).size() - 1;
		selectOptionByIndex(multiPO, lastIndex);
		Thread.sleep(1000);

		// Master Fields
		/* /for "DOMESTIC"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("1: 2"));

		if (attribute2.equals("1: 2")) {

			WebElement receiptNumber = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[1]"));
			if (receiptNumber.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Receipt Number : " + receiptNumber.getAttribute("value"));
			}

			WebElement receiptDateandTime = driver
					.findElement(By.xpath("(//app-form-text//div//input [@type='text'])[2]"));
			if (receiptDateandTime.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Receipt Date/Time : " + receiptDateandTime.getAttribute("value"));
			}

			WebElement invoiceDate = driver.findElement(By.xpath("(//input [@type='date'])[1]"));
			String date = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			invoiceDate.sendKeys(date);

			WebElement invoiceNumber = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[2]"));
			invoiceNumber.sendKeys(UUID());

			WebElement logisticsCarrier = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[1]"));
			selectOptionByIndex(logisticsCarrier, 1);

			WebElement incoterm = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]"));
			if (incoterm.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Incoterm : " + incoterm.getAttribute("text"));
			}

			WebElement purchaseCategory = driver
					.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]//option[@value='1: 2']"));
			if (purchaseCategory.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Purchase Category : " + purchaseCategory.getAttribute("text"));
			}

			WebElement trackingNo = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[3]"));
			trackingNo.sendKeys("12345");
			Thread.sleep(500);

			WebElement noOfPackages = driver.findElement(By.xpath("(//input[@pattern='[0-9]*'])[1]"));
			noOfPackages.sendKeys("10");

			// Store Tile Drop-down Fields

			WebElement geDate = driver.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[2]"));
			String date1 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			geDate.sendKeys(date1);
			Thread.sleep(1000);

			WebElement gateEntryNo = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[4]"));
			gateEntryNo.sendKeys("2");

			WebElement paymentTerms = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[8]"));
			if (paymentTerms.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Payment Terms : " + paymentTerms.getAttribute("text"));
			}

			WebElement paymentDueDate = driver
					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[3]"));
			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			paymentDueDate.sendKeys(date2);
			Thread.sleep(1000);

			WebElement currency = driver.findElement(By.xpath("(//app-form-dyna-select[1]//div[1]//select)[9]"));
			if (currency.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Currency : " + currency.getAttribute("text"));
			}

			WebElement totalReceiptValue = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[9]"));
			if (totalReceiptValue.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Total Receipt Value : " + totalReceiptValue.getAttribute("value"));
			}

			WebElement additionalChargesTax = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[10]"));
			additionalChargesTax.sendKeys("100");

			WebElement additionalChargesNonTax = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[11]"));
			additionalChargesNonTax.sendKeys("50");

			WebElement remarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[1]"));
			remarks.sendKeys("Suresh : GRN Entry");
			Thread.sleep(1000);

			WebElement toBeCredit = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[12]"));
			if (toBeCredit.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");

			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("To Be Credit Value : " + toBeCredit.getAttribute("value"));
			}

			WebElement checkBox = driver.findElement(By.xpath("(//input[@type='checkbox'])[2]"));
			checkBox.click();

			WebElement moveToReceiveQtyButton = driver
					.findElement(By.xpath("//div//button[contains (text(), 'Move to Receive Qty')]"));
			moveToReceiveQtyButton.click();
			Thread.sleep(3000);

			String attribute = totalReceiptValue.getAttribute("value");
			WebElement invoiceValue = driver.findElement(
					By.xpath("(//app-form-text//div[1]//input [@pattern='^[+-]?((\\d+(\\.\\d*)?)|(\\.\\d+))$'])"));
			invoiceValue.sendKeys(attribute);
		} else {
			System.out.println("Purchase Category NOT MATCHING");
		}
	}

	@When("User create the GRN Request for Fully Received - \\(WEB Order - FG - Domestic)")
	public void user_create_the_grn_request_for_fully_received_web_order_fg_domestic() throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;

		WebElement receiptmodule = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		receiptmodule.click();

		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement addBtn = driver.findElement(By.xpath("(//button[@title='Add' and @type='button'])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(addBtn));
		addBtn.click();
		Thread.sleep(2000);

		// Store Tile Drop-down Fields

		WebElement storeTileDropdown = driver.findElement(By.xpath("//*[@id='headingOne']/h5/button"));
		wait.until(ExpectedConditions.elementToBeClickable(storeTileDropdown));
		j.executeScript("arguments[0].click();", storeTileDropdown);
		Thread.sleep(1000);

		WebElement branch = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[1]/app-form-dyna-select/div/select")));
		wait.until(ExpectedConditions.visibilityOf(branch));
		select(branch).selectByIndex(1);
		Thread.sleep(500);

		WebElement store = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[2]/app-form-dyna-select/div/select")));
		select(store).selectByIndex(0);
		Thread.sleep(500);

		WebElement orderType = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[3]/app-form-dyna-select/div/select")));
		select(orderType).selectByIndex(1);
		Thread.sleep(500);

		WebElement materialType = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[4]/app-form-dyna-select/div/select")));
		select(materialType).selectByIndex(1);
		Thread.sleep(500);

		WebElement vendorField = driver.findElement(By.xpath("(//input[@type='text' and @role='combobox'])[1]"));
		vendorField.sendKeys("A");
		Thread.sleep(500);

		List<WebElement> vendorList = driver.findElements(By.xpath("(//ul[@role='listbox'])[1]//li"));
		for (WebElement webElement : vendorList) {
			String list = webElement.getText();
			if (list.contains("A.K.INDUSTRIES")) {
				Thread.sleep(500);
				webElement.click();
				System.out.println(webElement);
				break;
			}
			Thread.sleep(1000);
		}

		WebElement multiPO = driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[6]/app-form-dyna-select/div/select"));
		select(multiPO);
		int lastIndex = getOptions(multiPO).size() - 1;
		selectOptionByIndex(multiPO, lastIndex);
		Thread.sleep(1000);

		// Master Fields
		/* /for "DOMESTIC"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("1: 2"));

		if (attribute2.equals("1: 2")) {

			WebElement receiptNumber = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[1]"));
			if (receiptNumber.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Receipt Number : " + receiptNumber.getAttribute("value"));
			}

			WebElement receiptDateandTime = driver
					.findElement(By.xpath("(//app-form-text//div//input [@type='text'])[2]"));
			if (receiptDateandTime.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Receipt Date/Time : " + receiptDateandTime.getAttribute("value"));
			}

			WebElement invoiceDate = driver.findElement(By.xpath("(//input [@type='date'])[1]"));
			String date = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			invoiceDate.sendKeys(date);

			WebElement invoiceNumber = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[2]"));
			invoiceNumber.sendKeys(UUID());

			WebElement logisticsCarrier = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[1]"));
			selectOptionByIndex(logisticsCarrier, 1);

			WebElement incoterm = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]"));
			if (incoterm.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Incoterm : " + incoterm.getAttribute("text"));
			}

			WebElement purchaseCategory = driver
					.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]//option[@value='1: 2']"));
			if (purchaseCategory.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Purchase Category : " + purchaseCategory.getAttribute("text"));
			}

			WebElement trackingNo = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[3]"));
			trackingNo.sendKeys("12345");
			Thread.sleep(500);

			WebElement noOfPackages = driver.findElement(By.xpath("(//input[@pattern='[0-9]*'])[1]"));
			noOfPackages.sendKeys("10");

			// Store Tile Drop-down Fields

			WebElement geDate = driver.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[2]"));
			String date1 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			geDate.sendKeys(date1);
			Thread.sleep(1000);

			WebElement gateEntryNo = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[4]"));
			gateEntryNo.sendKeys("2");

			WebElement paymentTerms = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[8]"));
			if (paymentTerms.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Payment Terms : " + paymentTerms.getAttribute("text"));
			}

			WebElement paymentDueDate = driver
					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[3]"));
			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			paymentDueDate.sendKeys(date2);
			Thread.sleep(1000);

			WebElement currency = driver.findElement(By.xpath("(//app-form-dyna-select[1]//div[1]//select)[9]"));
			if (currency.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Currency : " + currency.getAttribute("text"));
			}

			WebElement totalReceiptValue = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[9]"));
			if (totalReceiptValue.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Total Receipt Value : " + totalReceiptValue.getAttribute("value"));
			}

			WebElement additionalChargesTax = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[10]"));
			additionalChargesTax.sendKeys("100");

			WebElement additionalChargesNonTax = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[11]"));
			additionalChargesNonTax.sendKeys("50");

			WebElement remarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[1]"));
			remarks.sendKeys("Suresh : GRN Entry");
			Thread.sleep(1000);

			WebElement toBeCredit = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[12]"));
			if (toBeCredit.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");

			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("To Be Credit Value : " + toBeCredit.getAttribute("value"));
			}

			WebElement checkBox = driver.findElement(By.xpath("(//input[@type='checkbox'])[2]"));
			checkBox.click();

			WebElement moveToReceiveQtyButton = driver
					.findElement(By.xpath("//div//button[contains (text(), 'Move to Receive Qty')]"));
			moveToReceiveQtyButton.click();
			Thread.sleep(3000);

			String attribute = totalReceiptValue.getAttribute("value");
			WebElement invoiceValue = driver.findElement(
					By.xpath("(//app-form-text//div[1]//input [@pattern='^[+-]?((\\d+(\\.\\d*)?)|(\\.\\d+))$'])"));
			invoiceValue.sendKeys(attribute);
		} else {
			System.out.println("Purchase Category NOT MATCHING");
		}
	}

	@When("User create the GRN Request for Fully Received - \\(PO Order - NPM - Domestic)")
	public void user_create_the_grn_request_for_fully_received_po_order_npm_domestic() throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;

		WebElement receiptmodule = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		receiptmodule.click();

		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement addBtn = driver.findElement(By.xpath("(//button[@title='Add' and @type='button'])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(addBtn));
		addBtn.click();
		Thread.sleep(2000);

		// Store Tile Drop-down Fields

		WebElement storeTileDropdown = driver.findElement(By.xpath("//*[@id='headingOne']/h5/button"));
		wait.until(ExpectedConditions.elementToBeClickable(storeTileDropdown));
		j.executeScript("arguments[0].click();", storeTileDropdown);
		Thread.sleep(1000);

		WebElement branch = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[1]/app-form-dyna-select/div/select")));
		wait.until(ExpectedConditions.visibilityOf(branch));
		select(branch).selectByIndex(1);
		Thread.sleep(500);

		WebElement store = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[2]/app-form-dyna-select/div/select")));
		select(store).selectByIndex(0);
		Thread.sleep(500);

		WebElement orderType = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[3]/app-form-dyna-select/div/select")));
		select(orderType).selectByIndex(0);
		Thread.sleep(500);

		WebElement materialType = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[4]/app-form-dyna-select/div/select")));
		select(materialType).selectByIndex(2);
		Thread.sleep(500);

		WebElement vendorField = driver.findElement(By.xpath("(//input[@type='text' and @role='combobox'])[1]"));
		vendorField.sendKeys("A");
		Thread.sleep(500);

		List<WebElement> vendorList = driver.findElements(By.xpath("(//ul[@role='listbox'])[1]//li"));
		for (WebElement webElement : vendorList) {
			String list = webElement.getText();
			if (list.contains("A.K.INDUSTRIES")) {
				Thread.sleep(500);
				webElement.click();
				System.out.println(webElement);
				break;
			}
			Thread.sleep(1000);
		}

		WebElement multiPO = driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[6]/app-form-dyna-select/div/select"));
		select(multiPO);
		int lastIndex = getOptions(multiPO).size() - 1;
		selectOptionByIndex(multiPO, lastIndex);
		Thread.sleep(1000);

		// Master Fields
		/* /for "DOMESTIC"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("1: 2"));

		if (attribute2.equals("1: 2")) {

			WebElement receiptNumber = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[1]"));
			if (receiptNumber.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Receipt Number : " + receiptNumber.getAttribute("value"));
			}

			WebElement receiptDateandTime = driver
					.findElement(By.xpath("(//app-form-text//div//input [@type='text'])[2]"));
			if (receiptDateandTime.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Receipt Date/Time : " + receiptDateandTime.getAttribute("value"));
			}

			WebElement invoiceDate = driver.findElement(By.xpath("(//input [@type='date'])[1]"));
			String date = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			invoiceDate.sendKeys(date);

			WebElement invoiceNumber = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[2]"));
			invoiceNumber.sendKeys(UUID());

			WebElement logisticsCarrier = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[1]"));
			selectOptionByIndex(logisticsCarrier, 1);

			WebElement incoterm = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]"));
			if (incoterm.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Incoterm : " + incoterm.getAttribute("text"));
			}

			WebElement purchaseCategory = driver
					.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]//option[@value='1: 2']"));
			if (purchaseCategory.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Purchase Category : " + purchaseCategory.getAttribute("text"));
			}

			WebElement trackingNo = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[3]"));
			trackingNo.sendKeys("12345");
			Thread.sleep(500);

			WebElement noOfPackages = driver.findElement(By.xpath("(//input[@pattern='[0-9]*'])[1]"));
			noOfPackages.sendKeys("10");

			// Store Tile Drop-down Fields

			WebElement geDate = driver.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[2]"));
			String date1 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			geDate.sendKeys(date1);
			Thread.sleep(1000);

			WebElement gateEntryNo = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[4]"));
			gateEntryNo.sendKeys("2");

			WebElement paymentTerms = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[8]"));
			if (paymentTerms.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Payment Terms : " + paymentTerms.getAttribute("text"));
			}

			WebElement paymentDueDate = driver
					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[3]"));
			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			paymentDueDate.sendKeys(date2);
			Thread.sleep(1000);

			WebElement currency = driver.findElement(By.xpath("(//app-form-dyna-select[1]//div[1]//select)[9]"));
			if (currency.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Currency : " + currency.getAttribute("text"));
			}

			WebElement totalReceiptValue = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[9]"));
			if (totalReceiptValue.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Total Receipt Value : " + totalReceiptValue.getAttribute("value"));
			}

			WebElement additionalChargesTax = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[10]"));
			additionalChargesTax.sendKeys("100");

			WebElement additionalChargesNonTax = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[11]"));
			additionalChargesNonTax.sendKeys("50");

			WebElement remarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[1]"));
			remarks.sendKeys("Suresh : GRN Entry");
			Thread.sleep(1000);

			WebElement toBeCredit = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[12]"));
			if (toBeCredit.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");

			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("To Be Credit Value : " + toBeCredit.getAttribute("value"));
			}

			WebElement checkBox = driver.findElement(By.xpath("(//input[@type='checkbox'])[2]"));
			checkBox.click();

			WebElement moveToReceiveQtyButton = driver
					.findElement(By.xpath("//div//button[contains (text(), 'Move to Receive Qty')]"));
			moveToReceiveQtyButton.click();
			Thread.sleep(3000);

			String attribute = totalReceiptValue.getAttribute("value");
			WebElement invoiceValue = driver.findElement(
					By.xpath("(//app-form-text//div[1]//input [@pattern='^[+-]?((\\d+(\\.\\d*)?)|(\\.\\d+))$'])"));
			invoiceValue.sendKeys(attribute);
		} else {
			System.out.println("Purchase Category NOT MATCHING");
		}
	}

	@When("User create the GRN Request for Fully Received - \\(WEB Order - NPM - Domestic)")
	public void user_create_the_grn_request_for_fully_received_web_order_npm_domestic() throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;

		WebElement receiptmodule = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		receiptmodule.click();

		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement addBtn = driver.findElement(By.xpath("(//button[@title='Add' and @type='button'])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(addBtn));
		addBtn.click();
		Thread.sleep(2000);

		// Store Tile Drop-down Fields

		WebElement storeTileDropdown = driver.findElement(By.xpath("//*[@id='headingOne']/h5/button"));
		wait.until(ExpectedConditions.elementToBeClickable(storeTileDropdown));
		j.executeScript("arguments[0].click();", storeTileDropdown);
		Thread.sleep(1000);

		WebElement branch = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[1]/app-form-dyna-select/div/select")));
		wait.until(ExpectedConditions.visibilityOf(branch));
		select(branch).selectByIndex(1);
		Thread.sleep(500);

		WebElement store = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[2]/app-form-dyna-select/div/select")));
		select(store).selectByIndex(0);
		Thread.sleep(500);

		WebElement orderType = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[3]/app-form-dyna-select/div/select")));
		select(orderType).selectByIndex(1);
		Thread.sleep(500);

		WebElement materialType = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[4]/app-form-dyna-select/div/select")));
		select(materialType).selectByIndex(2);
		Thread.sleep(500);

		WebElement vendorField = driver.findElement(By.xpath("(//input[@type='text' and @role='combobox'])[1]"));
		vendorField.sendKeys("A");
		Thread.sleep(500);

		List<WebElement> vendorList = driver.findElements(By.xpath("(//ul[@role='listbox'])[1]//li"));
		for (WebElement webElement : vendorList) {
			String list = webElement.getText();
			if (list.contains("A.K.INDUSTRIES")) {
				Thread.sleep(500);
				webElement.click();
				System.out.println(webElement);
				break;
			}
			Thread.sleep(1000);
		}

		WebElement multiPO = driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[6]/app-form-dyna-select/div/select"));
		select(multiPO);
		int lastIndex = getOptions(multiPO).size() - 1;
		selectOptionByIndex(multiPO, lastIndex);
		Thread.sleep(1000);

		// Master Fields
		/* /for "DOMESTIC"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("1: 2"));

		if (attribute2.equals("1: 2")) {

			WebElement receiptNumber = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[1]"));
			if (receiptNumber.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Receipt Number : " + receiptNumber.getAttribute("value"));
			}

			WebElement receiptDateandTime = driver
					.findElement(By.xpath("(//app-form-text//div//input [@type='text'])[2]"));
			if (receiptDateandTime.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Receipt Date/Time : " + receiptDateandTime.getAttribute("value"));
			}

			WebElement invoiceDate = driver.findElement(By.xpath("(//input [@type='date'])[1]"));
			String date = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			invoiceDate.sendKeys(date);

			WebElement invoiceNumber = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[2]"));
			invoiceNumber.sendKeys(UUID());

			WebElement logisticsCarrier = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[1]"));
			selectOptionByIndex(logisticsCarrier, 1);

			WebElement incoterm = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]"));
			if (incoterm.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Incoterm : " + incoterm.getAttribute("text"));
			}

			WebElement purchaseCategory = driver
					.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]//option[@value='1: 2']"));
			if (purchaseCategory.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Purchase Category : " + purchaseCategory.getAttribute("text"));
			}

			WebElement trackingNo = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[3]"));
			trackingNo.sendKeys("12345");
			Thread.sleep(500);

			WebElement noOfPackages = driver.findElement(By.xpath("(//input[@pattern='[0-9]*'])[1]"));
			noOfPackages.sendKeys("10");

			// Store Tile Drop-down Fields

			WebElement geDate = driver.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[2]"));
			String date1 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			geDate.sendKeys(date1);
			Thread.sleep(1000);

			WebElement gateEntryNo = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[4]"));
			gateEntryNo.sendKeys("2");

			WebElement paymentTerms = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[8]"));
			if (paymentTerms.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Payment Terms : " + paymentTerms.getAttribute("text"));
			}

			WebElement paymentDueDate = driver
					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[3]"));
			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			paymentDueDate.sendKeys(date2);
			Thread.sleep(1000);

			WebElement currency = driver.findElement(By.xpath("(//app-form-dyna-select[1]//div[1]//select)[9]"));
			if (currency.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Currency : " + currency.getAttribute("text"));
			}

			WebElement totalReceiptValue = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[9]"));
			if (totalReceiptValue.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Total Receipt Value : " + totalReceiptValue.getAttribute("value"));
			}

			WebElement additionalChargesTax = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[10]"));
			additionalChargesTax.sendKeys("100");

			WebElement additionalChargesNonTax = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[11]"));
			additionalChargesNonTax.sendKeys("50");

			WebElement remarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[1]"));
			remarks.sendKeys("Suresh : GRN Entry");
			Thread.sleep(1000);

			WebElement toBeCredit = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[12]"));
			if (toBeCredit.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");

			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("To Be Credit Value : " + toBeCredit.getAttribute("value"));
			}

			WebElement checkBox = driver.findElement(By.xpath("(//input[@type='checkbox'])[2]"));
			checkBox.click();

			WebElement moveToReceiveQtyButton = driver
					.findElement(By.xpath("//div//button[contains (text(), 'Move to Receive Qty')]"));
			moveToReceiveQtyButton.click();
			Thread.sleep(3000);

			String attribute = totalReceiptValue.getAttribute("value");
			WebElement invoiceValue = driver.findElement(
					By.xpath("(//app-form-text//div[1]//input [@pattern='^[+-]?((\\d+(\\.\\d*)?)|(\\.\\d+))$'])"));
			invoiceValue.sendKeys(attribute);
		} else {
			System.out.println("Purchase Category NOT MATCHING");
		}
	}

	@When("User create the GRN Request for Fully Received - \\(PO Order - RM - Import)")
	public void user_create_the_grn_request_for_fully_received_po_order_rm_import() throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;

		WebElement receiptmodule = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		receiptmodule.click();

		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement addBtn = driver.findElement(By.xpath("(//button[@title='Add' and @type='button'])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(addBtn));
		addBtn.click();
		Thread.sleep(1000);

		// Store Tile Drop-down Fields

		WebElement storeTileDropdown = driver.findElement(By.xpath("//*[@id='headingOne']/h5/button"));
		wait.until(ExpectedConditions.elementToBeClickable(storeTileDropdown));
		j.executeScript("arguments[0].click();", storeTileDropdown);
		Thread.sleep(1000);

		WebElement branch = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[1]/app-form-dyna-select/div/select")));
		wait.until(ExpectedConditions.visibilityOf(branch));
		select(branch).selectByIndex(1);
		Thread.sleep(500);

		WebElement store = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[2]/app-form-dyna-select/div/select")));
		select(store).selectByIndex(0);
		Thread.sleep(500);

		WebElement orderType = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[3]/app-form-dyna-select/div/select")));
		select(orderType).selectByIndex(0);
		Thread.sleep(500);

		WebElement materialType = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[4]/app-form-dyna-select/div/select")));
		select(materialType).selectByIndex(0);
		Thread.sleep(500);

		WebElement vendorField = driver.findElement(By.xpath("(//input[@type='text' and @role='combobox'])[1]"));
		vendorField.sendKeys("DIG");
		Thread.sleep(500);

		List<WebElement> vendorList = driver.findElements(By.xpath("(//ul[@role='listbox'])[1]//li"));
		for (WebElement webElement : vendorList) {
			String list = webElement.getText();
			if (list.contains("Digi-key Electronics")) {
				Thread.sleep(500);
				webElement.click();
				System.out.println(webElement);
				break;
			}
			Thread.sleep(1000);
		}

		WebElement multiPO = driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[6]/app-form-dyna-select/div/select"));
		select(multiPO);
		int lastIndex = getOptions(multiPO).size() - 1;
		selectOptionByIndex(multiPO, lastIndex);
		Thread.sleep(1000);

		// Master Fields
		/* /for "IMPORT"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("0: 1"));

		if (attribute2.equals("0: 1")) {

			WebElement receiptNumber = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[1]"));
			if (receiptNumber.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Receipt Number : " + receiptNumber.getAttribute("value"));
			}

			WebElement receiptDateandTime = driver
					.findElement(By.xpath("(//app-form-text//div//input [@type='text'])[2]"));
			if (receiptDateandTime.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Receipt Date/Time : " + receiptDateandTime.getAttribute("value"));
			}

			WebElement invoiceDate = driver.findElement(By.xpath("(//input [@type='date'])[1]"));
			String date = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			invoiceDate.sendKeys(date);

			WebElement invoiceNumber = driver
					.findElement(By.xpath("(//input[@pattern=\"[a-zA-Z0-9*-{}@()/\\s]+\"])[2]"));
			invoiceNumber.sendKeys(UUID());

			WebElement logisticsCarrier = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[1]"));
			selectOptionByIndex(logisticsCarrier, 1);

			WebElement incoterm = driver
					.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]//option [@value='0: 1']"));
			if (incoterm.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Incoterm : " + incoterm.getAttribute("text"));
			}

			WebElement purchaseCategory = driver
					.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]//option[@value='0: 1']"));
			if (purchaseCategory.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Purchase Category : " + purchaseCategory.getAttribute("text"));
			}

			WebElement customerRequestNo = driver
					.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[3]"));
			customerRequestNo.sendKeys("1234");

			WebElement BOENo = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[4]"));
			BOENo.sendKeys("12345");

			WebElement BOEDate = driver.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[2]"));
			String date1 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			BOEDate.sendKeys(date1);
			Thread.sleep(1000);

			WebElement trackingNo = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[5]"));
			trackingNo.sendKeys("12345");

			WebElement noOfPackages = driver.findElement(By.xpath("(//input[@pattern='[0-9]*'])[1]"));
			noOfPackages.sendKeys("2");

			WebElement exchangeRate = driver
					.findElement(By.xpath("(//input[@tooltipevent='focus' and @type='text'])[8]"));
			exchangeRate.sendKeys("2");

			// Store Tile Drop-down Fields

			WebElement geDate = driver.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[3]"));
			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			geDate.sendKeys(date2);
			Thread.sleep(1000);

			WebElement gateEntryNo = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[6]"));
			gateEntryNo.sendKeys("2");

			WebElement paymentTerms = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[11]"));
			if (paymentTerms.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");

			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Payment Terms : " + paymentTerms.getAttribute("text"));
			}

			WebElement paymentDueDate = driver
					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[4]"));
			String date3 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			paymentDueDate.sendKeys(date3);
			Thread.sleep(1000);

			WebElement currency = driver.findElement(By.xpath("(//app-form-dyna-select[1]//div[1]//select)[9]"));
			if (currency.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Currency : " + currency.getAttribute("text"));
			}

			WebElement totalReceiptValue = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[12]"));
			if (totalReceiptValue.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");

			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Total Receipt Value : " + totalReceiptValue.getAttribute("value"));
			}

			WebElement additionalChargesTax = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[13]"));
			additionalChargesTax.sendKeys("50");

			WebElement additionalChargesNonTax = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[14]"));
			additionalChargesNonTax.sendKeys("50");

			WebElement remarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[1]"));
			remarks.sendKeys("Suresh : GRN Entry");
			Thread.sleep(1000);

			WebElement toBeCredit = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[15]"));
			if (toBeCredit.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");

			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("To Be Credit Value : " + toBeCredit.getAttribute("value"));
			}

			WebElement checkBox = driver.findElement(By.xpath("(//input[@type='checkbox'])[2]"));
			j.executeScript("arguments[0].click();", checkBox);

			WebElement moveToReceiveQtyButton = driver
					.findElement(By.xpath("//div//button[contains (text(), 'Move to Receive Qty')]"));
			moveToReceiveQtyButton.click();
			Thread.sleep(3000);

			String attribute = totalReceiptValue.getAttribute("value");
			WebElement invoiceValue = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[9]"));
			invoiceValue.sendKeys(attribute);
		} else {
			System.out.println("Purchase Category NOT MATCHING");
		}
	}

	@When("User create the GRN Request for Fully Received - \\(Testing & Services - Import)")
	public void user_create_the_grn_request_for_fully_received_testing_services_import() throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;

		WebElement receiptmodule = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		receiptmodule.click();

		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement addBtn = driver.findElement(By.xpath("(//button[@title='Add' and @type='button'])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(addBtn));
		addBtn.click();
		Thread.sleep(1000);

		// Store Tile Drop-down Fields

		WebElement storeTileDropdown = driver.findElement(By.xpath("//*[@id='headingOne']/h5/button"));
		wait.until(ExpectedConditions.elementToBeClickable(storeTileDropdown));
		j.executeScript("arguments[0].click();", storeTileDropdown);
		Thread.sleep(1000);

		WebElement branch = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[1]/app-form-dyna-select/div/select")));
		wait.until(ExpectedConditions.visibilityOf(branch));
		select(branch).selectByIndex(1);
		Thread.sleep(500);

		WebElement store = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[2]/app-form-dyna-select/div/select")));
		select(store).selectByIndex(0);
		Thread.sleep(500);

		WebElement orderType = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[3]/app-form-dyna-select/div/select")));
		select(orderType).selectByIndex(2);
		Thread.sleep(500);

		WebElement vendorField = driver.findElement(By.xpath("(//input[@type='text' and @role='combobox'])[1]"));
		vendorField.sendKeys("DIG");
		Thread.sleep(500);

		List<WebElement> vendorList = driver.findElements(By.xpath("(//ul[@role='listbox'])[1]//li"));
		for (WebElement webElement : vendorList) {
			String list = webElement.getText();
			if (list.contains("Digi-key Electronics")) {
				Thread.sleep(500);
				webElement.click();
				System.out.println(webElement);
				break;
			}
			Thread.sleep(1000);
		}

		WebElement multiPO = driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[5]/app-form-dyna-select/div/select"));
		select(multiPO);
		int lastIndex = getOptions(multiPO).size() - 1;
		selectOptionByIndex(multiPO, lastIndex);
		Thread.sleep(1000);

		// Master Fields
		/* /for "IMPORT"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("0: 1"));

		if (attribute2.equals("0: 1")) {

			WebElement receiptNumber = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[1]"));
			if (receiptNumber.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Receipt Number : " + receiptNumber.getAttribute("value"));
			}

			WebElement receiptDateandTime = driver
					.findElement(By.xpath("(//app-form-text//div//input [@type='text'])[2]"));
			if (receiptDateandTime.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Receipt Date/Time : " + receiptDateandTime.getAttribute("value"));
			}

			WebElement invoiceDate = driver.findElement(By.xpath("(//input [@type='date'])[1]"));
			String date = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			invoiceDate.sendKeys(date);

			WebElement invoiceNumber = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[2]"));
			invoiceNumber.sendKeys(UUID());

			WebElement logisticsCarrier = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[1]"));
			selectOptionByIndex(logisticsCarrier, 1);

			WebElement incoterm = driver
					.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]//option [@value='0: 1']"));
			if (incoterm.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Incoterm : " + incoterm.getAttribute("text"));
			}

			WebElement purchaseCategory = driver
					.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]//option[@value='0: 1']"));
			if (purchaseCategory.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Purchase Category : " + purchaseCategory.getAttribute("text"));
			}

			WebElement customerRequestNo = driver
					.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[3]"));
			customerRequestNo.sendKeys("1234");

			WebElement BOENo = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[4]"));
			BOENo.sendKeys("12345");

			WebElement BOEDate = driver.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[2]"));
			String date1 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			BOEDate.sendKeys(date1);
			Thread.sleep(1000);

			WebElement trackingNo = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[5]"));
			trackingNo.sendKeys("12345");

			WebElement noOfPackages = driver.findElement(By.xpath("(//input[@pattern='[0-9]*'])[1]"));
			noOfPackages.sendKeys("2");

			WebElement exchangeRate = driver
					.findElement(By.xpath("(//input[@tooltipevent='focus' and @type='text'])[8]"));
			exchangeRate.sendKeys("2");

			// Store Tile Drop-down Fields

			WebElement geDate = driver.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[3]"));
			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			geDate.sendKeys(date2);
			Thread.sleep(1000);

			WebElement gateEntryNo = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[6]"));
			gateEntryNo.sendKeys("2");

			WebElement paymentTerms = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[11]"));
			if (paymentTerms.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");

			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Payment Terms : " + paymentTerms.getAttribute("text"));
			}

			WebElement paymentDueDate = driver
					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[4]"));
			String date3 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			paymentDueDate.sendKeys(date3);
			Thread.sleep(1000);

			WebElement currency = driver.findElement(By.xpath("(//app-form-dyna-select[1]//div[1]//select)[8]"));
			if (currency.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Currency : " + currency.getAttribute("text"));
			}

			WebElement totalReceiptValue = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[12]"));
			if (totalReceiptValue.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");

			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Total Receipt Value : " + totalReceiptValue.getAttribute("value"));
			}

			WebElement additionalChargesTax = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[13]"));
			additionalChargesTax.sendKeys("50");

			WebElement additionalChargesNonTax = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[14]"));
			additionalChargesNonTax.sendKeys("50");

			WebElement remarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[1]"));
			remarks.sendKeys("Suresh : GRN Entry");
			Thread.sleep(1000);

			WebElement toBeCredit = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[15]"));
			if (toBeCredit.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");

			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("To Be Credit Value : " + toBeCredit.getAttribute("value"));
			}

			WebElement checkBox = driver.findElement(By.xpath("(//input[@type='checkbox'])[2]"));
			j.executeScript("arguments[0].click();", checkBox);

			WebElement moveToReceiveQtyButton = driver
					.findElement(By.xpath("//div//button[contains (text(), 'Move to Receive Qty')]"));
			moveToReceiveQtyButton.click();
			Thread.sleep(3000);

			String attribute = totalReceiptValue.getAttribute("value");
			WebElement invoiceValue = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[9]"));
			invoiceValue.sendKeys(attribute);
		} else {
			System.out.println("Purchase Category NOT MATCHING");
		}
	}

	@When("User create the GRN Request for Fully Received - \\(WEB Order - RM - Import)")
	public void user_create_the_grn_request_for_fully_received_web_order_rm_import() throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;

		WebElement receiptmodule = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		receiptmodule.click();

		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement addBtn = driver.findElement(By.xpath("(//button[@title='Add' and @type='button'])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(addBtn));
		addBtn.click();
		Thread.sleep(1000);

		// Store Tile Drop-down Fields

		WebElement storeTileDropdown = driver.findElement(By.xpath("//*[@id='headingOne']/h5/button"));
		wait.until(ExpectedConditions.elementToBeClickable(storeTileDropdown));
		j.executeScript("arguments[0].click();", storeTileDropdown);
		Thread.sleep(1000);

		WebElement branch = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[1]/app-form-dyna-select/div/select")));
		wait.until(ExpectedConditions.visibilityOf(branch));
		select(branch).selectByIndex(1);
		Thread.sleep(500);

		WebElement store = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[2]/app-form-dyna-select/div/select")));
		select(store).selectByIndex(0);
		Thread.sleep(500);

		WebElement orderType = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[3]/app-form-dyna-select/div/select")));
		select(orderType).selectByIndex(1);
		Thread.sleep(500);

		WebElement materialType = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[4]/app-form-dyna-select/div/select")));
		select(materialType).selectByIndex(0);
		Thread.sleep(500);

		WebElement vendorField = driver.findElement(By.xpath("(//input[@type='text' and @role='combobox'])[1]"));
		vendorField.sendKeys("DIG");
		Thread.sleep(500);

		List<WebElement> vendorList = driver.findElements(By.xpath("(//ul[@role='listbox'])[1]//li"));
		for (WebElement webElement : vendorList) {
			String list = webElement.getText();
			if (list.contains("Digi-key Electronics")) {
				Thread.sleep(500);
				webElement.click();
				System.out.println(webElement);
				break;
			}
			Thread.sleep(1000);
		}

		WebElement multiPO = driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[6]/app-form-dyna-select/div/select"));
		select(multiPO);
		int lastIndex = getOptions(multiPO).size() - 1;
		selectOptionByIndex(multiPO, lastIndex);
		Thread.sleep(1000);

		// Master Fields
		/* /for "IMPORT"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("0: 1"));

		if (attribute2.equals("0: 1")) {

			WebElement receiptNumber = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[1]"));
			if (receiptNumber.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Receipt Number : " + receiptNumber.getAttribute("value"));
			}

			WebElement receiptDateandTime = driver
					.findElement(By.xpath("(//app-form-text//div//input [@type='text'])[2]"));
			if (receiptDateandTime.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Receipt Date/Time : " + receiptDateandTime.getAttribute("value"));
			}

			WebElement invoiceDate = driver.findElement(By.xpath("(//input [@type='date'])[1]"));
			String date = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			invoiceDate.sendKeys(date);

			WebElement invoiceNumber = driver
					.findElement(By.xpath("(//input[@pattern=\"[a-zA-Z0-9*-{}@()/\\s]+\"])[2]"));
			invoiceNumber.sendKeys(UUID());

			WebElement logisticsCarrier = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[1]"));
			selectOptionByIndex(logisticsCarrier, 1);

			WebElement incoterm = driver
					.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]//option [@value='0: 1']"));
			if (incoterm.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Incoterm : " + incoterm.getAttribute("text"));
			}

			WebElement purchaseCategory = driver
					.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]//option[@value='0: 1']"));
			if (purchaseCategory.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Purchase Category : " + purchaseCategory.getAttribute("text"));
			}

			WebElement customerRequestNo = driver
					.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[3]"));
			customerRequestNo.sendKeys("1234");

			WebElement BOENo = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[4]"));
			BOENo.sendKeys("12345");

			WebElement BOEDate = driver.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[2]"));
			String date1 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			BOEDate.sendKeys(date1);
			Thread.sleep(1000);

			WebElement trackingNo = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[5]"));
			trackingNo.sendKeys("12345");

			WebElement noOfPackages = driver.findElement(By.xpath("(//input[@pattern='[0-9]*'])[1]"));
			noOfPackages.sendKeys("2");

			WebElement exchangeRate = driver
					.findElement(By.xpath("(//input[@tooltipevent='focus' and @type='text'])[8]"));
			exchangeRate.sendKeys("2");

			// Store Tile Drop-down Fields

			WebElement geDate = driver.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[3]"));
			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			geDate.sendKeys(date2);
			Thread.sleep(1000);

			WebElement gateEntryNo = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[6]"));
			gateEntryNo.sendKeys("2");

			WebElement paymentTerms = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[11]"));
			if (paymentTerms.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");

			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Payment Terms : " + paymentTerms.getAttribute("text"));
			}

			WebElement paymentDueDate = driver
					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[4]"));
			String date3 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			paymentDueDate.sendKeys(date3);
			Thread.sleep(1000);

			WebElement currency = driver.findElement(By.xpath("(//app-form-dyna-select[1]//div[1]//select)[9]"));
			if (currency.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Currency : " + currency.getAttribute("text"));
			}

			WebElement totalReceiptValue = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[12]"));
			if (totalReceiptValue.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");

			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Total Receipt Value : " + totalReceiptValue.getAttribute("value"));
			}

			WebElement additionalChargesTax = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[13]"));
			additionalChargesTax.sendKeys("50");

			WebElement additionalChargesNonTax = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[14]"));
			additionalChargesNonTax.sendKeys("50");

			WebElement remarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[1]"));
			remarks.sendKeys("Suresh : GRN Entry");
			Thread.sleep(1000);

			WebElement toBeCredit = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[15]"));
			if (toBeCredit.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");

			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("To Be Credit Value : " + toBeCredit.getAttribute("value"));
			}

			WebElement checkBox = driver.findElement(By.xpath("(//input[@type='checkbox'])[2]"));
			j.executeScript("arguments[0].click();", checkBox);

			WebElement moveToReceiveQtyButton = driver
					.findElement(By.xpath("//div//button[contains (text(), 'Move to Receive Qty')]"));
			moveToReceiveQtyButton.click();
			Thread.sleep(3000);

			String attribute = totalReceiptValue.getAttribute("value");
			WebElement invoiceValue = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[9]"));
			invoiceValue.sendKeys(attribute);
		} else {
			System.out.println("Purchase Category NOT MATCHING");
		}
	}

	@When("User create the GRN Request for Fully Received - \\(PO Order - FG - Import)")
	public void user_create_the_grn_request_for_fully_received_po_order_fg_import() throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;

		WebElement receiptmodule = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		receiptmodule.click();

		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement addBtn = driver.findElement(By.xpath("(//button[@title='Add' and @type='button'])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(addBtn));
		addBtn.click();
		Thread.sleep(1000);

		// Store Tile Drop-down Fields

		WebElement storeTileDropdown = driver.findElement(By.xpath("//*[@id='headingOne']/h5/button"));
		wait.until(ExpectedConditions.elementToBeClickable(storeTileDropdown));
		j.executeScript("arguments[0].click();", storeTileDropdown);
		Thread.sleep(1000);

		WebElement branch = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[1]/app-form-dyna-select/div/select")));
		wait.until(ExpectedConditions.visibilityOf(branch));
		select(branch).selectByIndex(1);
		Thread.sleep(500);

		WebElement store = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[2]/app-form-dyna-select/div/select")));
		select(store).selectByIndex(0);
		Thread.sleep(500);

		WebElement orderType = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[3]/app-form-dyna-select/div/select")));
		select(orderType).selectByIndex(0);
		Thread.sleep(500);

		WebElement materialType = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[4]/app-form-dyna-select/div/select")));
		select(materialType).selectByIndex(1);
		Thread.sleep(500);

		WebElement vendorField = driver.findElement(By.xpath("(//input[@type='text' and @role='combobox'])[1]"));
		vendorField.sendKeys("DIG");
		Thread.sleep(500);

		List<WebElement> vendorList = driver.findElements(By.xpath("(//ul[@role='listbox'])[1]//li"));
		for (WebElement webElement : vendorList) {
			String list = webElement.getText();
			if (list.contains("Digi-key Electronics")) {
				Thread.sleep(500);
				webElement.click();
				System.out.println(webElement);
				break;
			}
			Thread.sleep(1000);
		}

		WebElement multiPO = driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[6]/app-form-dyna-select/div/select"));
		select(multiPO);
		int lastIndex = getOptions(multiPO).size() - 1;
		selectOptionByIndex(multiPO, lastIndex);
		Thread.sleep(1000);

		// Master Fields
		/* /for "IMPORT"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("0: 1"));

		if (attribute2.equals("0: 1")) {

			WebElement receiptNumber = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[1]"));
			if (receiptNumber.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Receipt Number : " + receiptNumber.getAttribute("value"));
			}

			WebElement receiptDateandTime = driver
					.findElement(By.xpath("(//app-form-text//div//input [@type='text'])[2]"));
			if (receiptDateandTime.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Receipt Date/Time : " + receiptDateandTime.getAttribute("value"));
			}

			WebElement invoiceDate = driver.findElement(By.xpath("(//input [@type='date'])[1]"));
			String date = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			invoiceDate.sendKeys(date);

			WebElement invoiceNumber = driver
					.findElement(By.xpath("(//input[@pattern=\"[a-zA-Z0-9*-{}@()/\\s]+\"])[2]"));
			invoiceNumber.sendKeys(UUID());

			WebElement logisticsCarrier = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[1]"));
			selectOptionByIndex(logisticsCarrier, 1);

			WebElement incoterm = driver
					.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]//option [@value='0: 1']"));
			if (incoterm.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Incoterm : " + incoterm.getAttribute("text"));
			}

			WebElement purchaseCategory = driver
					.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]//option[@value='0: 1']"));
			if (purchaseCategory.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Purchase Category : " + purchaseCategory.getAttribute("text"));
			}

			WebElement customerRequestNo = driver
					.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[3]"));
			customerRequestNo.sendKeys("1234");

			WebElement BOENo = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[4]"));
			BOENo.sendKeys("12345");

			WebElement BOEDate = driver.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[2]"));
			String date1 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			BOEDate.sendKeys(date1);
			Thread.sleep(1000);

			WebElement trackingNo = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[5]"));
			trackingNo.sendKeys("12345");

			WebElement noOfPackages = driver.findElement(By.xpath("(//input[@pattern='[0-9]*'])[1]"));
			noOfPackages.sendKeys("2");

			WebElement exchangeRate = driver
					.findElement(By.xpath("(//input[@tooltipevent='focus' and @type='text'])[8]"));
			exchangeRate.sendKeys("2");

			// Store Tile Drop-down Fields

			WebElement geDate = driver.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[3]"));
			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			geDate.sendKeys(date2);
			Thread.sleep(1000);

			WebElement gateEntryNo = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[6]"));
			gateEntryNo.sendKeys("2");

			WebElement paymentTerms = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[11]"));
			if (paymentTerms.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");

			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Payment Terms : " + paymentTerms.getAttribute("text"));
			}

			WebElement paymentDueDate = driver
					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[4]"));
			String date3 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			paymentDueDate.sendKeys(date3);
			Thread.sleep(1000);

			WebElement currency = driver.findElement(By.xpath("(//app-form-dyna-select[1]//div[1]//select)[9]"));
			if (currency.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Currency : " + currency.getAttribute("text"));
			}

			WebElement totalReceiptValue = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[12]"));
			if (totalReceiptValue.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");

			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Total Receipt Value : " + totalReceiptValue.getAttribute("value"));
			}

			WebElement additionalChargesTax = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[13]"));
			additionalChargesTax.sendKeys("50");

			WebElement additionalChargesNonTax = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[14]"));
			additionalChargesNonTax.sendKeys("50");

			WebElement remarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[1]"));
			remarks.sendKeys("Suresh : GRN Entry");
			Thread.sleep(1000);

			WebElement toBeCredit = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[15]"));
			if (toBeCredit.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");

			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("To Be Credit Value : " + toBeCredit.getAttribute("value"));
			}

			WebElement checkBox = driver.findElement(By.xpath("(//input[@type='checkbox'])[2]"));
			j.executeScript("arguments[0].click();", checkBox);

			WebElement moveToReceiveQtyButton = driver
					.findElement(By.xpath("//div//button[contains (text(), 'Move to Receive Qty')]"));
			moveToReceiveQtyButton.click();
			Thread.sleep(3000);

			String attribute = totalReceiptValue.getAttribute("value");
			WebElement invoiceValue = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[9]"));
			invoiceValue.sendKeys(attribute);
		} else {
			System.out.println("Purchase Category NOT MATCHING");
		}
	}

	@When("User create the GRN Request for Fully Received - \\(WEB Order - FG - Import)")
	public void user_create_the_grn_request_for_fully_received_web_order_fg_import() throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;

		WebElement receiptmodule = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		receiptmodule.click();

		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement addBtn = driver.findElement(By.xpath("(//button[@title='Add' and @type='button'])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(addBtn));
		addBtn.click();
		Thread.sleep(1000);

		// Store Tile Drop-down Fields

		WebElement storeTileDropdown = driver.findElement(By.xpath("//*[@id='headingOne']/h5/button"));
		wait.until(ExpectedConditions.elementToBeClickable(storeTileDropdown));
		j.executeScript("arguments[0].click();", storeTileDropdown);
		Thread.sleep(1000);

		WebElement branch = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[1]/app-form-dyna-select/div/select")));
		wait.until(ExpectedConditions.visibilityOf(branch));
		select(branch).selectByIndex(1);
		Thread.sleep(500);

		WebElement store = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[2]/app-form-dyna-select/div/select")));
		select(store).selectByIndex(0);
		Thread.sleep(500);

		WebElement orderType = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[3]/app-form-dyna-select/div/select")));
		select(orderType).selectByIndex(1);
		Thread.sleep(500);

		WebElement materialType = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[4]/app-form-dyna-select/div/select")));
		select(materialType).selectByIndex(1);
		Thread.sleep(500);

		WebElement vendorField = driver.findElement(By.xpath("(//input[@type='text' and @role='combobox'])[1]"));
		vendorField.sendKeys("DIG");
		Thread.sleep(500);

		List<WebElement> vendorList = driver.findElements(By.xpath("(//ul[@role='listbox'])[1]//li"));
		for (WebElement webElement : vendorList) {
			String list = webElement.getText();
			if (list.contains("Digi-key Electronics")) {
				Thread.sleep(500);
				webElement.click();
				System.out.println(webElement);
				break;
			}
			Thread.sleep(1000);
		}

		WebElement multiPO = driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[6]/app-form-dyna-select/div/select"));
		select(multiPO);
		int lastIndex = getOptions(multiPO).size() - 1;
		selectOptionByIndex(multiPO, lastIndex);
		Thread.sleep(1000);

		// Master Fields
		/* /for "IMPORT"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("0: 1"));

		if (attribute2.equals("0: 1")) {

			WebElement receiptNumber = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[1]"));
			if (receiptNumber.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Receipt Number : " + receiptNumber.getAttribute("value"));
			}

			WebElement receiptDateandTime = driver
					.findElement(By.xpath("(//app-form-text//div//input [@type='text'])[2]"));
			if (receiptDateandTime.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Receipt Date/Time : " + receiptDateandTime.getAttribute("value"));
			}

			WebElement invoiceDate = driver.findElement(By.xpath("(//input [@type='date'])[1]"));
			String date = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			invoiceDate.sendKeys(date);

			WebElement invoiceNumber = driver
					.findElement(By.xpath("(//input[@pattern=\"[a-zA-Z0-9*-{}@()/\\s]+\"])[2]"));
			invoiceNumber.sendKeys(UUID());

			WebElement logisticsCarrier = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[1]"));
			selectOptionByIndex(logisticsCarrier, 1);

			WebElement incoterm = driver
					.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]//option [@value='0: 1']"));
			if (incoterm.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Incoterm : " + incoterm.getAttribute("text"));
			}

			WebElement purchaseCategory = driver
					.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]//option[@value='0: 1']"));
			if (purchaseCategory.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Purchase Category : " + purchaseCategory.getAttribute("text"));
			}

			WebElement customerRequestNo = driver
					.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[3]"));
			customerRequestNo.sendKeys("1234");

			WebElement BOENo = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[4]"));
			BOENo.sendKeys("12345");

			WebElement BOEDate = driver.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[2]"));
			String date1 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			BOEDate.sendKeys(date1);
			Thread.sleep(1000);

			WebElement trackingNo = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[5]"));
			trackingNo.sendKeys("12345");

			WebElement noOfPackages = driver.findElement(By.xpath("(//input[@pattern='[0-9]*'])[1]"));
			noOfPackages.sendKeys("2");

			WebElement exchangeRate = driver
					.findElement(By.xpath("(//input[@tooltipevent='focus' and @type='text'])[8]"));
			exchangeRate.sendKeys("2");

			// Store Tile Drop-down Fields

			WebElement geDate = driver.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[3]"));
			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			geDate.sendKeys(date2);
			Thread.sleep(1000);

			WebElement gateEntryNo = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[6]"));
			gateEntryNo.sendKeys("2");

			WebElement paymentTerms = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[11]"));
			if (paymentTerms.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");

			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Payment Terms : " + paymentTerms.getAttribute("text"));
			}

			WebElement paymentDueDate = driver
					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[4]"));
			String date3 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			paymentDueDate.sendKeys(date3);
			Thread.sleep(1000);

			WebElement currency = driver.findElement(By.xpath("(//app-form-dyna-select[1]//div[1]//select)[9]"));
			if (currency.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Currency : " + currency.getAttribute("text"));
			}

			WebElement totalReceiptValue = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[12]"));
			if (totalReceiptValue.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");

			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Total Receipt Value : " + totalReceiptValue.getAttribute("value"));
			}

			WebElement additionalChargesTax = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[13]"));
			additionalChargesTax.sendKeys("50");

			WebElement additionalChargesNonTax = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[14]"));
			additionalChargesNonTax.sendKeys("50");

			WebElement remarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[1]"));
			remarks.sendKeys("Suresh : GRN Entry");
			Thread.sleep(1000);

			WebElement toBeCredit = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[15]"));
			if (toBeCredit.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");

			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("To Be Credit Value : " + toBeCredit.getAttribute("value"));
			}

			WebElement checkBox = driver.findElement(By.xpath("(//input[@type='checkbox'])[2]"));
			j.executeScript("arguments[0].click();", checkBox);

			WebElement moveToReceiveQtyButton = driver
					.findElement(By.xpath("//div//button[contains (text(), 'Move to Receive Qty')]"));
			moveToReceiveQtyButton.click();
			Thread.sleep(3000);

			String attribute = totalReceiptValue.getAttribute("value");
			WebElement invoiceValue = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[9]"));
			invoiceValue.sendKeys(attribute);
		} else {
			System.out.println("Purchase Category NOT MATCHING");
		}
	}

	@When("User create the GRN Request for Fully Received - \\(PO Order - NPM - Import)")
	public void user_create_the_grn_request_for_fully_received_po_order_npm_import() throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;

		WebElement receiptmodule = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		receiptmodule.click();

		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement addBtn = driver.findElement(By.xpath("(//button[@title='Add' and @type='button'])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(addBtn));
		addBtn.click();
		Thread.sleep(1000);

		// Store Tile Drop-down Fields

		WebElement storeTileDropdown = driver.findElement(By.xpath("//*[@id='headingOne']/h5/button"));
		wait.until(ExpectedConditions.elementToBeClickable(storeTileDropdown));
		j.executeScript("arguments[0].click();", storeTileDropdown);
		Thread.sleep(1000);

		WebElement branch = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[1]/app-form-dyna-select/div/select")));
		wait.until(ExpectedConditions.visibilityOf(branch));
		select(branch).selectByIndex(1);
		Thread.sleep(500);

		WebElement store = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[2]/app-form-dyna-select/div/select")));
		select(store).selectByIndex(0);
		Thread.sleep(500);

		WebElement orderType = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[3]/app-form-dyna-select/div/select")));
		select(orderType).selectByIndex(0);
		Thread.sleep(500);

		WebElement materialType = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[4]/app-form-dyna-select/div/select")));
		select(materialType).selectByIndex(2);
		Thread.sleep(500);

		WebElement vendorField = driver.findElement(By.xpath("(//input[@type='text' and @role='combobox'])[1]"));
		vendorField.sendKeys("DIG");
		Thread.sleep(500);

		List<WebElement> vendorList = driver.findElements(By.xpath("(//ul[@role='listbox'])[1]//li"));
		for (WebElement webElement : vendorList) {
			String list = webElement.getText();
			if (list.contains("Digi-key Electronics")) {
				Thread.sleep(500);
				webElement.click();
				System.out.println(webElement);
				break;
			}
			Thread.sleep(1000);
		}

		WebElement multiPO = driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[6]/app-form-dyna-select/div/select"));
		select(multiPO);
		int lastIndex = getOptions(multiPO).size() - 1;
		selectOptionByIndex(multiPO, lastIndex);
		Thread.sleep(1000);

		// Master Fields
		/* /for "IMPORT"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("0: 1"));

		if (attribute2.equals("0: 1")) {

			WebElement receiptNumber = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[1]"));
			if (receiptNumber.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Receipt Number : " + receiptNumber.getAttribute("value"));
			}

			WebElement receiptDateandTime = driver
					.findElement(By.xpath("(//app-form-text//div//input [@type='text'])[2]"));
			if (receiptDateandTime.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Receipt Date/Time : " + receiptDateandTime.getAttribute("value"));
			}

			WebElement invoiceDate = driver.findElement(By.xpath("(//input [@type='date'])[1]"));
			String date = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			invoiceDate.sendKeys(date);

			WebElement invoiceNumber = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[2]"));
			invoiceNumber.sendKeys(UUID());

			WebElement logisticsCarrier = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[1]"));
			selectOptionByIndex(logisticsCarrier, 1);

			WebElement incoterm = driver
					.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]//option [@value='0: 1']"));
			if (incoterm.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Incoterm : " + incoterm.getAttribute("text"));
			}

			WebElement purchaseCategory = driver
					.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]//option[@value='0: 1']"));
			if (purchaseCategory.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Purchase Category : " + purchaseCategory.getAttribute("text"));
			}

			WebElement customerRequestNo = driver
					.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[3]"));
			customerRequestNo.sendKeys("1234");

			WebElement BOENo = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[4]"));
			BOENo.sendKeys("12345");

			WebElement BOEDate = driver.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[2]"));
			String date1 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			BOEDate.sendKeys(date1);
			Thread.sleep(1000);

			WebElement trackingNo = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[5]"));
			trackingNo.sendKeys("12345");

			WebElement noOfPackages = driver.findElement(By.xpath("(//input[@pattern='[0-9]*'])[1]"));
			noOfPackages.sendKeys("2");

			WebElement exchangeRate = driver
					.findElement(By.xpath("(//input[@tooltipevent='focus' and @type='text'])[8]"));
			exchangeRate.sendKeys("2");

			// Store Tile Drop-down Fields

			WebElement geDate = driver.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[3]"));
			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			geDate.sendKeys(date2);
			Thread.sleep(1000);

			WebElement gateEntryNo = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[6]"));
			gateEntryNo.sendKeys("2");

			WebElement paymentTerms = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[11]"));
			if (paymentTerms.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");

			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Payment Terms : " + paymentTerms.getAttribute("text"));
			}

			WebElement paymentDueDate = driver
					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[4]"));
			String date3 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			paymentDueDate.sendKeys(date3);
			Thread.sleep(1000);

			WebElement currency = driver.findElement(By.xpath("(//app-form-dyna-select[1]//div[1]//select)[9]"));
			if (currency.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Currency : " + currency.getAttribute("text"));
			}

			WebElement totalReceiptValue = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[12]"));
			if (totalReceiptValue.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");

			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Total Receipt Value : " + totalReceiptValue.getAttribute("value"));
			}

			WebElement additionalChargesTax = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[13]"));
			additionalChargesTax.sendKeys("50");

			WebElement additionalChargesNonTax = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[14]"));
			additionalChargesNonTax.sendKeys("50");

			WebElement remarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[1]"));
			remarks.sendKeys("Suresh : GRN Entry");
			Thread.sleep(1000);

			WebElement toBeCredit = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[15]"));
			if (toBeCredit.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");

			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("To Be Credit Value : " + toBeCredit.getAttribute("value"));
			}

			WebElement checkBox = driver.findElement(By.xpath("(//input[@type='checkbox'])[2]"));
			j.executeScript("arguments[0].click();", checkBox);

			WebElement moveToReceiveQtyButton = driver
					.findElement(By.xpath("//div//button[contains (text(), 'Move to Receive Qty')]"));
			moveToReceiveQtyButton.click();
			Thread.sleep(3000);

			String attribute = totalReceiptValue.getAttribute("value");
			WebElement invoiceValue = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[9]"));
			invoiceValue.sendKeys(attribute);
		} else {
			System.out.println("Purchase Category NOT MATCHING");
		}
	}

	@When("User create the GRN Request for Fully Received - \\(WEB Order - NPM - Import)")
	public void user_create_the_grn_request_for_fully_received_web_order_npm_import() throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;

		WebElement receiptmodule = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		receiptmodule.click();

		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement addBtn = driver.findElement(By.xpath("(//button[@title='Add' and @type='button'])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(addBtn));
		addBtn.click();
		Thread.sleep(1000);

		// Store Tile Drop-down Fields

		WebElement storeTileDropdown = driver.findElement(By.xpath("//*[@id='headingOne']/h5/button"));
		wait.until(ExpectedConditions.elementToBeClickable(storeTileDropdown));
		j.executeScript("arguments[0].click();", storeTileDropdown);
		Thread.sleep(1000);

		WebElement branch = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[1]/app-form-dyna-select/div/select")));
		wait.until(ExpectedConditions.visibilityOf(branch));
		select(branch).selectByIndex(1);
		Thread.sleep(500);

		WebElement store = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[2]/app-form-dyna-select/div/select")));
		select(store).selectByIndex(0);
		Thread.sleep(500);

		WebElement orderType = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[3]/app-form-dyna-select/div/select")));
		select(orderType).selectByIndex(1);
		Thread.sleep(500);

		WebElement materialType = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[4]/app-form-dyna-select/div/select")));
		select(materialType).selectByIndex(2);
		Thread.sleep(500);

		WebElement vendorField = driver.findElement(By.xpath("(//input[@type='text' and @role='combobox'])[1]"));
		vendorField.sendKeys("DIG");
		Thread.sleep(500);

		List<WebElement> vendorList = driver.findElements(By.xpath("(//ul[@role='listbox'])[1]//li"));
		for (WebElement webElement : vendorList) {
			String list = webElement.getText();
			if (list.contains("Digi-key Electronics")) {
				Thread.sleep(500);
				webElement.click();
				System.out.println(webElement);
				break;
			}
			Thread.sleep(1000);
		}

		WebElement multiPO = driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[6]/app-form-dyna-select/div/select"));
		select(multiPO);
		int lastIndex = getOptions(multiPO).size() - 1;
		selectOptionByIndex(multiPO, lastIndex);
		Thread.sleep(1000);

		// Master Fields
		/* /for "IMPORT"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("0: 1"));

		if (attribute2.equals("0: 1")) {

			WebElement receiptNumber = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[1]"));
			if (receiptNumber.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Receipt Number : " + receiptNumber.getAttribute("value"));
			}

			WebElement receiptDateandTime = driver
					.findElement(By.xpath("(//app-form-text//div//input [@type='text'])[2]"));
			if (receiptDateandTime.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Receipt Date/Time : " + receiptDateandTime.getAttribute("value"));
			}

			WebElement invoiceDate = driver.findElement(By.xpath("(//input [@type='date'])[1]"));
			String date = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			invoiceDate.sendKeys(date);

			WebElement invoiceNumber = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[2]"));
			invoiceNumber.sendKeys(UUID());

			WebElement logisticsCarrier = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[1]"));
			selectOptionByIndex(logisticsCarrier, 1);

			WebElement incoterm = driver
					.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]//option [@value='0: 1']"));
			if (incoterm.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Incoterm : " + incoterm.getAttribute("text"));
			}

			WebElement purchaseCategory = driver
					.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]//option[@value='0: 1']"));
			if (purchaseCategory.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Purchase Category : " + purchaseCategory.getAttribute("text"));
			}

			WebElement customerRequestNo = driver
					.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[3]"));
			customerRequestNo.sendKeys("1234");

			WebElement BOENo = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[4]"));
			BOENo.sendKeys("12345");

			WebElement BOEDate = driver.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[2]"));
			String date1 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			BOEDate.sendKeys(date1);
			Thread.sleep(1000);

			WebElement trackingNo = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[5]"));
			trackingNo.sendKeys("12345");

			WebElement noOfPackages = driver.findElement(By.xpath("(//input[@pattern='[0-9]*'])[1]"));
			noOfPackages.sendKeys("2");

			WebElement exchangeRate = driver
					.findElement(By.xpath("(//input[@tooltipevent='focus' and @type='text'])[8]"));
			exchangeRate.sendKeys("2");

			// Store Tile Drop-down Fields

			WebElement geDate = driver.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[3]"));
			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			geDate.sendKeys(date2);
			Thread.sleep(1000);

			WebElement gateEntryNo = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[6]"));
			gateEntryNo.sendKeys("2");

			WebElement paymentTerms = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[11]"));
			if (paymentTerms.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");

			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Payment Terms : " + paymentTerms.getAttribute("text"));
			}

			WebElement paymentDueDate = driver
					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[4]"));
			String date3 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			paymentDueDate.sendKeys(date3);
			Thread.sleep(1000);

			WebElement currency = driver.findElement(By.xpath("(//app-form-dyna-select[1]//div[1]//select)[9]"));
			if (currency.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Currency : " + currency.getAttribute("text"));
			}

			WebElement totalReceiptValue = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[12]"));
			if (totalReceiptValue.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");

			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Total Receipt Value : " + totalReceiptValue.getAttribute("value"));
			}

			WebElement additionalChargesTax = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[13]"));
			additionalChargesTax.sendKeys("50");

			WebElement additionalChargesNonTax = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[14]"));
			additionalChargesNonTax.sendKeys("50");

			WebElement remarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[1]"));
			remarks.sendKeys("Suresh : GRN Entry");
			Thread.sleep(1000);

			WebElement toBeCredit = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[15]"));
			if (toBeCredit.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");

			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("To Be Credit Value : " + toBeCredit.getAttribute("value"));
			}

			WebElement checkBox = driver.findElement(By.xpath("(//input[@type='checkbox'])[2]"));
			j.executeScript("arguments[0].click();", checkBox);

			WebElement moveToReceiveQtyButton = driver
					.findElement(By.xpath("//div//button[contains (text(), 'Move to Receive Qty')]"));
			moveToReceiveQtyButton.click();
			Thread.sleep(3000);

			String attribute = totalReceiptValue.getAttribute("value");
			WebElement invoiceValue = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[9]"));
			invoiceValue.sendKeys(attribute);
		} else {
			System.out.println("Purchase Category NOT MATCHING");
		}
	}

	@When("User create the GRN Request for Partially Received - \\(PO Order - RM - Import)")
	public void user_create_the_grn_request_for_partially_received_po_order_rm_import() throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;

		WebElement receiptmodule = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		receiptmodule.click();

		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement addBtn = driver.findElement(By.xpath("(//button[@title='Add' and @type='button'])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(addBtn));
		addBtn.click();
		Thread.sleep(1000);

		// Store Tile Drop-down Fields

		WebElement storeTileDropdown = driver.findElement(By.xpath("//*[@id='headingOne']/h5/button"));
		wait.until(ExpectedConditions.elementToBeClickable(storeTileDropdown));
		j.executeScript("arguments[0].click();", storeTileDropdown);
		Thread.sleep(1000);

		WebElement branch = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[1]/app-form-dyna-select/div/select")));
		wait.until(ExpectedConditions.visibilityOf(branch));
		select(branch).selectByIndex(1);
		Thread.sleep(500);

		WebElement store = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[2]/app-form-dyna-select/div/select")));
		select(store).selectByIndex(0);
		Thread.sleep(500);

		WebElement orderType = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[3]/app-form-dyna-select/div/select")));
		select(orderType).selectByIndex(0);
		Thread.sleep(500);

		WebElement materialType = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[4]/app-form-dyna-select/div/select")));
		select(materialType).selectByIndex(0);
		Thread.sleep(500);

		WebElement vendorField = driver.findElement(By.xpath("(//input[@type='text' and @role='combobox'])[1]"));
		vendorField.sendKeys("DIG");
		Thread.sleep(500);

		List<WebElement> vendorList = driver.findElements(By.xpath("(//ul[@role='listbox'])[1]//li"));
		for (WebElement webElement : vendorList) {
			String list = webElement.getText();
			if (list.contains("Digi-key Electronics")) {
				Thread.sleep(500);
				webElement.click();
				System.out.println(webElement);
				break;
			}
			Thread.sleep(1000);
		}

		WebElement multiPO = driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[6]/app-form-dyna-select/div/select"));
		select(multiPO);
		int lastIndex = getOptions(multiPO).size() - 1;
		selectOptionByIndex(multiPO, lastIndex);
		Thread.sleep(1000);

		// Master Fields
		/* /for "IMPORT"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("0: 1"));

		if (attribute2.equals("0: 1")) {

			WebElement receiptNumber = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[1]"));
			if (receiptNumber.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Receipt Number : " + receiptNumber.getAttribute("value"));
			}

			WebElement receiptDateandTime = driver
					.findElement(By.xpath("(//app-form-text//div//input [@type='text'])[2]"));
			if (receiptDateandTime.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Receipt Date/Time : " + receiptDateandTime.getAttribute("value"));
			}

			WebElement invoiceDate = driver.findElement(By.xpath("(//input [@type='date'])[1]"));
			String date = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			invoiceDate.sendKeys(date);

			WebElement invoiceNumber = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[2]"));
			invoiceNumber.sendKeys(UUID());

			WebElement logisticsCarrier = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[1]"));
			selectOptionByIndex(logisticsCarrier, 1);

			WebElement incoterm = driver
					.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]//option [@value='0: 1']"));
			if (incoterm.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Incoterm : " + incoterm.getAttribute("text"));
			}

			WebElement purchaseCategory = driver
					.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]//option[@value='0: 1']"));
			if (purchaseCategory.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Purchase Category : " + purchaseCategory.getAttribute("text"));
			}

			WebElement customerRequestNo = driver
					.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[3]"));
			customerRequestNo.sendKeys("1234");

			WebElement BOENo = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[4]"));
			BOENo.sendKeys("12345");

			WebElement BOEDate = driver.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[2]"));
			String date1 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			BOEDate.sendKeys(date1);
			Thread.sleep(1000);

			WebElement trackingNo = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[5]"));
			trackingNo.sendKeys("12345");

			WebElement noOfPackages = driver.findElement(By.xpath("(//input[@pattern='[0-9]*'])[1]"));
			noOfPackages.sendKeys("2");

			WebElement exchangeRate = driver
					.findElement(By.xpath("(//input[@tooltipevent='focus' and @type='text'])[8]"));
			exchangeRate.sendKeys("2");

			// Store Tile Drop-down Fields

			WebElement geDate = driver.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[3]"));
			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			geDate.sendKeys(date2);
			Thread.sleep(1000);

			WebElement gateEntryNo = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[6]"));
			gateEntryNo.sendKeys("2");

			WebElement paymentTerms = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[11]"));
			if (paymentTerms.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");

			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Payment Terms : " + paymentTerms.getAttribute("text"));
			}

			WebElement paymentDueDate = driver
					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[4]"));
			String date3 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			paymentDueDate.sendKeys(date3);
			Thread.sleep(1000);

			WebElement currency = driver.findElement(By.xpath("(//app-form-dyna-select[1]//div[1]//select)[9]"));
			if (currency.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Currency : " + currency.getAttribute("text"));
			}

			WebElement totalReceiptValue = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[12]"));
			if (totalReceiptValue.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");

			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Total Receipt Value : " + totalReceiptValue.getAttribute("value"));
			}

			WebElement additionalChargesTax = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[13]"));
			additionalChargesTax.sendKeys("50");

			WebElement additionalChargesNonTax = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[14]"));
			additionalChargesNonTax.sendKeys("50");

			WebElement remarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[1]"));
			remarks.sendKeys("Suresh : GRN Entry");
			Thread.sleep(1000);

			WebElement toBeCredit = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[15]"));
			if (toBeCredit.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");

			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("To Be Credit Value : " + toBeCredit.getAttribute("value"));
			}

			WebElement storeReceiveQty = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l11 r11')]"));
			j.executeScript("arguments[0].click();", storeReceiveQty);
			WebElement storeReceiveQty1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l11 r11')]//input"));
			storeReceiveQty1.sendKeys("50");

			WebElement moveToReceiveQtyButton = driver
					.findElement(By.xpath("//div//button[contains (text(), 'Move to Receive Qty')]"));
			moveToReceiveQtyButton.click();

			String attribute = totalReceiptValue.getAttribute("value");
			WebElement invoiceValue = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[9]"));
			invoiceValue.sendKeys(attribute);
		} else {
			System.out.println("Purchase Category NOT MATCHING");
		}
	}

	@When("User create the GRN Request for Partially Received - \\(Testing & Services - Import)")
	public void user_create_the_grn_request_for_partially_received_testing_services_import()
			throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;

		WebElement receiptmodule = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		receiptmodule.click();

		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement addBtn = driver.findElement(By.xpath("(//button[@title='Add' and @type='button'])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(addBtn));
		addBtn.click();
		Thread.sleep(1000);

		// Store Tile Drop-down Fields

		WebElement storeTileDropdown = driver.findElement(By.xpath("//*[@id='headingOne']/h5/button"));
		wait.until(ExpectedConditions.elementToBeClickable(storeTileDropdown));
		j.executeScript("arguments[0].click();", storeTileDropdown);
		Thread.sleep(1000);

		WebElement branch = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[1]/app-form-dyna-select/div/select")));
		wait.until(ExpectedConditions.visibilityOf(branch));
		select(branch).selectByIndex(1);
		Thread.sleep(500);

		WebElement store = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[2]/app-form-dyna-select/div/select")));
		select(store).selectByIndex(0);
		Thread.sleep(500);

		WebElement orderType = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[3]/app-form-dyna-select/div/select")));
		select(orderType).selectByIndex(2);
		Thread.sleep(500);

		WebElement vendorField = driver.findElement(By.xpath("(//input[@type='text' and @role='combobox'])[1]"));
		vendorField.sendKeys("DIG");
		Thread.sleep(500);

		List<WebElement> vendorList = driver.findElements(By.xpath("(//ul[@role='listbox'])[1]//li"));
		for (WebElement webElement : vendorList) {
			String list = webElement.getText();
			if (list.contains("Digi-key Electronics")) {
				Thread.sleep(500);
				webElement.click();
				System.out.println(webElement);
				break;
			}
			Thread.sleep(1000);
		}

		WebElement multiPO = driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[5]/app-form-dyna-select/div/select"));
		select(multiPO);
		int lastIndex = getOptions(multiPO).size() - 1;
		selectOptionByIndex(multiPO, lastIndex);
		Thread.sleep(1000);

		// Master Fields
		/* /for "IMPORT"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("0: 1"));

		if (attribute2.equals("0: 1")) {

			WebElement receiptNumber = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[1]"));
			if (receiptNumber.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Receipt Number : " + receiptNumber.getAttribute("value"));
			}

			WebElement receiptDateandTime = driver
					.findElement(By.xpath("(//app-form-text//div//input [@type='text'])[2]"));
			if (receiptDateandTime.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Receipt Date/Time : " + receiptDateandTime.getAttribute("value"));
			}

			WebElement invoiceDate = driver.findElement(By.xpath("(//input [@type='date'])[1]"));
			String date = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			invoiceDate.sendKeys(date);

			WebElement invoiceNumber = driver
					.findElement(By.xpath("(//input[@pattern=\"[a-zA-Z0-9*-{}@()/\\s]+\"])[2]"));
			invoiceNumber.sendKeys(UUID());

			WebElement logisticsCarrier = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[1]"));
			selectOptionByIndex(logisticsCarrier, 1);

			WebElement incoterm = driver
					.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]//option [@value='0: 1']"));
			if (incoterm.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Incoterm : " + incoterm.getAttribute("text"));
			}

			WebElement purchaseCategory = driver
					.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]//option[@value='0: 1']"));
			if (purchaseCategory.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Purchase Category : " + purchaseCategory.getAttribute("text"));
			}

			WebElement customerRequestNo = driver
					.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[3]"));
			customerRequestNo.sendKeys("1234");

			WebElement BOENo = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[4]"));
			BOENo.sendKeys("12345");

			WebElement BOEDate = driver.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[2]"));
			String date1 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			BOEDate.sendKeys(date1);
			Thread.sleep(1000);

			WebElement trackingNo = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[5]"));
			trackingNo.sendKeys("12345");

			WebElement noOfPackages = driver.findElement(By.xpath("(//input[@pattern='[0-9]*'])[1]"));
			noOfPackages.sendKeys("2");

			WebElement exchangeRate = driver
					.findElement(By.xpath("(//input[@tooltipevent='focus' and @type='text'])[8]"));
			exchangeRate.sendKeys("2");

			// Store Tile Drop-down Fields

			WebElement geDate = driver.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[3]"));
			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			geDate.sendKeys(date2);
			Thread.sleep(1000);

			WebElement gateEntryNo = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[6]"));
			gateEntryNo.sendKeys("2");

			WebElement paymentTerms = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[11]"));
			if (paymentTerms.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");

			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Payment Terms : " + paymentTerms.getAttribute("text"));
			}

			WebElement paymentDueDate = driver
					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[4]"));
			String date3 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			paymentDueDate.sendKeys(date3);
			Thread.sleep(1000);

			WebElement currency = driver.findElement(By.xpath("(//app-form-dyna-select[1]//div[1]//select)[8]"));
			if (currency.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Currency : " + currency.getAttribute("text"));
			}

			WebElement totalReceiptValue = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[12]"));
			if (totalReceiptValue.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");

			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Total Receipt Value : " + totalReceiptValue.getAttribute("value"));
			}

			WebElement additionalChargesTax = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[13]"));
			additionalChargesTax.sendKeys("50");

			WebElement additionalChargesNonTax = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[14]"));
			additionalChargesNonTax.sendKeys("50");

			WebElement remarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[1]"));
			remarks.sendKeys("Suresh : GRN Entry");
			Thread.sleep(1000);

			WebElement toBeCredit = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[15]"));
			if (toBeCredit.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");

			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("To Be Credit Value : " + toBeCredit.getAttribute("value"));
			}

			WebElement storeReceiveQty = driver.findElement(
					By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l10 r10 selected']"));
			j.executeScript("arguments[0].click();", storeReceiveQty);
			WebElement storeReceiveQty1 = driver.findElement(By.xpath(
					"//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l10 r10 active selected editable']//input"));
			storeReceiveQty1.sendKeys("50");

			WebElement moveToReceiveQtyButton = driver
					.findElement(By.xpath("//div//button[contains (text(), 'Move to Receive Qty')]"));
			moveToReceiveQtyButton.click();

			String attribute = totalReceiptValue.getAttribute("value");
			WebElement invoiceValue = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[9]"));
			invoiceValue.sendKeys(attribute);
		} else {
			System.out.println("Purchase Category NOT MATCHING");
		}
	}

	@When("User create the GRN Request for Partially Received - \\(WEB Order - RM - Import)")
	public void user_create_the_grn_request_for_partially_received_web_order_rm_import() throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;

		WebElement receiptmodule = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		receiptmodule.click();

		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement addBtn = driver.findElement(By.xpath("(//button[@title='Add' and @type='button'])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(addBtn));
		addBtn.click();
		Thread.sleep(1000);

		// Store Tile Drop-down Fields

		WebElement storeTileDropdown = driver.findElement(By.xpath("//*[@id='headingOne']/h5/button"));
		wait.until(ExpectedConditions.elementToBeClickable(storeTileDropdown));
		j.executeScript("arguments[0].click();", storeTileDropdown);
		Thread.sleep(1000);

		WebElement branch = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[1]/app-form-dyna-select/div/select")));
		wait.until(ExpectedConditions.visibilityOf(branch));
		select(branch).selectByIndex(1);
		Thread.sleep(500);

		WebElement store = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[2]/app-form-dyna-select/div/select")));
		select(store).selectByIndex(0);
		Thread.sleep(500);

		WebElement orderType = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[3]/app-form-dyna-select/div/select")));
		select(orderType).selectByIndex(1);
		Thread.sleep(500);

		WebElement materialType = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[4]/app-form-dyna-select/div/select")));
		select(materialType).selectByIndex(0);
		Thread.sleep(500);

		WebElement vendorField = driver.findElement(By.xpath("(//input[@type='text' and @role='combobox'])[1]"));
		vendorField.sendKeys("DIG");
		Thread.sleep(500);

		List<WebElement> vendorList = driver.findElements(By.xpath("(//ul[@role='listbox'])[1]//li"));
		for (WebElement webElement : vendorList) {
			String list = webElement.getText();
			if (list.contains("Digi-key Electronics")) {
				Thread.sleep(500);
				webElement.click();
				System.out.println(webElement);
				break;
			}
			Thread.sleep(1000);
		}

		WebElement multiPO = driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[6]/app-form-dyna-select/div/select"));
		select(multiPO);
		int lastIndex = getOptions(multiPO).size() - 1;
		selectOptionByIndex(multiPO, lastIndex);
		Thread.sleep(1000);

		// Master Fields
		/* /for "IMPORT"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("0: 1"));

		if (attribute2.equals("0: 1")) {

			WebElement receiptNumber = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[1]"));
			if (receiptNumber.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Receipt Number : " + receiptNumber.getAttribute("value"));
			}

			WebElement receiptDateandTime = driver
					.findElement(By.xpath("(//app-form-text//div//input [@type='text'])[2]"));
			if (receiptDateandTime.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Receipt Date/Time : " + receiptDateandTime.getAttribute("value"));
			}

			WebElement invoiceDate = driver.findElement(By.xpath("(//input [@type='date'])[1]"));
			String date = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			invoiceDate.sendKeys(date);

			WebElement invoiceNumber = driver
					.findElement(By.xpath("(//input[@pattern=\"[a-zA-Z0-9*-{}@()/\\s]+\"])[2]"));
			invoiceNumber.sendKeys(UUID());

			WebElement logisticsCarrier = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[1]"));
			selectOptionByIndex(logisticsCarrier, 1);

			WebElement incoterm = driver
					.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]//option [@value='0: 1']"));
			if (incoterm.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Incoterm : " + incoterm.getAttribute("text"));
			}

			WebElement purchaseCategory = driver
					.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]//option[@value='0: 1']"));
			if (purchaseCategory.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Purchase Category : " + purchaseCategory.getAttribute("text"));
			}

			WebElement customerRequestNo = driver
					.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[3]"));
			customerRequestNo.sendKeys("1234");

			WebElement BOENo = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[4]"));
			BOENo.sendKeys("12345");

			WebElement BOEDate = driver.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[2]"));
			String date1 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			BOEDate.sendKeys(date1);
			Thread.sleep(1000);

			WebElement trackingNo = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[5]"));
			trackingNo.sendKeys("12345");

			WebElement noOfPackages = driver.findElement(By.xpath("(//input[@pattern='[0-9]*'])[1]"));
			noOfPackages.sendKeys("2");

			WebElement exchangeRate = driver
					.findElement(By.xpath("(//input[@tooltipevent='focus' and @type='text'])[8]"));
			exchangeRate.sendKeys("2");

			// Store Tile Drop-down Fields

			WebElement geDate = driver.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[3]"));
			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			geDate.sendKeys(date2);
			Thread.sleep(1000);

			WebElement gateEntryNo = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[6]"));
			gateEntryNo.sendKeys("2");

			WebElement paymentTerms = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[11]"));
			if (paymentTerms.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");

			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Payment Terms : " + paymentTerms.getAttribute("text"));
			}

			WebElement paymentDueDate = driver
					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[4]"));
			String date3 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			paymentDueDate.sendKeys(date3);
			Thread.sleep(1000);

			WebElement currency = driver.findElement(By.xpath("(//app-form-dyna-select[1]//div[1]//select)[9]"));
			if (currency.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Currency : " + currency.getAttribute("text"));
			}

			WebElement totalReceiptValue = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[12]"));
			if (totalReceiptValue.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");

			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Total Receipt Value : " + totalReceiptValue.getAttribute("value"));
			}

			WebElement additionalChargesTax = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[13]"));
			additionalChargesTax.sendKeys("50");

			WebElement additionalChargesNonTax = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[14]"));
			additionalChargesNonTax.sendKeys("50");

			WebElement remarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[1]"));
			remarks.sendKeys("Suresh : GRN Entry");
			Thread.sleep(1000);

			WebElement toBeCredit = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[15]"));
			if (toBeCredit.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");

			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("To Be Credit Value : " + toBeCredit.getAttribute("value"));
			}

			WebElement storeReceiveQty = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l11 r11')]"));
			j.executeScript("arguments[0].click();", storeReceiveQty);
			WebElement storeReceiveQty1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l11 r11')]//input"));
			storeReceiveQty1.sendKeys("50");

			WebElement moveToReceiveQtyButton = driver
					.findElement(By.xpath("//div//button[contains (text(), 'Move to Receive Qty')]"));
			moveToReceiveQtyButton.click();

			String attribute = totalReceiptValue.getAttribute("value");
			WebElement invoiceValue = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[9]"));
			invoiceValue.sendKeys(attribute);
		} else {
			System.out.println("Purchase Category NOT MATCHING");
		}
	}

	@When("User create the GRN Request for Partially Received - \\(PO Order - FG - Import)")
	public void user_create_the_grn_request_for_partially_received_po_order_fg_import() throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;

		WebElement receiptmodule = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		receiptmodule.click();

		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement addBtn = driver.findElement(By.xpath("(//button[@title='Add' and @type='button'])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(addBtn));
		addBtn.click();
		Thread.sleep(1000);

		// Store Tile Drop-down Fields

		WebElement storeTileDropdown = driver.findElement(By.xpath("//*[@id='headingOne']/h5/button"));
		wait.until(ExpectedConditions.elementToBeClickable(storeTileDropdown));
		j.executeScript("arguments[0].click();", storeTileDropdown);
		Thread.sleep(1000);

		WebElement branch = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[1]/app-form-dyna-select/div/select")));
		wait.until(ExpectedConditions.visibilityOf(branch));
		select(branch).selectByIndex(1);
		Thread.sleep(500);

		WebElement store = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[2]/app-form-dyna-select/div/select")));
		select(store).selectByIndex(0);
		Thread.sleep(500);

		WebElement orderType = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[3]/app-form-dyna-select/div/select")));
		select(orderType).selectByIndex(0);
		Thread.sleep(500);

		WebElement materialType = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[4]/app-form-dyna-select/div/select")));
		select(materialType).selectByIndex(1);
		Thread.sleep(500);

		WebElement vendorField = driver.findElement(By.xpath("(//input[@type='text' and @role='combobox'])[1]"));
		vendorField.sendKeys("DIG");
		Thread.sleep(500);

		List<WebElement> vendorList = driver.findElements(By.xpath("(//ul[@role='listbox'])[1]//li"));
		for (WebElement webElement : vendorList) {
			String list = webElement.getText();
			if (list.contains("Digi-key Electronics")) {
				Thread.sleep(500);
				webElement.click();
				System.out.println(webElement);
				break;
			}
			Thread.sleep(1000);
		}

		WebElement multiPO = driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[6]/app-form-dyna-select/div/select"));
		select(multiPO);
		int lastIndex = getOptions(multiPO).size() - 1;
		selectOptionByIndex(multiPO, lastIndex);
		Thread.sleep(1000);

		// Master Fields
		/* /for "IMPORT"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("0: 1"));

		if (attribute2.equals("0: 1")) {

			WebElement receiptNumber = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[1]"));
			if (receiptNumber.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Receipt Number : " + receiptNumber.getAttribute("value"));
			}

			WebElement receiptDateandTime = driver
					.findElement(By.xpath("(//app-form-text//div//input [@type='text'])[2]"));
			if (receiptDateandTime.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Receipt Date/Time : " + receiptDateandTime.getAttribute("value"));
			}

			WebElement invoiceDate = driver.findElement(By.xpath("(//input [@type='date'])[1]"));
			String date = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			invoiceDate.sendKeys(date);

			WebElement invoiceNumber = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[2]"));
			invoiceNumber.sendKeys(UUID());

			WebElement logisticsCarrier = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[1]"));
			selectOptionByIndex(logisticsCarrier, 1);

			WebElement incoterm = driver
					.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]//option [@value='0: 1']"));
			if (incoterm.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Incoterm : " + incoterm.getAttribute("text"));
			}

			WebElement purchaseCategory = driver
					.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]//option[@value='0: 1']"));
			if (purchaseCategory.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Purchase Category : " + purchaseCategory.getAttribute("text"));
			}

			WebElement customerRequestNo = driver
					.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[3]"));
			customerRequestNo.sendKeys("1234");

			WebElement BOENo = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[4]"));
			BOENo.sendKeys("12345");

			WebElement BOEDate = driver.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[2]"));
			String date1 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			BOEDate.sendKeys(date1);
			Thread.sleep(1000);

			WebElement trackingNo = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[5]"));
			trackingNo.sendKeys("12345");

			WebElement noOfPackages = driver.findElement(By.xpath("(//input[@pattern='[0-9]*'])[1]"));
			noOfPackages.sendKeys("2");

			WebElement exchangeRate = driver
					.findElement(By.xpath("(//input[@tooltipevent='focus' and @type='text'])[8]"));
			exchangeRate.sendKeys("2");

			// Store Tile Drop-down Fields

			WebElement geDate = driver.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[3]"));
			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			geDate.sendKeys(date2);
			Thread.sleep(1000);

			WebElement gateEntryNo = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[6]"));
			gateEntryNo.sendKeys("2");

			WebElement paymentTerms = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[11]"));
			if (paymentTerms.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");

			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Payment Terms : " + paymentTerms.getAttribute("text"));
			}

			WebElement paymentDueDate = driver
					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[4]"));
			String date3 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			paymentDueDate.sendKeys(date3);
			Thread.sleep(1000);

			WebElement currency = driver.findElement(By.xpath("(//app-form-dyna-select[1]//div[1]//select)[9]"));
			if (currency.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Currency : " + currency.getAttribute("value"));
			}

			WebElement totalReceiptValue = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[12]"));
			if (totalReceiptValue.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");

			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Total Receipt Value : " + totalReceiptValue.getAttribute("value"));
			}

			WebElement additionalChargesTax = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[13]"));
			additionalChargesTax.sendKeys("50");

			WebElement additionalChargesNonTax = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[14]"));
			additionalChargesNonTax.sendKeys("50");

			WebElement remarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[1]"));
			remarks.sendKeys("Suresh : GRN Entry");
			Thread.sleep(1000);

			WebElement toBeCredit = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[15]"));
			if (toBeCredit.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");

			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("To Be Credit Value : " + toBeCredit.getAttribute("value"));
			}

//			Thread.sleep(500000);

			WebElement storeReceiveQty = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l11 r11')]"));
			j.executeScript("arguments[0].click();", storeReceiveQty);
			WebElement storeReceiveQty1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l11 r11')]//input"));
			storeReceiveQty1.sendKeys("50");

			WebElement moveToReceiveQtyButton = driver
					.findElement(By.xpath("//div//button[contains (text(), 'Move to Receive Qty')]"));
			moveToReceiveQtyButton.click();

			String attribute = totalReceiptValue.getAttribute("value");
			WebElement invoiceValue = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[9]"));
			invoiceValue.sendKeys(attribute);
		} else {
			System.out.println("Purchase Category NOT MATCHING");
		}
	}

	@When("User create the GRN Request for Partially Received - \\(WEB Order - FG - Import)")
	public void user_create_the_grn_request_for_partially_received_web_order_fg_import() throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;

		WebElement receiptmodule = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		receiptmodule.click();

		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement addBtn = driver.findElement(By.xpath("(//button[@title='Add' and @type='button'])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(addBtn));
		addBtn.click();
		Thread.sleep(1000);

		// Store Tile Drop-down Fields

		WebElement storeTileDropdown = driver.findElement(By.xpath("//*[@id='headingOne']/h5/button"));
		wait.until(ExpectedConditions.elementToBeClickable(storeTileDropdown));
		j.executeScript("arguments[0].click();", storeTileDropdown);
		Thread.sleep(1000);

		WebElement branch = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[1]/app-form-dyna-select/div/select")));
		wait.until(ExpectedConditions.visibilityOf(branch));
		select(branch).selectByIndex(1);
		Thread.sleep(500);

		WebElement store = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[2]/app-form-dyna-select/div/select")));
		select(store).selectByIndex(0);
		Thread.sleep(500);

		WebElement orderType = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[3]/app-form-dyna-select/div/select")));
		select(orderType).selectByIndex(1);
		Thread.sleep(500);

		WebElement materialType = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[4]/app-form-dyna-select/div/select")));
		select(materialType).selectByIndex(1);
		Thread.sleep(500);

		WebElement vendorField = driver.findElement(By.xpath("(//input[@type='text' and @role='combobox'])[1]"));
		vendorField.sendKeys("DIG");
		Thread.sleep(500);

		List<WebElement> vendorList = driver.findElements(By.xpath("(//ul[@role='listbox'])[1]//li"));
		for (WebElement webElement : vendorList) {
			String list = webElement.getText();
			if (list.contains("Digi-key Electronics")) {
				Thread.sleep(500);
				webElement.click();
				System.out.println(webElement);
				break;
			}
			Thread.sleep(1000);
		}

		WebElement multiPO = driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[6]/app-form-dyna-select/div/select"));
		select(multiPO);
		int lastIndex = getOptions(multiPO).size() - 1;
		selectOptionByIndex(multiPO, lastIndex);
		Thread.sleep(1000);

		// Master Fields
		/* /for "IMPORT"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("0: 1"));

		if (attribute2.equals("0: 1")) {

			WebElement receiptNumber = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[1]"));
			if (receiptNumber.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Receipt Number : " + receiptNumber.getAttribute("value"));
			}

			WebElement receiptDateandTime = driver
					.findElement(By.xpath("(//app-form-text//div//input [@type='text'])[2]"));
			if (receiptDateandTime.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Receipt Date/Time : " + receiptDateandTime.getAttribute("value"));
			}

			WebElement invoiceDate = driver.findElement(By.xpath("(//input [@type='date'])[1]"));
			String date = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			invoiceDate.sendKeys(date);

			WebElement invoiceNumber = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[2]"));
			invoiceNumber.sendKeys(UUID());

			WebElement logisticsCarrier = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[1]"));
			selectOptionByIndex(logisticsCarrier, 1);

			WebElement incoterm = driver
					.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]//option [@value='0: 1']"));
			if (incoterm.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Incoterm : " + incoterm.getAttribute("text"));
			}

			WebElement purchaseCategory = driver
					.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]//option[@value='0: 1']"));
			if (purchaseCategory.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Purchase Category : " + purchaseCategory.getAttribute("text"));
			}

			WebElement customerRequestNo = driver
					.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[3]"));
			customerRequestNo.sendKeys("1234");

			WebElement BOENo = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[4]"));
			BOENo.sendKeys("12345");

			WebElement BOEDate = driver.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[2]"));
			String date1 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			BOEDate.sendKeys(date1);
			Thread.sleep(1000);

			WebElement trackingNo = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[5]"));
			trackingNo.sendKeys("12345");

			WebElement noOfPackages = driver.findElement(By.xpath("(//input[@pattern='[0-9]*'])[1]"));
			noOfPackages.sendKeys("2");

			WebElement exchangeRate = driver
					.findElement(By.xpath("(//input[@tooltipevent='focus' and @type='text'])[8]"));
			exchangeRate.sendKeys("2");

			// Store Tile Drop-down Fields

			WebElement geDate = driver.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[3]"));
			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			geDate.sendKeys(date2);
			Thread.sleep(1000);

			WebElement gateEntryNo = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[6]"));
			gateEntryNo.sendKeys("2");

			WebElement paymentTerms = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[11]"));
			if (paymentTerms.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");

			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Payment Terms : " + paymentTerms.getAttribute("text"));
			}

			WebElement paymentDueDate = driver
					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[4]"));
			String date3 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			paymentDueDate.sendKeys(date3);
			Thread.sleep(1000);

			WebElement currency = driver.findElement(By.xpath("(//app-form-dyna-select[1]//div[1]//select)[9]"));
			if (currency.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Currency : " + currency.getAttribute("value"));
			}

			WebElement totalReceiptValue = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[12]"));
			if (totalReceiptValue.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");

			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Total Receipt Value : " + totalReceiptValue.getAttribute("value"));
			}

			WebElement additionalChargesTax = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[13]"));
			additionalChargesTax.sendKeys("50");

			WebElement additionalChargesNonTax = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[14]"));
			additionalChargesNonTax.sendKeys("50");

			WebElement remarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[1]"));
			remarks.sendKeys("Suresh : GRN Entry");
			Thread.sleep(1000);

			WebElement toBeCredit = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[15]"));
			if (toBeCredit.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");

			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("To Be Credit Value : " + toBeCredit.getAttribute("value"));
			}

//			Thread.sleep(500000);

			WebElement storeReceiveQty = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l11 r11')]"));
			j.executeScript("arguments[0].click();", storeReceiveQty);
			WebElement storeReceiveQty1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l11 r11')]//input"));
			storeReceiveQty1.sendKeys("50");

			WebElement moveToReceiveQtyButton = driver
					.findElement(By.xpath("//div//button[contains (text(), 'Move to Receive Qty')]"));
			moveToReceiveQtyButton.click();

			String attribute = totalReceiptValue.getAttribute("value");
			WebElement invoiceValue = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[9]"));
			invoiceValue.sendKeys(attribute);
		} else {
			System.out.println("Purchase Category NOT MATCHING");
		}
	}

	@When("User create the GRN Request for Partially Received - \\(PO Order - NPM - Import)")
	public void user_create_the_grn_request_for_partially_received_po_order_npm_import() throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;

		WebElement receiptmodule = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		receiptmodule.click();

		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement addBtn = driver.findElement(By.xpath("(//button[@title='Add' and @type='button'])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(addBtn));
		addBtn.click();
		Thread.sleep(1000);

		// Store Tile Drop-down Fields

		WebElement storeTileDropdown = driver.findElement(By.xpath("//*[@id='headingOne']/h5/button"));
		wait.until(ExpectedConditions.elementToBeClickable(storeTileDropdown));
		j.executeScript("arguments[0].click();", storeTileDropdown);
		Thread.sleep(1000);

		WebElement branch = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[1]/app-form-dyna-select/div/select")));
		wait.until(ExpectedConditions.visibilityOf(branch));
		select(branch).selectByIndex(1);
		Thread.sleep(500);

		WebElement store = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[2]/app-form-dyna-select/div/select")));
		select(store).selectByIndex(0);
		Thread.sleep(500);

		WebElement orderType = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[3]/app-form-dyna-select/div/select")));
		select(orderType).selectByIndex(0);
		Thread.sleep(500);

		WebElement materialType = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[4]/app-form-dyna-select/div/select")));
		select(materialType).selectByIndex(2);
		Thread.sleep(500);

		WebElement vendorField = driver.findElement(By.xpath("(//input[@type='text' and @role='combobox'])[1]"));
		vendorField.sendKeys("DIG");
		Thread.sleep(500);

		List<WebElement> vendorList = driver.findElements(By.xpath("(//ul[@role='listbox'])[1]//li"));
		for (WebElement webElement : vendorList) {
			String list = webElement.getText();
			if (list.contains("Digi-key Electronics")) {
				Thread.sleep(500);
				webElement.click();
				System.out.println(webElement);
				break;
			}
			Thread.sleep(1000);
		}

		WebElement multiPO = driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[6]/app-form-dyna-select/div/select"));
		select(multiPO);
		int lastIndex = getOptions(multiPO).size() - 1;
		selectOptionByIndex(multiPO, lastIndex);
		Thread.sleep(1000);

		// Master Fields
		/* /for "IMPORT"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("0: 1"));

		if (attribute2.equals("0: 1")) {

			WebElement receiptNumber = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[1]"));
			if (receiptNumber.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Receipt Number : " + receiptNumber.getAttribute("value"));
			}

			WebElement receiptDateandTime = driver
					.findElement(By.xpath("(//app-form-text//div//input [@type='text'])[2]"));
			if (receiptDateandTime.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Receipt Date/Time : " + receiptDateandTime.getAttribute("value"));
			}

			WebElement invoiceDate = driver.findElement(By.xpath("(//input [@type='date'])[1]"));
			String date = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			invoiceDate.sendKeys(date);

			WebElement invoiceNumber = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[2]"));
			invoiceNumber.sendKeys(UUID());

			WebElement logisticsCarrier = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[1]"));
			selectOptionByIndex(logisticsCarrier, 1);

			WebElement incoterm = driver
					.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]//option [@value='0: 1']"));
			if (incoterm.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Incoterm : " + incoterm.getAttribute("text"));
			}

			WebElement purchaseCategory = driver
					.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]//option[@value='0: 1']"));
			if (purchaseCategory.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Purchase Category : " + purchaseCategory.getAttribute("text"));
			}

			WebElement customerRequestNo = driver
					.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[3]"));
			customerRequestNo.sendKeys("1234");

			WebElement BOENo = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[4]"));
			BOENo.sendKeys("12345");

			WebElement BOEDate = driver.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[2]"));
			String date1 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			BOEDate.sendKeys(date1);
			Thread.sleep(1000);

			WebElement trackingNo = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[5]"));
			trackingNo.sendKeys("12345");

			WebElement noOfPackages = driver.findElement(By.xpath("(//input[@pattern='[0-9]*'])[1]"));
			noOfPackages.sendKeys("2");

			WebElement exchangeRate = driver
					.findElement(By.xpath("(//input[@tooltipevent='focus' and @type='text'])[8]"));
			exchangeRate.sendKeys("2");

			// Store Tile Drop-down Fields

			WebElement geDate = driver.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[3]"));
			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			geDate.sendKeys(date2);
			Thread.sleep(1000);

			WebElement gateEntryNo = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[6]"));
			gateEntryNo.sendKeys("2");

			WebElement paymentTerms = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[11]"));
			if (paymentTerms.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");

			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Payment Terms : " + paymentTerms.getAttribute("text"));
			}

			WebElement paymentDueDate = driver
					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[4]"));
			String date3 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			paymentDueDate.sendKeys(date3);
			Thread.sleep(1000);

			WebElement currency = driver.findElement(By.xpath("(//app-form-dyna-select[1]//div[1]//select)[9]"));
			if (currency.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Currency : " + currency.getAttribute("value"));
			}

			WebElement totalReceiptValue = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[12]"));
			if (totalReceiptValue.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");

			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Total Receipt Value : " + totalReceiptValue.getAttribute("value"));
			}

			WebElement additionalChargesTax = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[13]"));
			additionalChargesTax.sendKeys("50");

			WebElement additionalChargesNonTax = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[14]"));
			additionalChargesNonTax.sendKeys("50");

			WebElement remarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[1]"));
			remarks.sendKeys("Suresh : GRN Entry");
			Thread.sleep(1000);

			WebElement toBeCredit = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[15]"));
			if (toBeCredit.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");

			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("To Be Credit Value : " + toBeCredit.getAttribute("value"));
			}

//			Thread.sleep(500000);

			WebElement storeReceiveQty = driver.findElement(
					By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l10 r10 selected']"));
			j.executeScript("arguments[0].click();", storeReceiveQty);
			WebElement storeReceiveQty1 = driver.findElement(By.xpath(
					"//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l10 r10 active selected editable']//input"));
			storeReceiveQty1.sendKeys("50");

			WebElement moveToReceiveQtyButton = driver
					.findElement(By.xpath("//div//button[contains (text(), 'Move to Receive Qty')]"));
			moveToReceiveQtyButton.click();

			String attribute = totalReceiptValue.getAttribute("value");
			WebElement invoiceValue = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[9]"));
			invoiceValue.sendKeys(attribute);
		} else {
			System.out.println("Purchase Category NOT MATCHING");
		}
	}

	@When("User create the GRN Request for Partially Received - \\(WEB Order - NPM - Import)")
	public void user_create_the_grn_request_for_partially_received_web_order_npm_import() throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;

		WebElement receiptmodule = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		receiptmodule.click();

		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement addBtn = driver.findElement(By.xpath("(//button[@title='Add' and @type='button'])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(addBtn));
		addBtn.click();
		Thread.sleep(1000);

		// Store Tile Drop-down Fields

		WebElement storeTileDropdown = driver.findElement(By.xpath("//*[@id='headingOne']/h5/button"));
		wait.until(ExpectedConditions.elementToBeClickable(storeTileDropdown));
		j.executeScript("arguments[0].click();", storeTileDropdown);
		Thread.sleep(1000);

		WebElement branch = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[1]/app-form-dyna-select/div/select")));
		wait.until(ExpectedConditions.visibilityOf(branch));
		select(branch).selectByIndex(1);
		Thread.sleep(500);

		WebElement store = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[2]/app-form-dyna-select/div/select")));
		select(store).selectByIndex(0);
		Thread.sleep(500);

		WebElement orderType = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[3]/app-form-dyna-select/div/select")));
		select(orderType).selectByIndex(1);
		Thread.sleep(500);

		WebElement materialType = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[4]/app-form-dyna-select/div/select")));
		select(materialType).selectByIndex(2);
		Thread.sleep(500);

		WebElement vendorField = driver.findElement(By.xpath("(//input[@type='text' and @role='combobox'])[1]"));
		vendorField.sendKeys("DIG");
		Thread.sleep(500);

		List<WebElement> vendorList = driver.findElements(By.xpath("(//ul[@role='listbox'])[1]//li"));
		for (WebElement webElement : vendorList) {
			String list = webElement.getText();
			if (list.contains("Digi-key Electronics")) {
				Thread.sleep(500);
				webElement.click();
				System.out.println(webElement);
				break;
			}
			Thread.sleep(1000);
		}

		WebElement multiPO = driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[6]/app-form-dyna-select/div/select"));
		select(multiPO);
		int lastIndex = getOptions(multiPO).size() - 1;
		selectOptionByIndex(multiPO, lastIndex);
		Thread.sleep(1000);

		// Master Fields
		/* /for "IMPORT"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("0: 1"));

		if (attribute2.equals("0: 1")) {

			WebElement receiptNumber = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[1]"));
			if (receiptNumber.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Receipt Number : " + receiptNumber.getAttribute("value"));
			}

			WebElement receiptDateandTime = driver
					.findElement(By.xpath("(//app-form-text//div//input [@type='text'])[2]"));
			if (receiptDateandTime.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Receipt Date/Time : " + receiptDateandTime.getAttribute("value"));
			}

			WebElement invoiceDate = driver.findElement(By.xpath("(//input [@type='date'])[1]"));
			String date = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			invoiceDate.sendKeys(date);

			WebElement invoiceNumber = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[2]"));
			invoiceNumber.sendKeys(UUID());

			WebElement logisticsCarrier = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[1]"));
			selectOptionByIndex(logisticsCarrier, 1);

			WebElement incoterm = driver
					.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]//option [@value='0: 1']"));
			if (incoterm.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Incoterm : " + incoterm.getAttribute("text"));
			}

			WebElement purchaseCategory = driver
					.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]//option[@value='0: 1']"));
			if (purchaseCategory.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Purchase Category : " + purchaseCategory.getAttribute("text"));
			}

			WebElement customerRequestNo = driver
					.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[3]"));
			customerRequestNo.sendKeys("1234");

			WebElement BOENo = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[4]"));
			BOENo.sendKeys("12345");

			WebElement BOEDate = driver.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[2]"));
			String date1 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			BOEDate.sendKeys(date1);
			Thread.sleep(1000);

			WebElement trackingNo = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[5]"));
			trackingNo.sendKeys("12345");

			WebElement noOfPackages = driver.findElement(By.xpath("(//input[@pattern='[0-9]*'])[1]"));
			noOfPackages.sendKeys("2");

			WebElement exchangeRate = driver
					.findElement(By.xpath("(//input[@tooltipevent='focus' and @type='text'])[8]"));
			exchangeRate.sendKeys("2");

			// Store Tile Drop-down Fields

			WebElement geDate = driver.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[3]"));
			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			geDate.sendKeys(date2);
			Thread.sleep(1000);

			WebElement gateEntryNo = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[6]"));
			gateEntryNo.sendKeys("2");

			WebElement paymentTerms = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[11]"));
			if (paymentTerms.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");

			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Payment Terms : " + paymentTerms.getAttribute("text"));
			}

			WebElement paymentDueDate = driver
					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[4]"));
			String date3 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			paymentDueDate.sendKeys(date3);
			Thread.sleep(1000);

			WebElement currency = driver.findElement(By.xpath("(//app-form-dyna-select[1]//div[1]//select)[9]"));
			if (currency.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Currency : " + currency.getAttribute("value"));
			}

			WebElement totalReceiptValue = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[12]"));
			if (totalReceiptValue.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");

			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Total Receipt Value : " + totalReceiptValue.getAttribute("value"));
			}

			WebElement additionalChargesTax = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[13]"));
			additionalChargesTax.sendKeys("50");

			WebElement additionalChargesNonTax = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[14]"));
			additionalChargesNonTax.sendKeys("50");

			WebElement remarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[1]"));
			remarks.sendKeys("Suresh : GRN Entry");
			Thread.sleep(1000);

			WebElement toBeCredit = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[15]"));
			if (toBeCredit.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");

			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("To Be Credit Value : " + toBeCredit.getAttribute("value"));
			}

//			Thread.sleep(500000);

			WebElement storeReceiveQty = driver.findElement(
					By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l10 r10 selected']"));
			j.executeScript("arguments[0].click();", storeReceiveQty);
			WebElement storeReceiveQty1 = driver.findElement(By.xpath(
					"//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l10 r10 active selected editable']//input"));
			storeReceiveQty1.sendKeys("50");

			WebElement moveToReceiveQtyButton = driver
					.findElement(By.xpath("//div//button[contains (text(), 'Move to Receive Qty')]"));
			moveToReceiveQtyButton.click();

			String attribute = totalReceiptValue.getAttribute("value");
			WebElement invoiceValue = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[9]"));
			invoiceValue.sendKeys(attribute);
		} else {
			System.out.println("Purchase Category NOT MATCHING");
		}
	}

	@When("User create the GRN Request for Partially Received - \\(PO Order - RM - Domestic)")
	public void user_create_the_grn_request_for_partially_received_po_order_rm_domestic() throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;

		WebElement receiptmodule = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		receiptmodule.click();

		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement addBtn = driver.findElement(By.xpath("(//button[@title='Add' and @type='button'])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(addBtn));
		addBtn.click();
		Thread.sleep(1000);

		// Store Tile Drop-down Fields

		WebElement storeTileDropdown = driver.findElement(By.xpath("//*[@id='headingOne']/h5/button"));
		wait.until(ExpectedConditions.elementToBeClickable(storeTileDropdown));
		j.executeScript("arguments[0].click();", storeTileDropdown);
		Thread.sleep(1000);

		WebElement branch = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[1]/app-form-dyna-select/div/select")));
		wait.until(ExpectedConditions.visibilityOf(branch));
		select(branch).selectByIndex(1);
		Thread.sleep(500);

		WebElement store = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[2]/app-form-dyna-select/div/select")));
		select(store).selectByIndex(0);
		Thread.sleep(500);

		WebElement orderType = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[3]/app-form-dyna-select/div/select")));
		select(orderType).selectByIndex(0);
		Thread.sleep(500);

		WebElement materialType = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[4]/app-form-dyna-select/div/select")));
		select(materialType).selectByIndex(0);
		Thread.sleep(500);

		WebElement vendorField = driver.findElement(By.xpath("(//input[@type='text' and @role='combobox'])[1]"));
		vendorField.sendKeys("A");
		Thread.sleep(500);

		List<WebElement> vendorList = driver.findElements(By.xpath("(//ul[@role='listbox'])[1]//li"));
		for (WebElement webElement : vendorList) {
			String list = webElement.getText();
			if (list.contains("A.K.INDUSTRIES")) {
				Thread.sleep(500);
				webElement.click();
				System.out.println(webElement);
				break;
			}
			Thread.sleep(1000);
		}

		WebElement multiPO = driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[6]/app-form-dyna-select/div/select"));
		select(multiPO);
		int lastIndex = getOptions(multiPO).size() - 1;
		selectOptionByIndex(multiPO, lastIndex);
		Thread.sleep(1000);

		// Master Fields
		/* /for "Domestic"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("1: 2"));

		if (attribute2.equals("1: 2")) {

			WebElement receiptNumber = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[1]"));
			if (receiptNumber.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Receipt Number : " + receiptNumber.getAttribute("value"));
			}

			WebElement receiptDateandTime = driver
					.findElement(By.xpath("(//app-form-text//div//input [@type='text'])[2]"));
			if (receiptDateandTime.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Receipt Date/Time : " + receiptDateandTime.getAttribute("value"));
			}

			WebElement invoiceDate = driver.findElement(By.xpath("(//input [@type='date'])[1]"));
			String date = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			invoiceDate.sendKeys(date);

			WebElement invoiceNumber = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[2]"));
			invoiceNumber.sendKeys(UUID());

			WebElement logisticsCarrier = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[1]"));
			selectOptionByIndex(logisticsCarrier, 1);

			WebElement incoterm = driver
					.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]//option [@value='0: 1']"));
			if (incoterm.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Incoterm : " + incoterm.getAttribute("text"));
			}

			WebElement purchaseCategory = driver
					.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]//option[@value='1: 2']"));
			if (purchaseCategory.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Purchase Category : " + purchaseCategory.getAttribute("text"));
			}

			WebElement trackingNo = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[3]"));
			trackingNo.sendKeys("1234");

			WebElement noOfPackages = driver.findElement(By.xpath("(//input[@pattern='[0-9]*'])[1]"));
			noOfPackages.sendKeys("2");

			// Store Tile Drop-down Fields

			WebElement geDate = driver.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[2]"));
			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			geDate.sendKeys(date2);
			Thread.sleep(1000);

			WebElement gateEntryNo = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[4]"));
			gateEntryNo.sendKeys("2");

			WebElement paymentTerms = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[8]"));
			if (paymentTerms.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");

			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Payment Terms : " + paymentTerms.getAttribute("text"));
			}

			WebElement paymentDueDate = driver
					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[3]"));
			String date3 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			paymentDueDate.sendKeys(date3);
			Thread.sleep(1000);

			WebElement currency = driver.findElement(By.xpath("(//app-form-dyna-select[1]//div[1]//select)[9]"));
			if (currency.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Currency : " + currency.getAttribute("text"));
			}

			WebElement totalReceiptValue = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[9]"));
			if (totalReceiptValue.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");

			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Total Receipt Value : " + totalReceiptValue.getAttribute("value"));
			}

			WebElement additionalChargesTax = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[10]"));
			additionalChargesTax.sendKeys("50");

			WebElement additionalChargesNonTax = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[11]"));
			additionalChargesNonTax.sendKeys("50");

			WebElement remarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[1]"));
			remarks.sendKeys("Suresh : GRN Entry");
			Thread.sleep(1000);

			WebElement toBeCredit = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[12]"));
			if (toBeCredit.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");

			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("To Be Credit Value : " + toBeCredit.getAttribute("value"));
			}

			WebElement storeReceiveQty = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l11 r11')]"));
			j.executeScript("arguments[0].click();", storeReceiveQty);
			WebElement storeReceiveQty1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l11 r11')]//input"));
			storeReceiveQty1.sendKeys("50");

			WebElement moveToReceiveQtyButton = driver
					.findElement(By.xpath("//div//button[contains (text(), 'Move to Receive Qty')]"));
			moveToReceiveQtyButton.click();

			String attribute = totalReceiptValue.getAttribute("value");
			WebElement invoiceValue = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[6]"));
			invoiceValue.sendKeys(attribute);
		} else {
			System.out.println("Purchase Category NOT MATCHING");
		}
	}

	@When("User create the GRN Request for Partially Received - \\(Testing & Services - Domestic)")
	public void user_create_the_grn_request_for_partially_received_testing_services_domestic()
			throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;

		WebElement receiptmodule = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		receiptmodule.click();

		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement addBtn = driver.findElement(By.xpath("(//button[@title='Add' and @type='button'])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(addBtn));
		addBtn.click();
		Thread.sleep(1000);

		// Store Tile Drop-down Fields

		WebElement storeTileDropdown = driver.findElement(By.xpath("//*[@id='headingOne']/h5/button"));
		wait.until(ExpectedConditions.elementToBeClickable(storeTileDropdown));
		j.executeScript("arguments[0].click();", storeTileDropdown);
		Thread.sleep(1000);

		WebElement branch = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[1]/app-form-dyna-select/div/select")));
		wait.until(ExpectedConditions.visibilityOf(branch));
		select(branch).selectByIndex(1);
		Thread.sleep(500);

		WebElement store = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[2]/app-form-dyna-select/div/select")));
		select(store).selectByIndex(0);
		Thread.sleep(500);

		WebElement orderType = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[3]/app-form-dyna-select/div/select")));
		select(orderType).selectByIndex(2);
		Thread.sleep(500);

		WebElement vendorField = driver.findElement(By.xpath("(//input[@type='text' and @role='combobox'])[1]"));
		vendorField.sendKeys("A");
		Thread.sleep(500);

		List<WebElement> vendorList = driver.findElements(By.xpath("(//ul[@role='listbox'])[1]//li"));
		for (WebElement webElement : vendorList) {
			String list = webElement.getText();
			if (list.contains("A.K.INDUSTRIES")) {
				Thread.sleep(500);
				webElement.click();
				System.out.println(webElement);
				break;
			}
			Thread.sleep(1000);
		}

		WebElement multiPO = driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[5]/app-form-dyna-select/div/select"));
		select(multiPO);
		int lastIndex = getOptions(multiPO).size() - 1;
		selectOptionByIndex(multiPO, lastIndex);
		Thread.sleep(1000);

		// Master Fields
		/* /for "Domestic"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("1: 2"));

		if (attribute2.equals("1: 2")) {

			WebElement receiptNumber = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[1]"));
			if (receiptNumber.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Receipt Number : " + receiptNumber.getAttribute("value"));
			}

			WebElement receiptDateandTime = driver
					.findElement(By.xpath("(//app-form-text//div//input [@type='text'])[2]"));
			if (receiptDateandTime.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Receipt Date/Time : " + receiptDateandTime.getAttribute("value"));
			}

			WebElement invoiceDate = driver.findElement(By.xpath("(//input [@type='date'])[1]"));
			String date = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			invoiceDate.sendKeys(date);

			WebElement invoiceNumber = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[2]"));
			invoiceNumber.sendKeys(UUID());

			WebElement logisticsCarrier = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[1]"));
			selectOptionByIndex(logisticsCarrier, 1);

			WebElement incoterm = driver
					.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]//option [@value='0: 1']"));
			if (incoterm.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Incoterm : " + incoterm.getAttribute("text"));
			}

			WebElement purchaseCategory = driver
					.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]//option[@value='1: 2']"));
			if (purchaseCategory.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Purchase Category : " + purchaseCategory.getAttribute("text"));
			}

			WebElement trackingNo = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[3]"));
			trackingNo.sendKeys("1234");

			WebElement noOfPackages = driver.findElement(By.xpath("(//input[@pattern='[0-9]*'])[1]"));
			noOfPackages.sendKeys("2");

			// Store Tile Drop-down Fields

			WebElement geDate = driver.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[2]"));
			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			geDate.sendKeys(date2);
			Thread.sleep(1000);

			WebElement gateEntryNo = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[4]"));
			gateEntryNo.sendKeys("2");

			WebElement paymentTerms = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[8]"));
			if (paymentTerms.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");

			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Payment Terms : " + paymentTerms.getAttribute("text"));
			}

			WebElement paymentDueDate = driver
					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[3]"));
			String date3 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			paymentDueDate.sendKeys(date3);
			Thread.sleep(1000);

			WebElement currency = driver.findElement(By.xpath("(//app-form-dyna-select[1]//div[1]//select)[8]"));
			if (currency.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Currency : " + currency.getAttribute("text"));
			}

			WebElement totalReceiptValue = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[9]"));
			if (totalReceiptValue.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");

			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Total Receipt Value : " + totalReceiptValue.getAttribute("value"));
			}

			WebElement additionalChargesTax = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[10]"));
			additionalChargesTax.sendKeys("50");

			WebElement additionalChargesNonTax = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[11]"));
			additionalChargesNonTax.sendKeys("50");

			WebElement remarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[1]"));
			remarks.sendKeys("Suresh : GRN Entry");
			Thread.sleep(1000);

			WebElement toBeCredit = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[12]"));
			if (toBeCredit.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");

			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("To Be Credit Value : " + toBeCredit.getAttribute("value"));
			}

			WebElement storeReceiveQty = driver.findElement(
					By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l10 r10 selected']"));
			j.executeScript("arguments[0].click();", storeReceiveQty);
			WebElement storeReceiveQty1 = driver.findElement(By.xpath(
					"//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l10 r10 active selected editable']//input"));
			storeReceiveQty1.sendKeys("50");

			WebElement moveToReceiveQtyButton = driver
					.findElement(By.xpath("//div//button[contains (text(), 'Move to Receive Qty')]"));
			moveToReceiveQtyButton.click();

			String attribute = totalReceiptValue.getAttribute("value");
			WebElement invoiceValue = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[6]"));
			invoiceValue.sendKeys(attribute);
		} else {
			System.out.println("Purchase Category NOT MATCHING");
		}
	}

	@When("User create the GRN Request for Partially Received - \\(WEB Order - RM - Domestic)")
	public void user_create_the_grn_request_for_partially_received_web_order_rm_domestic() throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;

		WebElement receiptmodule = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		receiptmodule.click();

		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement addBtn = driver.findElement(By.xpath("(//button[@title='Add' and @type='button'])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(addBtn));
		addBtn.click();
		Thread.sleep(1000);

		// Store Tile Drop-down Fields

		WebElement storeTileDropdown = driver.findElement(By.xpath("//*[@id='headingOne']/h5/button"));
		wait.until(ExpectedConditions.elementToBeClickable(storeTileDropdown));
		j.executeScript("arguments[0].click();", storeTileDropdown);
		Thread.sleep(1000);

		WebElement branch = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[1]/app-form-dyna-select/div/select")));
		wait.until(ExpectedConditions.visibilityOf(branch));
		select(branch).selectByIndex(1);
		Thread.sleep(500);

		WebElement store = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[2]/app-form-dyna-select/div/select")));
		select(store).selectByIndex(0);
		Thread.sleep(500);

		WebElement orderType = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[3]/app-form-dyna-select/div/select")));
		select(orderType).selectByIndex(1);
		Thread.sleep(500);

		WebElement materialType = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[4]/app-form-dyna-select/div/select")));
		select(materialType).selectByIndex(0);
		Thread.sleep(500);

		WebElement vendorField = driver.findElement(By.xpath("(//input[@type='text' and @role='combobox'])[1]"));
		vendorField.sendKeys("A");
		Thread.sleep(500);

		List<WebElement> vendorList = driver.findElements(By.xpath("(//ul[@role='listbox'])[1]//li"));
		for (WebElement webElement : vendorList) {
			String list = webElement.getText();
			if (list.contains("A.K.INDUSTRIES")) {
				Thread.sleep(500);
				webElement.click();
				System.out.println(webElement);
				break;
			}
			Thread.sleep(1000);
		}

		WebElement multiPO = driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[6]/app-form-dyna-select/div/select"));
		select(multiPO);
		int lastIndex = getOptions(multiPO).size() - 1;
		selectOptionByIndex(multiPO, lastIndex);
		Thread.sleep(1000);

		// Master Fields
		/* /for "Domestic"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("1: 2"));

		if (attribute2.equals("1: 2")) {

			WebElement receiptNumber = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[1]"));
			if (receiptNumber.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Receipt Number : " + receiptNumber.getAttribute("value"));
			}

			WebElement receiptDateandTime = driver
					.findElement(By.xpath("(//app-form-text//div//input [@type='text'])[2]"));
			if (receiptDateandTime.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Receipt Date/Time : " + receiptDateandTime.getAttribute("value"));
			}

			WebElement invoiceDate = driver.findElement(By.xpath("(//input [@type='date'])[1]"));
			String date = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			invoiceDate.sendKeys(date);

			WebElement invoiceNumber = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[2]"));
			invoiceNumber.sendKeys(UUID());

			WebElement logisticsCarrier = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[1]"));
			selectOptionByIndex(logisticsCarrier, 1);

			WebElement incoterm = driver
					.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]//option [@value='0: 1']"));
			if (incoterm.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Incoterm : " + incoterm.getAttribute("text"));
			}

			WebElement purchaseCategory = driver
					.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]//option[@value='1: 2']"));
			if (purchaseCategory.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Purchase Category : " + purchaseCategory.getAttribute("text"));
			}

			WebElement trackingNo = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[3]"));
			trackingNo.sendKeys("1234");

			WebElement noOfPackages = driver.findElement(By.xpath("(//input[@pattern='[0-9]*'])[1]"));
			noOfPackages.sendKeys("2");

			// Store Tile Drop-down Fields

			WebElement geDate = driver.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[2]"));
			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			geDate.sendKeys(date2);
			Thread.sleep(1000);

			WebElement gateEntryNo = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[4]"));
			gateEntryNo.sendKeys("2");

			WebElement paymentTerms = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[8]"));
			if (paymentTerms.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");

			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Payment Terms : " + paymentTerms.getAttribute("text"));
			}

			WebElement paymentDueDate = driver
					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[3]"));
			String date3 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			paymentDueDate.sendKeys(date3);
			Thread.sleep(1000);

			WebElement currency = driver.findElement(By.xpath("(//app-form-dyna-select[1]//div[1]//select)[9]"));
			if (currency.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Currency : " + currency.getAttribute("text"));
			}

			WebElement totalReceiptValue = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[9]"));
			if (totalReceiptValue.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");

			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Total Receipt Value : " + totalReceiptValue.getAttribute("value"));
			}

			WebElement additionalChargesTax = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[10]"));
			additionalChargesTax.sendKeys("50");

			WebElement additionalChargesNonTax = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[11]"));
			additionalChargesNonTax.sendKeys("50");

			WebElement remarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[1]"));
			remarks.sendKeys("Suresh : GRN Entry");
			Thread.sleep(1000);

			WebElement toBeCredit = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[12]"));
			if (toBeCredit.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");

			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("To Be Credit Value : " + toBeCredit.getAttribute("value"));
			}

			WebElement storeReceiveQty = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l11 r11')]"));
			j.executeScript("arguments[0].click();", storeReceiveQty);
			WebElement storeReceiveQty1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l11 r11')]//input"));
			storeReceiveQty1.sendKeys("50");

			WebElement moveToReceiveQtyButton = driver
					.findElement(By.xpath("//div//button[contains (text(), 'Move to Receive Qty')]"));
			moveToReceiveQtyButton.click();

			String attribute = totalReceiptValue.getAttribute("value");
			WebElement invoiceValue = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[6]"));
			invoiceValue.sendKeys(attribute);
		} else {
			System.out.println("Purchase Category NOT MATCHING");
		}
	}

	@When("User create the GRN Request for Partially Received - \\(PO Order - FG - Domestic)")
	public void user_create_the_grn_request_for_partially_received_po_order_fg_domestic() throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;

		WebElement receiptmodule = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		receiptmodule.click();

		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement addBtn = driver.findElement(By.xpath("(//button[@title='Add' and @type='button'])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(addBtn));
		addBtn.click();
		Thread.sleep(1000);

		// Store Tile Drop-down Fields

		WebElement storeTileDropdown = driver.findElement(By.xpath("//*[@id='headingOne']/h5/button"));
		wait.until(ExpectedConditions.elementToBeClickable(storeTileDropdown));
		j.executeScript("arguments[0].click();", storeTileDropdown);
		Thread.sleep(1000);

		WebElement branch = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[1]/app-form-dyna-select/div/select")));
		wait.until(ExpectedConditions.visibilityOf(branch));
		select(branch).selectByIndex(1);
		Thread.sleep(500);

		WebElement store = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[2]/app-form-dyna-select/div/select")));
		select(store).selectByIndex(0);
		Thread.sleep(500);

		WebElement orderType = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[3]/app-form-dyna-select/div/select")));
		select(orderType).selectByIndex(0);
		Thread.sleep(500);

		WebElement materialType = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[4]/app-form-dyna-select/div/select")));
		select(materialType).selectByIndex(1);
		Thread.sleep(500);

		WebElement vendorField = driver.findElement(By.xpath("(//input[@type='text' and @role='combobox'])[1]"));
		vendorField.sendKeys("A");
		Thread.sleep(500);

		List<WebElement> vendorList = driver.findElements(By.xpath("(//ul[@role='listbox'])[1]//li"));
		for (WebElement webElement : vendorList) {
			String list = webElement.getText();
			if (list.contains("A.K.INDUSTRIES")) {
				Thread.sleep(500);
				webElement.click();
				System.out.println(webElement);
				break;
			}
			Thread.sleep(1000);
		}

		WebElement multiPO = driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[6]/app-form-dyna-select/div/select"));
		select(multiPO);
		int lastIndex = getOptions(multiPO).size() - 1;
		selectOptionByIndex(multiPO, lastIndex);
		Thread.sleep(1000);

		// Master Fields
		/* /for "Domestic"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("1: 2"));

		if (attribute2.equals("1: 2")) {

			WebElement receiptNumber = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[1]"));
			if (receiptNumber.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Receipt Number : " + receiptNumber.getAttribute("value"));
			}

			WebElement receiptDateandTime = driver
					.findElement(By.xpath("(//app-form-text//div//input [@type='text'])[2]"));
			if (receiptDateandTime.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Receipt Date/Time : " + receiptDateandTime.getAttribute("value"));
			}

			WebElement invoiceDate = driver.findElement(By.xpath("(//input [@type='date'])[1]"));
			String date = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			invoiceDate.sendKeys(date);

			WebElement invoiceNumber = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[2]"));
			invoiceNumber.sendKeys(UUID());

			WebElement logisticsCarrier = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[1]"));
			selectOptionByIndex(logisticsCarrier, 1);

			WebElement incoterm = driver
					.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]//option [@value='0: 1']"));
			if (incoterm.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Incoterm : " + incoterm.getAttribute("text"));
			}

			WebElement purchaseCategory = driver
					.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]//option[@value='1: 2']"));
			if (purchaseCategory.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Purchase Category : " + purchaseCategory.getAttribute("text"));
			}

			WebElement trackingNo = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[3]"));
			trackingNo.sendKeys("1234");

			WebElement noOfPackages = driver.findElement(By.xpath("(//input[@pattern='[0-9]*'])[1]"));
			noOfPackages.sendKeys("2");

			// Store Tile Drop-down Fields

			WebElement geDate = driver.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[2]"));
			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			geDate.sendKeys(date2);
			Thread.sleep(1000);

			WebElement gateEntryNo = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[4]"));
			gateEntryNo.sendKeys("2");

			WebElement paymentTerms = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[8]"));
			if (paymentTerms.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");

			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Payment Terms : " + paymentTerms.getAttribute("text"));
			}

			WebElement paymentDueDate = driver
					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[3]"));
			String date3 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			paymentDueDate.sendKeys(date3);
			Thread.sleep(1000);

			WebElement currency = driver.findElement(By.xpath("(//app-form-dyna-select[1]//div[1]//select)[9]"));
			if (currency.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Currency : " + currency.getAttribute("text"));
			}

			WebElement totalReceiptValue = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[9]"));
			if (totalReceiptValue.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");

			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Total Receipt Value : " + totalReceiptValue.getAttribute("value"));
			}

			WebElement additionalChargesTax = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[10]"));
			additionalChargesTax.sendKeys("50");

			WebElement additionalChargesNonTax = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[11]"));
			additionalChargesNonTax.sendKeys("50");

			WebElement remarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[1]"));
			remarks.sendKeys("Suresh : GRN Entry");
			Thread.sleep(1000);

			WebElement toBeCredit = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[12]"));
			if (toBeCredit.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");

			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("To Be Credit Value : " + toBeCredit.getAttribute("value"));
			}

			WebElement storeReceiveQty = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l11 r11')]"));
			j.executeScript("arguments[0].click();", storeReceiveQty);
			WebElement storeReceiveQty1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l11 r11')]//input"));
			storeReceiveQty1.sendKeys("50");

			WebElement moveToReceiveQtyButton = driver
					.findElement(By.xpath("//div//button[contains (text(), 'Move to Receive Qty')]"));
			moveToReceiveQtyButton.click();

			String attribute = totalReceiptValue.getAttribute("value");
			WebElement invoiceValue = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[6]"));
			invoiceValue.sendKeys(attribute);
		} else {
			System.out.println("Purchase Category NOT MATCHING");
		}
	}

	@When("User create the GRN Request for Partially Received - \\(WEB Order - FG - Domestic)")
	public void user_create_the_grn_request_for_partially_received_web_order_fg_domestic() throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;

		WebElement receiptmodule = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		receiptmodule.click();

		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement addBtn = driver.findElement(By.xpath("(//button[@title='Add' and @type='button'])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(addBtn));
		addBtn.click();
		Thread.sleep(1000);

		// Store Tile Drop-down Fields

		WebElement storeTileDropdown = driver.findElement(By.xpath("//*[@id='headingOne']/h5/button"));
		wait.until(ExpectedConditions.elementToBeClickable(storeTileDropdown));
		j.executeScript("arguments[0].click();", storeTileDropdown);
		Thread.sleep(1000);

		WebElement branch = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[1]/app-form-dyna-select/div/select")));
		wait.until(ExpectedConditions.visibilityOf(branch));
		select(branch).selectByIndex(1);
		Thread.sleep(500);

		WebElement store = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[2]/app-form-dyna-select/div/select")));
		select(store).selectByIndex(0);
		Thread.sleep(500);

		WebElement orderType = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[3]/app-form-dyna-select/div/select")));
		select(orderType).selectByIndex(1);
		Thread.sleep(500);

		WebElement materialType = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[4]/app-form-dyna-select/div/select")));
		select(materialType).selectByIndex(1);
		Thread.sleep(500);

		WebElement vendorField = driver.findElement(By.xpath("(//input[@type='text' and @role='combobox'])[1]"));
		vendorField.sendKeys("A");
		Thread.sleep(500);

		List<WebElement> vendorList = driver.findElements(By.xpath("(//ul[@role='listbox'])[1]//li"));
		for (WebElement webElement : vendorList) {
			String list = webElement.getText();
			if (list.contains("A.K.INDUSTRIES")) {
				Thread.sleep(500);
				webElement.click();
				System.out.println(webElement);
				break;
			}
			Thread.sleep(1000);
		}

		WebElement multiPO = driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[6]/app-form-dyna-select/div/select"));
		select(multiPO);
		int lastIndex = getOptions(multiPO).size() - 1;
		selectOptionByIndex(multiPO, lastIndex);
		Thread.sleep(1000);

		// Master Fields
		/* /for "Domestic"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("1: 2"));

		if (attribute2.equals("1: 2")) {

			WebElement receiptNumber = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[1]"));
			if (receiptNumber.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Receipt Number : " + receiptNumber.getAttribute("value"));
			}

			WebElement receiptDateandTime = driver
					.findElement(By.xpath("(//app-form-text//div//input [@type='text'])[2]"));
			if (receiptDateandTime.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Receipt Date/Time : " + receiptDateandTime.getAttribute("value"));
			}

			WebElement invoiceDate = driver.findElement(By.xpath("(//input [@type='date'])[1]"));
			String date = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			invoiceDate.sendKeys(date);

			WebElement invoiceNumber = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[2]"));
			invoiceNumber.sendKeys(UUID());

			WebElement logisticsCarrier = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[1]"));
			selectOptionByIndex(logisticsCarrier, 1);

			WebElement incoterm = driver
					.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]//option [@value='0: 1']"));
			if (incoterm.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Incoterm : " + incoterm.getAttribute("text"));
			}

			WebElement purchaseCategory = driver
					.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]//option[@value='1: 2']"));
			if (purchaseCategory.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Purchase Category : " + purchaseCategory.getAttribute("text"));
			}

			WebElement trackingNo = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[3]"));
			trackingNo.sendKeys("1234");

			WebElement noOfPackages = driver.findElement(By.xpath("(//input[@pattern='[0-9]*'])[1]"));
			noOfPackages.sendKeys("2");

			// Store Tile Drop-down Fields

			WebElement geDate = driver.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[2]"));
			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			geDate.sendKeys(date2);
			Thread.sleep(1000);

			WebElement gateEntryNo = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[4]"));
			gateEntryNo.sendKeys("2");

			WebElement paymentTerms = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[8]"));
			if (paymentTerms.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");

			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Payment Terms : " + paymentTerms.getAttribute("text"));
			}

			WebElement paymentDueDate = driver
					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[3]"));
			String date3 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			paymentDueDate.sendKeys(date3);
			Thread.sleep(1000);

			WebElement currency = driver.findElement(By.xpath("(//app-form-dyna-select[1]//div[1]//select)[9]"));
			if (currency.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Currency : " + currency.getAttribute("text"));
			}

			WebElement totalReceiptValue = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[9]"));
			if (totalReceiptValue.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");

			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Total Receipt Value : " + totalReceiptValue.getAttribute("value"));
			}

			WebElement additionalChargesTax = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[10]"));
			additionalChargesTax.sendKeys("50");

			WebElement additionalChargesNonTax = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[11]"));
			additionalChargesNonTax.sendKeys("50");

			WebElement remarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[1]"));
			remarks.sendKeys("Suresh : GRN Entry");
			Thread.sleep(1000);

			WebElement toBeCredit = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[12]"));
			if (toBeCredit.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");

			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("To Be Credit Value : " + toBeCredit.getAttribute("value"));
			}

			WebElement storeReceiveQty = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l11 r11')]"));
			j.executeScript("arguments[0].click();", storeReceiveQty);
			WebElement storeReceiveQty1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l11 r11')]//input"));
			storeReceiveQty1.sendKeys("50");

			WebElement moveToReceiveQtyButton = driver
					.findElement(By.xpath("//div//button[contains (text(), 'Move to Receive Qty')]"));
			moveToReceiveQtyButton.click();

			String attribute = totalReceiptValue.getAttribute("value");
			WebElement invoiceValue = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[6]"));
			invoiceValue.sendKeys(attribute);
		} else {
			System.out.println("Purchase Category NOT MATCHING");
		}
	}

	@When("User create the GRN Request for Partially Received - \\(PO Order - NPM - Domestic)")
	public void user_create_the_grn_request_for_partially_received_po_order_npm_domestic() throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;

		WebElement receiptmodule = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		receiptmodule.click();

		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement addBtn = driver.findElement(By.xpath("(//button[@title='Add' and @type='button'])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(addBtn));
		addBtn.click();
		Thread.sleep(1000);

		// Store Tile Drop-down Fields

		WebElement storeTileDropdown = driver.findElement(By.xpath("//*[@id='headingOne']/h5/button"));
		wait.until(ExpectedConditions.elementToBeClickable(storeTileDropdown));
		j.executeScript("arguments[0].click();", storeTileDropdown);
		Thread.sleep(1000);

		WebElement branch = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[1]/app-form-dyna-select/div/select")));
		wait.until(ExpectedConditions.visibilityOf(branch));
		select(branch).selectByIndex(1);
		Thread.sleep(500);

		WebElement store = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[2]/app-form-dyna-select/div/select")));
		select(store).selectByIndex(0);
		Thread.sleep(500);

		WebElement orderType = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[3]/app-form-dyna-select/div/select")));
		select(orderType).selectByIndex(0);
		Thread.sleep(500);

		WebElement materialType = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[4]/app-form-dyna-select/div/select")));
		select(materialType).selectByIndex(2);
		Thread.sleep(500);

		WebElement vendorField = driver.findElement(By.xpath("(//input[@type='text' and @role='combobox'])[1]"));
		vendorField.sendKeys("A");
		Thread.sleep(500);

		List<WebElement> vendorList = driver.findElements(By.xpath("(//ul[@role='listbox'])[1]//li"));
		for (WebElement webElement : vendorList) {
			String list = webElement.getText();
			if (list.contains("A.K.INDUSTRIES")) {
				Thread.sleep(500);
				webElement.click();
				System.out.println(webElement);
				break;
			}
			Thread.sleep(1000);
		}

		WebElement multiPO = driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[6]/app-form-dyna-select/div/select"));
		select(multiPO);
		int lastIndex = getOptions(multiPO).size() - 1;
		selectOptionByIndex(multiPO, lastIndex);
		Thread.sleep(1000);

		// Master Fields
		/* /for "Domestic"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("1: 2"));

		if (attribute2.equals("1: 2")) {

			WebElement receiptNumber = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[1]"));
			if (receiptNumber.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Receipt Number : " + receiptNumber.getAttribute("value"));
			}

			WebElement receiptDateandTime = driver
					.findElement(By.xpath("(//app-form-text//div//input [@type='text'])[2]"));
			if (receiptDateandTime.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Receipt Date/Time : " + receiptDateandTime.getAttribute("value"));
			}

			WebElement invoiceDate = driver.findElement(By.xpath("(//input [@type='date'])[1]"));
			String date = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			invoiceDate.sendKeys(date);

			WebElement invoiceNumber = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[2]"));
			invoiceNumber.sendKeys(UUID());

			WebElement logisticsCarrier = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[1]"));
			selectOptionByIndex(logisticsCarrier, 1);

			WebElement incoterm = driver
					.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]//option [@value='0: 1']"));
			if (incoterm.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Incoterm : " + incoterm.getAttribute("text"));
			}

			WebElement purchaseCategory = driver
					.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]//option[@value='1: 2']"));
			if (purchaseCategory.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Purchase Category : " + purchaseCategory.getAttribute("text"));
			}

			WebElement trackingNo = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[3]"));
			trackingNo.sendKeys("1234");

			WebElement noOfPackages = driver.findElement(By.xpath("(//input[@pattern='[0-9]*'])[1]"));
			noOfPackages.sendKeys("2");

			// Store Tile Drop-down Fields

			WebElement geDate = driver.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[2]"));
			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			geDate.sendKeys(date2);
			Thread.sleep(1000);

			WebElement gateEntryNo = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[4]"));
			gateEntryNo.sendKeys("2");

			WebElement paymentTerms = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[8]"));
			if (paymentTerms.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");

			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Payment Terms : " + paymentTerms.getAttribute("text"));
			}

			WebElement paymentDueDate = driver
					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[3]"));
			String date3 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			paymentDueDate.sendKeys(date3);
			Thread.sleep(1000);

			WebElement currency = driver.findElement(By.xpath("(//app-form-dyna-select[1]//div[1]//select)[9]"));
			if (currency.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Currency : " + currency.getAttribute("text"));
			}

			WebElement totalReceiptValue = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[9]"));
			if (totalReceiptValue.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");

			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Total Receipt Value : " + totalReceiptValue.getAttribute("value"));
			}

			WebElement additionalChargesTax = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[10]"));
			additionalChargesTax.sendKeys("50");

			WebElement additionalChargesNonTax = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[11]"));
			additionalChargesNonTax.sendKeys("50");

			WebElement remarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[1]"));
			remarks.sendKeys("Suresh : GRN Entry");
			Thread.sleep(1000);

			WebElement toBeCredit = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[12]"));
			if (toBeCredit.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");

			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("To Be Credit Value : " + toBeCredit.getAttribute("value"));
			}

			WebElement storeReceiveQty = driver.findElement(
					By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l10 r10 selected']"));
			j.executeScript("arguments[0].click();", storeReceiveQty);
			WebElement storeReceiveQty1 = driver.findElement(By.xpath(
					"//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l10 r10 active selected editable']//input"));
			storeReceiveQty1.sendKeys("50");

			WebElement moveToReceiveQtyButton = driver
					.findElement(By.xpath("//div//button[contains (text(), 'Move to Receive Qty')]"));
			moveToReceiveQtyButton.click();

			String attribute = totalReceiptValue.getAttribute("value");
			WebElement invoiceValue = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[6]"));
			invoiceValue.sendKeys(attribute);
		} else {
			System.out.println("Purchase Category NOT MATCHING");
		}
	}

	@When("User create the GRN Request for Partially Received - \\(WEB Order - NPM - Domestic)")
	public void user_create_the_grn_request_for_partially_received_web_order_npm_domestic()
			throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;

		WebElement receiptmodule = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		receiptmodule.click();

		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement addBtn = driver.findElement(By.xpath("(//button[@title='Add' and @type='button'])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(addBtn));
		addBtn.click();
		Thread.sleep(1000);

		// Store Tile Drop-down Fields

		WebElement storeTileDropdown = driver.findElement(By.xpath("//*[@id='headingOne']/h5/button"));
		wait.until(ExpectedConditions.elementToBeClickable(storeTileDropdown));
		j.executeScript("arguments[0].click();", storeTileDropdown);
		Thread.sleep(1000);

		WebElement branch = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[1]/app-form-dyna-select/div/select")));
		wait.until(ExpectedConditions.visibilityOf(branch));
		select(branch).selectByIndex(1);
		Thread.sleep(500);

		WebElement store = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[2]/app-form-dyna-select/div/select")));
		select(store).selectByIndex(0);
		Thread.sleep(500);

		WebElement orderType = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[3]/app-form-dyna-select/div/select")));
		select(orderType).selectByIndex(1);
		Thread.sleep(500);

		WebElement materialType = (driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[4]/app-form-dyna-select/div/select")));
		select(materialType).selectByIndex(2);
		Thread.sleep(500);

		WebElement vendorField = driver.findElement(By.xpath("(//input[@type='text' and @role='combobox'])[1]"));
		vendorField.sendKeys("A");
		Thread.sleep(500);

		List<WebElement> vendorList = driver.findElements(By.xpath("(//ul[@role='listbox'])[1]//li"));
		for (WebElement webElement : vendorList) {
			String list = webElement.getText();
			if (list.contains("A.K.INDUSTRIES")) {
				Thread.sleep(500);
				webElement.click();
				System.out.println(webElement);
				break;
			}
			Thread.sleep(1000);
		}

		WebElement multiPO = driver
				.findElement(By.xpath("//*[@id='collapseOne']/div/div[6]/app-form-dyna-select/div/select"));
		select(multiPO);
		int lastIndex = getOptions(multiPO).size() - 1;
		selectOptionByIndex(multiPO, lastIndex);
		Thread.sleep(1000);

		// Master Fields
		/* /for "Domestic"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("1: 2"));

		if (attribute2.equals("1: 2")) {

			WebElement receiptNumber = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[1]"));
			if (receiptNumber.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Receipt Number : " + receiptNumber.getAttribute("value"));
			}

			WebElement receiptDateandTime = driver
					.findElement(By.xpath("(//app-form-text//div//input [@type='text'])[2]"));
			if (receiptDateandTime.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Receipt Date/Time : " + receiptDateandTime.getAttribute("value"));
			}

			WebElement invoiceDate = driver.findElement(By.xpath("(//input [@type='date'])[1]"));
			String date = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			invoiceDate.sendKeys(date);

			WebElement invoiceNumber = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[2]"));
			invoiceNumber.sendKeys(UUID());

			WebElement logisticsCarrier = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[1]"));
			selectOptionByIndex(logisticsCarrier, 1);

			WebElement incoterm = driver
					.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]//option [@value='0: 1']"));
			if (incoterm.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Incoterm : " + incoterm.getAttribute("text"));
			}

			WebElement purchaseCategory = driver
					.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]//option[@value='1: 2']"));
			if (purchaseCategory.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Purchase Category : " + purchaseCategory.getAttribute("text"));
			}

			WebElement trackingNo = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[3]"));
			trackingNo.sendKeys("1234");

			WebElement noOfPackages = driver.findElement(By.xpath("(//input[@pattern='[0-9]*'])[1]"));
			noOfPackages.sendKeys("2");

			// Store Tile Drop-down Fields

			WebElement geDate = driver.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[2]"));
			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			geDate.sendKeys(date2);
			Thread.sleep(1000);

			WebElement gateEntryNo = driver.findElement(By.xpath("(//input[@pattern='[a-zA-Z0-9*-{}@()/\\s]+'])[4]"));
			gateEntryNo.sendKeys("2");

			WebElement paymentTerms = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[8]"));
			if (paymentTerms.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");

			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Payment Terms : " + paymentTerms.getAttribute("text"));
			}

			WebElement paymentDueDate = driver
					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[3]"));
			String date3 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			paymentDueDate.sendKeys(date3);
			Thread.sleep(1000);

			WebElement currency = driver.findElement(By.xpath("(//app-form-dyna-select[1]//div[1]//select)[9]"));
			if (currency.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");
			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Currency : " + currency.getAttribute("text"));
			}

			WebElement totalReceiptValue = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[9]"));
			if (totalReceiptValue.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");

			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("Total Receipt Value : " + totalReceiptValue.getAttribute("value"));
			}

			WebElement additionalChargesTax = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[10]"));
			additionalChargesTax.sendKeys("50");

			WebElement additionalChargesNonTax = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[11]"));
			additionalChargesNonTax.sendKeys("50");

			WebElement remarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[1]"));
			remarks.sendKeys("Suresh : GRN Entry");
			Thread.sleep(1000);

			WebElement toBeCredit = driver.findElement(
					By.xpath("(//div//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[12]"));
			if (toBeCredit.isEnabled()) {
				System.out.println("Field is Enabled as Not Expected");

			} else {
				System.out.println("Field is Disabled as Expected");
				System.out.println("To Be Credit Value : " + toBeCredit.getAttribute("value"));
			}

			WebElement storeReceiveQty = driver.findElement(
					By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l10 r10 selected']"));
			j.executeScript("arguments[0].click();", storeReceiveQty);
			WebElement storeReceiveQty1 = driver.findElement(By.xpath(
					"//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l10 r10 active selected editable']//input"));
			storeReceiveQty1.sendKeys("50");

			WebElement moveToReceiveQtyButton = driver
					.findElement(By.xpath("//div//button[contains (text(), 'Move to Receive Qty')]"));
			moveToReceiveQtyButton.click();

			String attribute = totalReceiptValue.getAttribute("value");
			WebElement invoiceValue = driver.findElement(
					By.xpath("(//app-form-text//div//input[@tooltipposition='bottom' and @type='text'])[6]"));
			invoiceValue.sendKeys(attribute);
		} else {
			System.out.println("Purchase Category NOT MATCHING");
		}
	}

	@When("User click on the save button")
	public void user_click_on_the_save_button() throws InterruptedException {
		try {
			Thread.sleep(500);
			WebElement saveButton = driver
					.findElement(By.xpath("(//div//button[@id='submitbutton' and @type='submit'])"));
			JavascriptExecutor js = (JavascriptExecutor) driver;
			js.executeScript("arguments[0].scrollIntoView(true);", saveButton);
			WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(30));
			wait.until(ExpectedConditions.elementToBeClickable(saveButton));
			if (saveButton.isEnabled()) {
				System.out.println("Save Button Enabled");
				js.executeScript("arguments[0].click();", saveButton);
			} else {
				wait.until(ExpectedConditions.visibilityOf(saveButton));
				js.executeScript("arguments[0].click();", saveButton);
				System.out.println("Save Button Check Retry");
			}

//			Thread.sleep(2000);
			WebElement successfullPoCreation = wait.until(ExpectedConditions.presenceOfElementLocated(
					By.xpath("//app-wstable//div[@class='ws-table-head']//table[@role='grid']//tbody//tr[1]")));
//			WebElement successfullPoCreation = driver.findElement(
//					By.xpath("//app-wstable//div[@class='ws-table-head']//table[@role='grid']//tbody//tr[1]"));
//			wait.until(ExpectedConditions.visibilityOf(successfullPoCreation));
			js.executeScript("window.scrollTo(0,0);", successfullPoCreation);
			System.out.println("Successfull PO Creation : " + successfullPoCreation.getText());

		} catch (StaleElementReferenceException | NoSuchElementException e) {
		}
		Thread.sleep(5000);
	}

	@When("User select the Fully Received status from the filter - \\(PO Order - RM - Domestic)")
	public void user_select_the_fully_received_status_from_the_filter_po_order_rm_domestic()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		receiptBtn.click();

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 1);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 1);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 2);
		Thread.sleep(3000);
	}

	@When("User select the Fully Received status from the filter - \\(Testing & Services - Domestic)")
	public void user_select_the_fully_received_status_from_the_filter_testing_services_domestic()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		receiptBtn.click();

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 3);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 2);
		Thread.sleep(3000);
	}

	@When("User select the Fully Received status from the filter - \\(WEB Order - RM - Domestic)")
	public void user_select_the_fully_received_status_from_the_filter_web_order_rm_domestic()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		receiptBtn.click();

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 1);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 2);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 2);
		Thread.sleep(3000);
	}

	@When("User select the Fully Received status from the filter - \\(PO Order - FG - Domestic)")
	public void user_select_the_fully_received_status_from_the_filter_po_order_fg_domestic()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		receiptBtn.click();

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 2);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 1);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 2);
		Thread.sleep(3000);
	}

	@When("User select the Fully Received status from the filter - \\(WEB Order - FG - Domestic)")
	public void user_select_the_fully_received_status_from_the_filter_web_order_fg_domestic()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		receiptBtn.click();

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 2);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 2);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 2);
		Thread.sleep(3000);
	}

	@When("User select the Fully Received status from the filter - \\(PO Order - NPM - Domestic)")
	public void user_select_the_fully_received_status_from_the_filter_po_order_npm_domestic()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		receiptBtn.click();

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 3);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 1);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 2);
		Thread.sleep(3000);
	}

	@When("User select the Fully Received status from the filter - \\(WEB Order - NPM - Domestic)")
	public void user_select_the_fully_received_status_from_the_filter_web_order_npm_domestic()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		receiptBtn.click();

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 3);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 2);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 2);
		Thread.sleep(3000);
	}

	@When("User select the Fully Received status from the filter  - \\(PO Order - RM - Import)")
	public void user_select_the_fully_received_status_from_the_filter_po_order_rm_import() throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		receiptBtn.click();

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 1);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 1);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 2);
		Thread.sleep(3000);
	}

	@When("User select the Fully Received status from the filter - \\(Testing & Services - Import)")
	public void user_select_the_fully_received_status_from_the_filter_testing_services_import()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		receiptBtn.click();

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 3);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 2);
		Thread.sleep(3000);
	}

	@When("User select the Fully Received status from the filter  - \\(WEB Order - RM - Import)")
	public void user_select_the_fully_received_status_from_the_filter_web_order_rm_import()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		receiptBtn.click();

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 1);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 2);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 2);
		Thread.sleep(3000);
	}

	@When("User select the Fully Received status from the filter  - \\(PO Order - FG - Import)")
	public void user_select_the_fully_received_status_from_the_filter_po_order_fg_import() throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		receiptBtn.click();

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 2);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 1);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 2);
		Thread.sleep(3000);
	}

	@When("User select the Fully Received status from the filter  - \\(WEB Order - FG - Import)")
	public void user_select_the_fully_received_status_from_the_filter_web_order_fg_import()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		receiptBtn.click();

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 2);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 2);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 2);
		Thread.sleep(3000);
	}

	@When("User select the Fully Received status from the filter  - \\(PO Order - NPM - Import)")
	public void user_select_the_fully_received_status_from_the_filter_po_order_npm_import()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		receiptBtn.click();

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 3);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 1);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 2);
		Thread.sleep(3000);
	}

	@When("User select the Fully Received status from the filter  - \\(WEB Order - NPM - Import)")
	public void user_select_the_fully_received_status_from_the_filter_web_order_npm_import()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		receiptBtn.click();

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 3);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 2);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 2);
		Thread.sleep(3000);
	}

	@When("User select the Partially Received status from the filter  - \\(PO Order - RM - Import)")
	public void user_select_the_partially_received_status_from_the_filter_po_order_rm_import()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		receiptBtn.click();

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 1);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 1);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 1);
		Thread.sleep(3000);
	}

	@When("User select the Partially Received status from the filter - \\(Testing & Services - Import)")
	public void user_select_the_partially_received_status_from_the_filter_testing_services_import()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		receiptBtn.click();

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 3);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 1);
		Thread.sleep(3000);
	}

	@When("User select the Partially Received status from the filter  - \\(WEB Order - RM - Import)")
	public void user_select_the_partially_received_status_from_the_filter_web_order_rm_import()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		receiptBtn.click();

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 1);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 2);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 1);
		Thread.sleep(3000);
	}

	@When("User select the Partially Received status from the filter  - \\(PO Order - FG - Import)")
	public void user_select_the_partially_received_status_from_the_filter_po_order_fg_import()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		receiptBtn.click();

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 2);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 1);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 1);
		Thread.sleep(3000);
	}

	@When("User select the Partially Received status from the filter  - \\(WEB Order - FG - Import)")
	public void user_select_the_partially_received_status_from_the_filter_web_order_fg_import()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		receiptBtn.click();

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 2);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 2);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 1);
		Thread.sleep(3000);
	}

	@When("User select the Partially Received status from the filter  - \\(PO Order - NPM - Import)")
	public void user_select_the_partially_received_status_from_the_filter_po_order_npm_import()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		receiptBtn.click();

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 3);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 1);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 1);
		Thread.sleep(3000);
	}

	@When("User select the Partially Received status from the filter  - \\(WEB Order - NPM - Import)")
	public void user_select_the_partially_received_status_from_the_filter_web_order_npm_import()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		receiptBtn.click();

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 3);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 2);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 1);
		Thread.sleep(3000);
	}

	@When("User select the Partially Received status from the filter - \\(PO Order - RM - Domestic)")
	public void user_select_the_partially_received_status_from_the_filter_po_order_rm_domestic()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		receiptBtn.click();

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 1);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 1);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 1);
		Thread.sleep(3000);
	}

	@When("User select the Partially Received status from the filter - \\(Testing & Services - Domestic)")
	public void user_select_the_partially_received_status_from_the_filter_testing_services_domestic()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		receiptBtn.click();

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 3);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 1);
		Thread.sleep(3000);
	}

	@When("User select the Fully Received status from the filter - \\(CSM - Domestic)")
	public void user_select_the_fully_received_status_from_the_filter_csm_domestic() throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		receiptBtn.click();

		WebElement Status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(Status, 0);
		Thread.sleep(2000);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 4);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 2);
		Thread.sleep(3000);
	}

	@When("User select the Partially Received status from the filter - \\(WEB Order - RM - Domestic)")
	public void user_select_the_partially_received_status_from_the_filter_web_order_rm_domestic()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		receiptBtn.click();

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 1);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 2);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 1);
		Thread.sleep(3000);
	}

	@When("User select the Partially Received status from the filter - \\(PO Order - FG - Domestic)")
	public void user_select_the_partially_received_status_from_the_filter_po_order_fg_domestic()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		receiptBtn.click();

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 2);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 1);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 1);
		Thread.sleep(3000);
	}

	@When("User select the Partially Received status from the filter - \\(WEB Order - FG - Domestic)")
	public void user_select_the_partially_received_status_from_the_filter_web_order_fg_domestic()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		receiptBtn.click();

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 2);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 2);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 1);
		Thread.sleep(3000);
	}

	@When("User select the Partially Received status from the filter - \\(PO Order - NPM - Domestic)")
	public void user_select_the_partially_received_status_from_the_filter_po_order_npm_domestic()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		receiptBtn.click();

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 3);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 1);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 1);
		Thread.sleep(3000);
	}

	@When("User select the Partially Received status from the filter - \\(WEB Order - NPM - Domestic)")
	public void user_select_the_partially_received_status_from_the_filter_web_order_npm_domestic()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		receiptBtn.click();

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 3);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 2);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 1);
		Thread.sleep(3000);
	}

	@When("User select the Yet to Logistics status from the filter  - \\(PO Order - RM - Import)")
	public WebElement user_select_the_yet_to_logistics_status_from_the_filter_po_order_rm_import()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(20));
		JavascriptExecutor j = (JavascriptExecutor) driver;

		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		receiptBtn.click();

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 1);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 1);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		wait.until(ExpectedConditions.visibilityOf(GRNStatus));
		WebElement stale_element_click = driver.findElement(By.xpath("//select[@name='curreceiptdate']"));
		stale_element_click.click();
		WebElement refreshedGRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNStatus));
		selectOptionByIndex(refreshedGRNStatus, 1);
		try {
			return wait
					.until(ExpectedConditions.presenceOfElementLocated(By.xpath("//select[@name='receiptstatusid']")));
		} catch (StaleElementReferenceException e) {
			return wait
					.until(ExpectedConditions.presenceOfElementLocated(By.xpath("//select[@name='receiptstatusid']")));
		}
	}

	@When("User select the Yet to Logistics status from the filter - \\(Testing & Services - Import)")
	public WebElement user_select_the_yet_to_logistics_status_from_the_filter_testing_services_import() {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(20));

		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		receiptBtn.click();

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 3);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		wait.until(ExpectedConditions.visibilityOf(GRNStatus));
		WebElement refreshedGRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNStatus));
		selectOptionByIndex(refreshedGRNStatus, 1);
		try {
			return wait
					.until(ExpectedConditions.presenceOfElementLocated(By.xpath("//select[@name='receiptstatusid']")));
		} catch (StaleElementReferenceException e) {
			return wait
					.until(ExpectedConditions.presenceOfElementLocated(By.xpath("//select[@name='receiptstatusid']")));
		}
	}

	@When("User select the Yet to Logistics status from the filter  - \\(WEB Order - RM - Import)")
	public WebElement user_select_the_yet_to_logistics_status_from_the_filter_web_order_rm_import() {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(20));

		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		receiptBtn.click();

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 1);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 2);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		wait.until(ExpectedConditions.visibilityOf(GRNStatus));
		WebElement refreshedGRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNStatus));
		selectOptionByIndex(refreshedGRNStatus, 1);
		try {
			return wait
					.until(ExpectedConditions.presenceOfElementLocated(By.xpath("//select[@name='receiptstatusid']")));
		} catch (StaleElementReferenceException e) {
			return wait
					.until(ExpectedConditions.presenceOfElementLocated(By.xpath("//select[@name='receiptstatusid']")));
		}
	}

	@When("User select the Yet to Logistics status from the filter  - \\(PO Order - FG - Import)")
	public WebElement user_select_the_yet_to_logistics_status_from_the_filter_po_order_fg_import() {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(20));

		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		receiptBtn.click();

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 2);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 1);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		wait.until(ExpectedConditions.visibilityOf(GRNStatus));
		WebElement refreshedGRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNStatus));
		selectOptionByIndex(refreshedGRNStatus, 1);
		try {
			return wait
					.until(ExpectedConditions.presenceOfElementLocated(By.xpath("//select[@name='receiptstatusid']")));
		} catch (StaleElementReferenceException e) {
			return wait
					.until(ExpectedConditions.presenceOfElementLocated(By.xpath("//select[@name='receiptstatusid']")));
		}
	}

	@When("User select the Yet to Logistics status from the filter  - \\(WEB Order - FG - Import)")
	public WebElement user_select_the_yet_to_logistics_status_from_the_filter_web_order_fg_import() {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(20));

		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		receiptBtn.click();

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 2);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 2);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		wait.until(ExpectedConditions.visibilityOf(GRNStatus));
		WebElement refreshedGRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNStatus));
		selectOptionByIndex(refreshedGRNStatus, 1);
		try {
			return wait
					.until(ExpectedConditions.presenceOfElementLocated(By.xpath("//select[@name='receiptstatusid']")));
		} catch (StaleElementReferenceException e) {
			return wait
					.until(ExpectedConditions.presenceOfElementLocated(By.xpath("//select[@name='receiptstatusid']")));
		}
	}

	@When("User select the Yet to Logistics status from the filter  - \\(PO Order - NPM - Import)")
	public WebElement user_select_the_yet_to_logistics_status_from_the_filter_po_order_npm_import() {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(20));

		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		receiptBtn.click();

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 3);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 1);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		wait.until(ExpectedConditions.visibilityOf(GRNStatus));
		WebElement refreshedGRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNStatus));
		selectOptionByIndex(refreshedGRNStatus, 1);
		try {
			return wait
					.until(ExpectedConditions.presenceOfElementLocated(By.xpath("//select[@name='receiptstatusid']")));
		} catch (StaleElementReferenceException e) {
			return wait
					.until(ExpectedConditions.presenceOfElementLocated(By.xpath("//select[@name='receiptstatusid']")));
		}
	}

	@When("User select the Yet to Logistics status from the filter  - \\(WEB Order - NPM - Import)")
	public WebElement user_select_the_yet_to_logistics_status_from_the_filter_web_order_npm_import() {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(20));

		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		receiptBtn.click();

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 3);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 2);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		wait.until(ExpectedConditions.visibilityOf(GRNStatus));
		WebElement refreshedGRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNStatus));
		selectOptionByIndex(refreshedGRNStatus, 1);
		try {
			return wait
					.until(ExpectedConditions.presenceOfElementLocated(By.xpath("//select[@name='receiptstatusid']")));
		} catch (StaleElementReferenceException e) {
			return wait
					.until(ExpectedConditions.presenceOfElementLocated(By.xpath("//select[@name='receiptstatusid']")));
		}
	}

	@When("User enters the logistics fields in logistics tile dropdown - \\(PO Order - RM - Import), \\(Incoterm - EXW, Duty Exemption - NO)")
	public void user_enters_the_logistics_fields_in_logistics_tile_dropdown_po_order_rm_import_incoterm_exw_duty_exemption_no()
			throws InterruptedException {

		JavascriptExecutor j = (JavascriptExecutor) driver;
		// For Incoterm: "EXW"
		WebElement incoterm = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]"));
		selectOptionByIndex(incoterm, 0);

		/* /For "Import"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("0: 1"));

		if (attribute2.equals("0: 1")) {

			WebElement dutyExemption = driver.findElement(By.xpath("(//app-form-select//div//select)[1]"));
			selectOptionByIndex(dutyExemption, 1);

			WebElement customsRequestNo = driver.findElement(By.xpath("(//app-form-text//div//input)[5]"));
			if (customsRequestNo.isEnabled()) {
				System.out.println("Customs Request No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Customs Request No Field : Field is Disabled as Expected");
				System.out.println("Request No : " + customsRequestNo.getAttribute("value"));
			}

			WebElement BOENo = driver.findElement(By.xpath("(//app-form-text//div//input)[6]"));
			if (BOENo.isEnabled()) {
				System.out.println("BOE No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Customs Request No Field : Field is Disabled as Expected");
				System.out.println("BOE No : " + BOENo.getAttribute("value"));
			}

			WebElement BOEDate = driver.findElement(By.xpath("(//app-form-text//div//input)[7]"));
			if (BOEDate.isEnabled()) {
				System.out.println("BOEDate No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Customs Request No Field : Field is Disabled as Expected");
				System.out.println("BOEDate No : " + BOEDate.getAttribute("value"));
			}

			WebElement trackingNo = driver.findElement(By.xpath("(//app-form-text//div//input)[8]"));
			if (trackingNo.isEnabled()) {
				System.out.println("Tracking No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Tracking No Field : Field is Disabled as Expected");
				System.out.println("Tracking No : " + trackingNo.getAttribute("value"));
			}

			WebElement noOfPackages = driver.findElement(By.xpath("(//app-form-text//div//input)[9]"));
			if (noOfPackages.isEnabled()) {
				System.out.println("No of Packages Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("No of Packages Field : Field is Disabled as Expected");
				System.out.println("No of Packages : " + noOfPackages.getAttribute("value"));
			}

			WebElement exchangeRate = driver.findElement(By.xpath("(//app-form-text//div//input)[10]"));
			if (exchangeRate.isEnabled()) {
				System.out.println("Exchange Rate Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("No of Packages Field : Field is Disabled as Expected");
				System.out.println("Exchange Rate : " + exchangeRate.getAttribute("value"));
			}

			WebElement logisticsTileDropdown = driver.findElement(By.xpath("(//*[@id='headingTwo']/h5/button)[1]"));
			logisticsTileDropdown.click();
			Thread.sleep(3000);

			WebElement customDuty = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[20]"));
			customDuty.sendKeys("100");

			WebElement dutyInvoiceNo = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[21]"));
			dutyInvoiceNo.sendKeys(UUID());

			WebElement dutyInvoiceDate = driver
					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[1]"));
			String date1 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			dutyInvoiceDate.sendKeys(date1);

			WebElement delayReason = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[3]"));
			delayReason.sendKeys("NA");

			WebElement pickupDate = driver
					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[2]"));
			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			pickupDate.sendKeys(date2);

			WebElement logisticsRemarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[4]"));
			logisticsRemarks.sendKeys("NA");

			/* / EXW - Import - Grid Fields/ */

			int scrollAmount = 4000;
			WebElement slickGridScroll = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll);
			Thread.sleep(1000);
			j.executeScript("arguments[0].scrollLeft += arguments[1];", slickGridScroll, scrollAmount);
			Thread.sleep(1000);

			WebElement BOEDescription = driver.findElement(
					By.xpath(".//div[contains (@class,'slick-cell l30 r30')]"));
			j.executeScript("arguments[0].click();", BOEDescription);
			WebElement BOEDescription1 = driver.findElement(By.xpath(
					".//div[contains (@class,'slick-cell l30 r30')]//input"));
			BOEDescription1.sendKeys("Logistics Fields");

			WebElement unitPrice = driver.findElement(
					By.xpath(".//div[contains (@class,'slick-cell l33 r33')]"));
			j.executeScript("arguments[0].click();", unitPrice);
			WebElement unitPrice1 = driver.findElement(By.xpath(
					".//div[contains (@class,'slick-cell l33 r33')]//input"));
			unitPrice1.sendKeys("10");

			WebElement extendedValue = driver.findElement(
					By.xpath(".//div[contains (@class,'slick-cell l34 r34')]"));
			WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
			j.executeScript("arguments[0].click();", extendedValue);
			WebElement refreshedExtendedValue = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains (@class,'slick-cell l34 r34')]")));
			String extendedValueAttribute = refreshedExtendedValue.getText();

			WebElement assessableValue = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[18]"));
			assessableValue.sendKeys(extendedValueAttribute);

			WebElement HSCode = driver.findElement(
					By.xpath(".//div[contains (@class,'slick-cell l35 r35')]"));
			j.executeScript("arguments[0].click();", HSCode);
			WebElement HSCode1 = driver.findElement(By.xpath(
					".//div[contains (@class,'slick-cell l35 r35')]//input"));
			HSCode1.sendKeys("12345");

			WebElement itemType = driver.findElement(
					By.xpath(".//div[contains (@class,'slick-cell l36 r36')]"));
			j.executeScript("arguments[0].click();", itemType);
			WebElement itemType1 = driver.findElement(By.xpath(
					".//div[contains (@class,'slick-cell l36 r36')]//select"));
			selectOptionByIndex(itemType1, 3);

			WebElement rateOfDuty = driver.findElement(
					By.xpath(".//div[contains (@class,'slick-cell l37 r37')]"));
			j.executeScript("arguments[0].click();", rateOfDuty);
			WebElement rateOfDuty1 = driver.findElement(By.xpath(
					".//div[contains (@class,'slick-cell l37 r37')]//select"));
			selectOptionByIndex(rateOfDuty1, 3);

			WebElement totalDutyAmt = driver.findElement(
					By.xpath(".//div[contains (@class,'slick-cell l41 r41')]"));
			j.executeScript("arguments[0].click();", totalDutyAmt);
			WebElement refreshedtotalDutyAmt = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains (@class,'slick-cell l41 r41')]")));
			String totalDutyAttribute = refreshedtotalDutyAmt.getText();

			WebElement totalDutyAmount = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[19]"));
			totalDutyAmount.sendKeys(totalDutyAttribute);
		} else {
			System.out.println("Purchase Category NOT MATCHING");
		}
	}

	@When("User enters the logistics fields in logistics tile dropdown - \\(Testing & Services - Import), \\(Incoterm - EXW, Duty Exemption - NO)")
	public void user_enters_the_logistics_fields_in_logistics_tile_dropdown_testing_services_import_incoterm_exw_duty_exemption_no()
			throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;
		// For Incoterm: "EXW"
		WebElement incoterm = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]"));
		selectOptionByIndex(incoterm, 0);

		/* /For "Import"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("0: 1"));

		if (attribute2.equals("0: 1")) {

			WebElement dutyExemption = driver.findElement(By.xpath("(//app-form-select//div//select)[1]"));
			selectOptionByIndex(dutyExemption, 1);

			WebElement customsRequestNo = driver.findElement(By.xpath("(//app-form-text//div//input)[5]"));
			if (customsRequestNo.isEnabled()) {
				System.out.println("Customs Request No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Customs Request No Field : Field is Disabled as Expected");
				System.out.println("Request No : " + customsRequestNo.getAttribute("value"));
			}

			WebElement BOENo = driver.findElement(By.xpath("(//app-form-text//div//input)[6]"));
			if (BOENo.isEnabled()) {
				System.out.println("BOE No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Customs Request No Field : Field is Disabled as Expected");
				System.out.println("BOE No : " + BOENo.getAttribute("value"));
			}

			WebElement BOEDate = driver.findElement(By.xpath("(//app-form-text//div//input)[7]"));
			if (BOEDate.isEnabled()) {
				System.out.println("BOEDate No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Customs Request No Field : Field is Disabled as Expected");
				System.out.println("BOEDate No : " + BOEDate.getAttribute("value"));
			}

			WebElement trackingNo = driver.findElement(By.xpath("(//app-form-text//div//input)[8]"));
			if (trackingNo.isEnabled()) {
				System.out.println("Tracking No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Tracking No Field : Field is Disabled as Expected");
				System.out.println("Tracking No : " + trackingNo.getAttribute("value"));
			}

			WebElement noOfPackages = driver.findElement(By.xpath("(//app-form-text//div//input)[9]"));
			if (noOfPackages.isEnabled()) {
				System.out.println("No of Packages Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("No of Packages Field : Field is Disabled as Expected");
				System.out.println("No of Packages : " + noOfPackages.getAttribute("value"));
			}

			WebElement exchangeRate = driver.findElement(By.xpath("(//app-form-text//div//input)[10]"));
			if (exchangeRate.isEnabled()) {
				System.out.println("Exchange Rate Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("No of Packages Field : Field is Disabled as Expected");
				System.out.println("Exchange Rate : " + exchangeRate.getAttribute("value"));
			}

			WebElement logisticsTileDropdown = driver.findElement(By.xpath("(//*[@id='headingTwo']/h5/button)[1]"));
			logisticsTileDropdown.click();
			Thread.sleep(3000);

			WebElement customDuty = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[20]"));
			customDuty.sendKeys("100");

			WebElement dutyInvoiceNo = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[21]"));
			dutyInvoiceNo.sendKeys(UUID());

			WebElement dutyInvoiceDate = driver
					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[1]"));
			String date1 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			dutyInvoiceDate.sendKeys(date1);

			WebElement delayReason = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[3]"));
			delayReason.sendKeys("NA");

			WebElement pickupDate = driver
					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[2]"));
			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			pickupDate.sendKeys(date2);

			WebElement logisticsRemarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[4]"));
			logisticsRemarks.sendKeys("NA");

			/* / EXW - Import - Grid Fields/ */

			int scrollAmount = 4000;
			WebElement slickGridScroll = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll);
			Thread.sleep(1000);
			j.executeScript("arguments[0].scrollLeft += arguments[1];", slickGridScroll, scrollAmount);
			Thread.sleep(1000);

			WebElement BOEDescription = driver.findElement(
					By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l28 r28']"));
			j.executeScript("arguments[0].click();", BOEDescription);
			WebElement BOEDescription1 = driver.findElement(By.xpath(
					"//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l28 r28 active editable selected']//input"));
			BOEDescription1.sendKeys("Logistics Fields");

			WebElement unitPrice = driver.findElement(
					By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l31 r31 selected']"));
			j.executeScript("arguments[0].click();", unitPrice);
			WebElement unitPrice1 = driver.findElement(By.xpath(
					"//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l31 r31 selected active editable']//input"));
			unitPrice1.sendKeys("10");

			WebElement extendedValue = driver.findElement(
					By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l32 r32 selected']"));
			WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
			j.executeScript("arguments[0].click();", extendedValue);
			WebElement refreshedExtendedValue = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					"//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l32 r32 selected active']")));
			String extendedValueAttribute = refreshedExtendedValue.getText();

			WebElement assessableValue = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[18]"));
			assessableValue.sendKeys(extendedValueAttribute);

			WebElement HSCode = driver.findElement(
					By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l33 r33 selected']"));
			j.executeScript("arguments[0].click();", HSCode);
			WebElement HSCode1 = driver.findElement(By.xpath(
					"//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l33 r33 selected active editable']//input"));
			HSCode1.sendKeys("12345");

			WebElement itemType = driver.findElement(
					By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l34 r34 selected']"));
			j.executeScript("arguments[0].click();", itemType);
			WebElement itemType1 = driver.findElement(By.xpath(
					"//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l34 r34 selected active editable']//select"));
			selectOptionByIndex(itemType1, 3);

			WebElement rateOfDuty = driver.findElement(
					By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l35 r35 selected']"));
			j.executeScript("arguments[0].click();", rateOfDuty);
			WebElement rateOfDuty1 = driver.findElement(By.xpath(
					"//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l35 r35 selected active editable']//select"));
			selectOptionByIndex(rateOfDuty1, 3);

			WebElement totalDutyAmt = driver.findElement(
					By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l39 r39 selected']"));
			j.executeScript("arguments[0].click();", totalDutyAmt);
			WebElement refreshedtotalDutyAmt = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					"//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l39 r39 selected active']")));
			String totalDutyAttribute = refreshedtotalDutyAmt.getText();

			WebElement totalDutyAmount = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[19]"));
			totalDutyAmount.sendKeys(totalDutyAttribute);
		} else {
			System.out.println("Purchase Category NOT MATCHING");
		}
	}

	@When("User enters the logistics fields in logistics tile dropdown - \\(PO Order - NPM - Import), \\(Incoterm - EXW, Duty Exemption - NO)")
	public void user_enters_the_logistics_fields_in_logistics_tile_dropdown_po_order_npm_import_incoterm_exw_duty_exemption_no()
			throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;
		// For Incoterm: "EXW"
		WebElement incoterm = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]"));
		selectOptionByIndex(incoterm, 0);

		/* /For "Import"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("0: 1"));

		if (attribute2.equals("0: 1")) {

			WebElement dutyExemption = driver.findElement(By.xpath("(//app-form-select//div//select)[1]"));
			selectOptionByIndex(dutyExemption, 1);

			WebElement customsRequestNo = driver.findElement(By.xpath("(//app-form-text//div//input)[5]"));
			if (customsRequestNo.isEnabled()) {
				System.out.println("Customs Request No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Customs Request No Field : Field is Disabled as Expected");
				System.out.println("Request No : " + customsRequestNo.getAttribute("value"));
			}

			WebElement BOENo = driver.findElement(By.xpath("(//app-form-text//div//input)[6]"));
			if (BOENo.isEnabled()) {
				System.out.println("BOE No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Customs Request No Field : Field is Disabled as Expected");
				System.out.println("BOE No : " + BOENo.getAttribute("value"));
			}

			WebElement BOEDate = driver.findElement(By.xpath("(//app-form-text//div//input)[7]"));
			if (BOEDate.isEnabled()) {
				System.out.println("BOEDate No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Customs Request No Field : Field is Disabled as Expected");
				System.out.println("BOEDate No : " + BOEDate.getAttribute("value"));
			}

			WebElement trackingNo = driver.findElement(By.xpath("(//app-form-text//div//input)[8]"));
			if (trackingNo.isEnabled()) {
				System.out.println("Tracking No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Tracking No Field : Field is Disabled as Expected");
				System.out.println("Tracking No : " + trackingNo.getAttribute("value"));
			}

			WebElement noOfPackages = driver.findElement(By.xpath("(//app-form-text//div//input)[9]"));
			if (noOfPackages.isEnabled()) {
				System.out.println("No of Packages Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("No of Packages Field : Field is Disabled as Expected");
				System.out.println("No of Packages : " + noOfPackages.getAttribute("value"));
			}

			WebElement exchangeRate = driver.findElement(By.xpath("(//app-form-text//div//input)[10]"));
			if (exchangeRate.isEnabled()) {
				System.out.println("Exchange Rate Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("No of Packages Field : Field is Disabled as Expected");
				System.out.println("Exchange Rate : " + exchangeRate.getAttribute("value"));
			}

			WebElement logisticsTileDropdown = driver.findElement(By.xpath("(//*[@id='headingTwo']/h5/button)[1]"));
			logisticsTileDropdown.click();
			Thread.sleep(3000);

			WebElement customDuty = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[20]"));
			customDuty.sendKeys("100");

			WebElement dutyInvoiceNo = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[21]"));
			dutyInvoiceNo.sendKeys(UUID());

			WebElement dutyInvoiceDate = driver
					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[1]"));
			String date1 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			dutyInvoiceDate.sendKeys(date1);

			WebElement delayReason = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[3]"));
			delayReason.sendKeys("NA");

			WebElement pickupDate = driver
					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[2]"));
			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			pickupDate.sendKeys(date2);

			WebElement logisticsRemarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[4]"));
			logisticsRemarks.sendKeys("NA");

			/* / EXW - Import - Grid Fields/ */

			int scrollAmount = 4000;
			WebElement slickGridScroll = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll);
			Thread.sleep(1000);
			j.executeScript("arguments[0].scrollLeft += arguments[1];", slickGridScroll, scrollAmount);
			Thread.sleep(1000);

			WebElement BOEDescription = driver.findElement(
					By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l27 r27']"));
			j.executeScript("arguments[0].click();", BOEDescription);
			WebElement BOEDescription1 = driver.findElement(By.xpath(
					"//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l27 r27 active editable selected']//input"));
			BOEDescription1.sendKeys("Logistics Fields");

			WebElement unitPrice = driver.findElement(
					By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l30 r30 selected']"));
			j.executeScript("arguments[0].click();", unitPrice);
			WebElement unitPrice1 = driver.findElement(By.xpath(
					"//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l30 r30 selected active editable']//input"));
			unitPrice1.sendKeys("10");

			WebElement extendedValue = driver.findElement(
					By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l31 r31 selected']"));
			WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
			j.executeScript("arguments[0].click();", extendedValue);
			WebElement refreshedExtendedValue = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					"//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l31 r31 selected active']")));
			String extendedValueAttribute = refreshedExtendedValue.getText();

			WebElement assessableValue = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[18]"));
			assessableValue.sendKeys(extendedValueAttribute);

			WebElement HSCode = driver.findElement(
					By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l32 r32 selected']"));
			j.executeScript("arguments[0].click();", HSCode);
			WebElement HSCode1 = driver.findElement(By.xpath(
					"//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l32 r32 selected active editable']//input"));
			HSCode1.sendKeys("12345");

			WebElement itemType = driver.findElement(
					By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l33 r33 selected']"));
			j.executeScript("arguments[0].click();", itemType);
			WebElement itemType1 = driver.findElement(By.xpath(
					"//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l33 r33 selected active editable']//select"));
			selectOptionByIndex(itemType1, 3);

			WebElement rateOfDuty = driver.findElement(
					By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l34 r34 selected']"));
			j.executeScript("arguments[0].click();", rateOfDuty);
			WebElement rateOfDuty1 = driver.findElement(By.xpath(
					"//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l34 r34 selected active editable']//select"));
			selectOptionByIndex(rateOfDuty1, 3);

			WebElement totalDutyAmt = driver.findElement(
					By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l38 r38 selected']"));
			j.executeScript("arguments[0].click();", totalDutyAmt);
			WebElement refreshedtotalDutyAmt = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					"//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l38 r38 selected active']")));
			String totalDutyAttribute = refreshedtotalDutyAmt.getText();

			WebElement totalDutyAmount = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[19]"));
			totalDutyAmount.sendKeys(totalDutyAttribute);
		} else {
			System.out.println("Purchase Category NOT MATCHING");
		}
	}

	@When("User enters the logistics fields in logistics tile dropdown - \\(PO Order - RM - Import), \\(Incoterm - FOB, Duty Exemption - NO)")
	public void user_enters_the_logistics_fields_in_logistics_tile_dropdown_po_order_rm_import_incoterm_fob_duty_exemption_no()
			throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;
		// For Incoterm: "FOB"
		WebElement incoterm = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]"));
		selectOptionByIndex(incoterm, 2);

		/* /For "Import"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("0: 1"));

		if (attribute2.equals("0: 1")) {

			WebElement dutyExemption = driver.findElement(By.xpath("(//app-form-select//div//select)[1]"));
			selectOptionByIndex(dutyExemption, 1);

			WebElement customsRequestNo = driver.findElement(By.xpath("(//app-form-text//div//input)[5]"));
			if (customsRequestNo.isEnabled()) {
				System.out.println("Customs Request No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Customs Request No Field : Field is Disabled as Expected");
				System.out.println("Request No : " + customsRequestNo.getAttribute("value"));
			}

			WebElement BOENo = driver.findElement(By.xpath("(//app-form-text//div//input)[6]"));
			if (BOENo.isEnabled()) {
				System.out.println("BOE No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Customs Request No Field : Field is Disabled as Expected");
				System.out.println("BOE No : " + BOENo.getAttribute("value"));
			}

			WebElement BOEDate = driver.findElement(By.xpath("(//app-form-text//div//input)[7]"));
			if (BOEDate.isEnabled()) {
				System.out.println("BOEDate No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Customs Request No Field : Field is Disabled as Expected");
				System.out.println("BOEDate No : " + BOEDate.getAttribute("value"));
			}

			WebElement trackingNo = driver.findElement(By.xpath("(//app-form-text//div//input)[8]"));
			if (trackingNo.isEnabled()) {
				System.out.println("Tracking No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Tracking No Field : Field is Disabled as Expected");
				System.out.println("Tracking No : " + trackingNo.getAttribute("value"));
			}

			WebElement noOfPackages = driver.findElement(By.xpath("(//app-form-text//div//input)[9]"));
			if (noOfPackages.isEnabled()) {
				System.out.println("No of Packages Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("No of Packages Field : Field is Disabled as Expected");
				System.out.println("No of Packages : " + noOfPackages.getAttribute("value"));
			}

			WebElement exchangeRate = driver.findElement(By.xpath("(//app-form-text//div//input)[10]"));
			if (exchangeRate.isEnabled()) {
				System.out.println("Exchange Rate Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("No of Packages Field : Field is Disabled as Expected");
				System.out.println("Exchange Rate : " + exchangeRate.getAttribute("value"));
			}

			WebElement logisticsTileDropdown = driver.findElement(By.xpath("(//*[@id='headingTwo']/h5/button)[1]"));
			logisticsTileDropdown.click();
			Thread.sleep(3000);

			WebElement customDuty = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[20]"));
			customDuty.sendKeys("100");

			WebElement dutyInvoiceNo = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[21]"));
			dutyInvoiceNo.sendKeys(UUID());

			WebElement dutyInvoiceDate = driver
					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[1]"));
			String date1 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			dutyInvoiceDate.sendKeys(date1);

			WebElement delayReason = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[3]"));
			delayReason.sendKeys("NA");

			WebElement pickupDate = driver
					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[2]"));
			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			pickupDate.sendKeys(date2);

			WebElement logisticsRemarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[4]"));
			logisticsRemarks.sendKeys("NA");

			WebElement CHACheckbox = driver.findElement(By.xpath("(//input[@type='checkbox'])"));
			CHACheckbox.click();

			/* / EXW - Import - Grid Fields/ */

			int scrollAmount = 4000;
			WebElement slickGridScroll = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll);
			Thread.sleep(1000);
			j.executeScript("arguments[0].scrollLeft += arguments[1];", slickGridScroll, scrollAmount);
			Thread.sleep(1000);

			WebElement BOEDescription = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l30 r30')]"));
			j.executeScript("arguments[0].click();", BOEDescription);
			WebElement BOEDescription1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l30 r30')]//input"));
			BOEDescription1.sendKeys("Logistics Fields");

			WebElement unitPrice = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l33 r33')]"));
			j.executeScript("arguments[0].click();", unitPrice);
			WebElement unitPrice1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l33 r33')]//input"));
			unitPrice1.sendKeys("10");

			WebElement extendedValue = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l34 r34')]"));
			WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
			j.executeScript("arguments[0].click();", extendedValue);
			WebElement refreshedExtendedValue = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains (@class, 'slick-cell l34 r34')]")));
			String extendedValueAttribute = refreshedExtendedValue.getText();

			WebElement assessableValue = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[18]"));
			assessableValue.sendKeys(extendedValueAttribute);

			WebElement HSCode = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l35 r35')]"));
			j.executeScript("arguments[0].click();", HSCode);
			WebElement HSCode1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l35 r35')]//input"));
			HSCode1.sendKeys("12345");

			WebElement itemType = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l36 r36')]"));
			j.executeScript("arguments[0].click();", itemType);
			WebElement itemType1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l36 r36')]//select"));
			selectOptionByIndex(itemType1, 3);

			WebElement rateOfDuty = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l37 r37')]"));
			j.executeScript("arguments[0].click();", rateOfDuty);
			WebElement rateOfDuty1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l37 r37')]//select"));
			selectOptionByIndex(rateOfDuty1, 3);

			WebElement totalDutyAmt = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l41 r41')]"));
			j.executeScript("arguments[0].click();", totalDutyAmt);
			WebElement refreshedtotalDutyAmt = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains (@class, 'slick-cell l41 r41')]")));
			String totalDutyAttribute = refreshedtotalDutyAmt.getText();

			WebElement totalDutyAmount = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[19]"));
			totalDutyAmount.sendKeys(totalDutyAttribute);
		} else {
			System.out.println("Purchase Category NOT MATCHING");
		}
	}

	@When("User enters the logistics fields in logistics tile dropdown - \\(Testing & Services - Import), \\(Incoterm - FOB, Duty Exemption - NO)")
	public void user_enters_the_logistics_fields_in_logistics_tile_dropdown_testing_services_import_incoterm_fob_duty_exemption_no()
			throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;
		// For Incoterm: "FOB"
		WebElement incoterm = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]"));
		selectOptionByIndex(incoterm, 2);

		/* /For "Import"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("0: 1"));

		if (attribute2.equals("0: 1")) {

			WebElement dutyExemption = driver.findElement(By.xpath("(//app-form-select//div//select)[1]"));
			selectOptionByIndex(dutyExemption, 1);

			WebElement customsRequestNo = driver.findElement(By.xpath("(//app-form-text//div//input)[5]"));
			if (customsRequestNo.isEnabled()) {
				System.out.println("Customs Request No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Customs Request No Field : Field is Disabled as Expected");
				System.out.println("Request No : " + customsRequestNo.getAttribute("value"));
			}

			WebElement BOENo = driver.findElement(By.xpath("(//app-form-text//div//input)[6]"));
			if (BOENo.isEnabled()) {
				System.out.println("BOE No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Customs Request No Field : Field is Disabled as Expected");
				System.out.println("BOE No : " + BOENo.getAttribute("value"));
			}

			WebElement BOEDate = driver.findElement(By.xpath("(//app-form-text//div//input)[7]"));
			if (BOEDate.isEnabled()) {
				System.out.println("BOEDate No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Customs Request No Field : Field is Disabled as Expected");
				System.out.println("BOEDate No : " + BOEDate.getAttribute("value"));
			}

			WebElement trackingNo = driver.findElement(By.xpath("(//app-form-text//div//input)[8]"));
			if (trackingNo.isEnabled()) {
				System.out.println("Tracking No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Tracking No Field : Field is Disabled as Expected");
				System.out.println("Tracking No : " + trackingNo.getAttribute("value"));
			}

			WebElement noOfPackages = driver.findElement(By.xpath("(//app-form-text//div//input)[9]"));
			if (noOfPackages.isEnabled()) {
				System.out.println("No of Packages Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("No of Packages Field : Field is Disabled as Expected");
				System.out.println("No of Packages : " + noOfPackages.getAttribute("value"));
			}

			WebElement exchangeRate = driver.findElement(By.xpath("(//app-form-text//div//input)[10]"));
			if (exchangeRate.isEnabled()) {
				System.out.println("Exchange Rate Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("No of Packages Field : Field is Disabled as Expected");
				System.out.println("Exchange Rate : " + exchangeRate.getAttribute("value"));
			}

			WebElement logisticsTileDropdown = driver.findElement(By.xpath("(//*[@id='headingTwo']/h5/button)[1]"));
			logisticsTileDropdown.click();
			Thread.sleep(3000);

			WebElement customDuty = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[20]"));
			customDuty.sendKeys("100");

			WebElement dutyInvoiceNo = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[21]"));
			dutyInvoiceNo.sendKeys(UUID());

			WebElement dutyInvoiceDate = driver
					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[1]"));
			String date1 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			dutyInvoiceDate.sendKeys(date1);

			WebElement delayReason = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[3]"));
			delayReason.sendKeys("NA");

			WebElement pickupDate = driver
					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[2]"));
			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			pickupDate.sendKeys(date2);

			WebElement logisticsRemarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[4]"));
			logisticsRemarks.sendKeys("NA");

			WebElement CHACheckbox = driver.findElement(By.xpath("(//input[@type='checkbox'])"));
			CHACheckbox.click();

			/* / FOB - Import - Grid Fields/ */

			int scrollAmount = 4000;
			WebElement slickGridScroll = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll);
			Thread.sleep(1000);
			j.executeScript("arguments[0].scrollLeft += arguments[1];", slickGridScroll, scrollAmount);
			Thread.sleep(1000);

			WebElement BOEDescription = driver.findElement(
					By.xpath(".//div[contains(@class, 'slick-cell l28 r28')]"));
			j.executeScript("arguments[0].click();", BOEDescription);
			WebElement BOEDescription1 = driver.findElement(By.xpath(
					".//div[contains(@class, 'slick-cell l28 r28')]//input"));
			BOEDescription1.sendKeys("Logistics Fields");

			WebElement unitPrice = driver.findElement(
					By.xpath(".//div[contains(@class, 'slick-cell l31 r31')]"));
			j.executeScript("arguments[0].click();", unitPrice);
			WebElement unitPrice1 = driver.findElement(By.xpath(
					".//div[contains(@class, 'slick-cell l31 r31')]//input"));
			unitPrice1.sendKeys("10");

			WebElement extendedValue = driver.findElement(
					By.xpath(".//div[contains(@class, 'slick-cell l32 r32')]"));
			WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
			j.executeScript("arguments[0].click();", extendedValue);
			WebElement refreshedExtendedValue = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains(@class, 'slick-cell l32 r32')]")));
			String extendedValueAttribute = refreshedExtendedValue.getText();

			WebElement assessableValue = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[18]"));
			assessableValue.sendKeys(extendedValueAttribute);

			WebElement HSCode = driver.findElement(
					By.xpath(".//div[contains(@class, 'slick-cell l33 r33')]"));
			j.executeScript("arguments[0].click();", HSCode);
			WebElement HSCode1 = driver.findElement(By.xpath(
					".//div[contains(@class, 'slick-cell l33 r33')]//input"));
			HSCode1.sendKeys("12345");

			WebElement itemType = driver.findElement(
					By.xpath(".//div[contains(@class, 'slick-cell l34 r34')]"));
			j.executeScript("arguments[0].click();", itemType);
			WebElement itemType1 = driver.findElement(By.xpath(
					".//div[contains(@class, 'slick-cell l34 r34')]//select"));
			selectOptionByIndex(itemType1, 3);

			WebElement rateOfDuty = driver.findElement(
					By.xpath(".//div[contains(@class, 'slick-cell l35 r35')]"));
			j.executeScript("arguments[0].click();", rateOfDuty);
			WebElement rateOfDuty1 = driver.findElement(By.xpath(
					".//div[contains(@class, 'slick-cell l35 r35')]//select"));
			selectOptionByIndex(rateOfDuty1, 3);

			WebElement totalDutyAmt = driver.findElement(
					By.xpath(".//div[contains(@class, 'slick-cell l39 r39')]"));
			j.executeScript("arguments[0].click();", totalDutyAmt);
			WebElement refreshedtotalDutyAmt = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains(@class, 'slick-cell l39 r39')]")));
			String totalDutyAttribute = refreshedtotalDutyAmt.getText();

			WebElement totalDutyAmount = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[19]"));
			totalDutyAmount.sendKeys(totalDutyAttribute);
		} else {
			System.out.println("Purchase Category NOT MATCHING");
		}
	}

	@When("User enters the logistics fields in logistics tile dropdown - \\(PO Order - NPM - Import), \\(Incoterm - FOB, Duty Exemption - NO)")
	public void user_enters_the_logistics_fields_in_logistics_tile_dropdown_po_order_npm_import_incoterm_fob_duty_exemption_no()
			throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;
		// For Incoterm: "FOB"
		WebElement incoterm = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]"));
		selectOptionByIndex(incoterm, 2);

		/* /For "Import"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("0: 1"));

		if (attribute2.equals("0: 1")) {

			WebElement dutyExemption = driver.findElement(By.xpath("(//app-form-select//div//select)[1]"));
			selectOptionByIndex(dutyExemption, 1);

			WebElement customsRequestNo = driver.findElement(By.xpath("(//app-form-text//div//input)[5]"));
			if (customsRequestNo.isEnabled()) {
				System.out.println("Customs Request No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Customs Request No Field : Field is Disabled as Expected");
				System.out.println("Request No : " + customsRequestNo.getAttribute("value"));
			}

			WebElement BOENo = driver.findElement(By.xpath("(//app-form-text//div//input)[6]"));
			if (BOENo.isEnabled()) {
				System.out.println("BOE No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Customs Request No Field : Field is Disabled as Expected");
				System.out.println("BOE No : " + BOENo.getAttribute("value"));
			}

			WebElement BOEDate = driver.findElement(By.xpath("(//app-form-text//div//input)[7]"));
			if (BOEDate.isEnabled()) {
				System.out.println("BOEDate No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Customs Request No Field : Field is Disabled as Expected");
				System.out.println("BOEDate No : " + BOEDate.getAttribute("value"));
			}

			WebElement trackingNo = driver.findElement(By.xpath("(//app-form-text//div//input)[8]"));
			if (trackingNo.isEnabled()) {
				System.out.println("Tracking No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Tracking No Field : Field is Disabled as Expected");
				System.out.println("Tracking No : " + trackingNo.getAttribute("value"));
			}

			WebElement noOfPackages = driver.findElement(By.xpath("(//app-form-text//div//input)[9]"));
			if (noOfPackages.isEnabled()) {
				System.out.println("No of Packages Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("No of Packages Field : Field is Disabled as Expected");
				System.out.println("No of Packages : " + noOfPackages.getAttribute("value"));
			}

			WebElement exchangeRate = driver.findElement(By.xpath("(//app-form-text//div//input)[10]"));
			if (exchangeRate.isEnabled()) {
				System.out.println("Exchange Rate Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("No of Packages Field : Field is Disabled as Expected");
				System.out.println("Exchange Rate : " + exchangeRate.getAttribute("value"));
			}

			WebElement logisticsTileDropdown = driver.findElement(By.xpath("(//*[@id='headingTwo']/h5/button)[1]"));
			logisticsTileDropdown.click();
			Thread.sleep(3000);

			WebElement customDuty = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[20]"));
			customDuty.sendKeys("100");

			WebElement dutyInvoiceNo = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[21]"));
			dutyInvoiceNo.sendKeys(UUID());

			WebElement dutyInvoiceDate = driver
					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[1]"));
			String date1 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			dutyInvoiceDate.sendKeys(date1);

			WebElement delayReason = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[3]"));
			delayReason.sendKeys("NA");

			WebElement pickupDate = driver
					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[2]"));
			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			pickupDate.sendKeys(date2);

			WebElement logisticsRemarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[4]"));
			logisticsRemarks.sendKeys("NA");

			WebElement CHACheckbox = driver.findElement(By.xpath("(//input[@type='checkbox'])"));
			CHACheckbox.click();

			/* / EXW - Import - Grid Fields/ */

			int scrollAmount = 4000;
			WebElement slickGridScroll = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll);
			Thread.sleep(1000);
			j.executeScript("arguments[0].scrollLeft += arguments[1];", slickGridScroll, scrollAmount);
			Thread.sleep(1000);

			WebElement BOEDescription = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l27 r27')]"));
			j.executeScript("arguments[0].click();", BOEDescription);
			WebElement BOEDescription1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l27 r27')]//input"));
			BOEDescription1.sendKeys("Logistics Fields");

			WebElement unitPrice = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l30 r30')]"));
			j.executeScript("arguments[0].click();", unitPrice);
			WebElement unitPrice1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l30 r30')]//input"));
			unitPrice1.sendKeys("10");

			WebElement extendedValue = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l31 r31')]"));
			WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
			j.executeScript("arguments[0].click();", extendedValue);
			WebElement refreshedExtendedValue = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains (@class, 'slick-cell l31 r31')]")));
			String extendedValueAttribute = refreshedExtendedValue.getText();

			WebElement assessableValue = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[18]"));
			assessableValue.sendKeys(extendedValueAttribute);

			WebElement HSCode = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l32 r32')]"));
			j.executeScript("arguments[0].click();", HSCode);
			WebElement HSCode1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l32 r32')]//input"));
			HSCode1.sendKeys("12345");

			WebElement itemType = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l33 r33')]"));
			j.executeScript("arguments[0].click();", itemType);
			WebElement itemType1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l33 r33')]//select"));
			selectOptionByIndex(itemType1, 3);

			WebElement rateOfDuty = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l34 r34')]"));
			j.executeScript("arguments[0].click();", rateOfDuty);
			WebElement rateOfDuty1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l34 r34')]//select"));
			selectOptionByIndex(rateOfDuty1, 3);

			WebElement totalDutyAmt = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l38 r38')]"));
			j.executeScript("arguments[0].click();", totalDutyAmt);
			WebElement refreshedtotalDutyAmt = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains (@class, 'slick-cell l38 r38')]")));
			String totalDutyAttribute = refreshedtotalDutyAmt.getText();

			WebElement totalDutyAmount = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[19]"));
			totalDutyAmount.sendKeys(totalDutyAttribute);
		} else {
			System.out.println("Purchase Category NOT MATCHING");
		}
	}

	@When("User enters the logistics fields in logistics tile dropdown - \\(PO Order - RM - Import), \\(Incoterm - CIF, Duty Exemption - NO)")
	public void user_enters_the_logistics_fields_in_logistics_tile_dropdown_po_order_rm_import_incoterm_cif_duty_exemption_no()
			throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;
		// For Incoterm: "CIF" & Duty Exemption: "NO"
		WebElement incoterm = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]"));
		selectOptionByIndex(incoterm, 3);

		/* /For "Import"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("0: 1"));

		if (attribute2.equals("0: 1")) {

			WebElement dutyExemption = driver.findElement(By.xpath("(//app-form-select//div//select)[1]"));
			selectOptionByIndex(dutyExemption, 1);

			WebElement customsRequestNo = driver.findElement(By.xpath("(//app-form-text//div//input)[5]"));
			if (customsRequestNo.isEnabled()) {
				System.out.println("Customs Request No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Customs Request No Field : Field is Disabled as Expected");
				System.out.println("Request No : " + customsRequestNo.getAttribute("value"));
			}

			WebElement BOENo = driver.findElement(By.xpath("(//app-form-text//div//input)[6]"));
			if (BOENo.isEnabled()) {
				System.out.println("BOE No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Customs Request No Field : Field is Disabled as Expected");
				System.out.println("BOE No : " + BOENo.getAttribute("value"));
			}

			WebElement BOEDate = driver.findElement(By.xpath("(//app-form-text//div//input)[7]"));
			if (BOEDate.isEnabled()) {
				System.out.println("BOEDate No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Customs Request No Field : Field is Disabled as Expected");
				System.out.println("BOEDate No : " + BOEDate.getAttribute("value"));
			}

			WebElement trackingNo = driver.findElement(By.xpath("(//app-form-text//div//input)[8]"));
			if (trackingNo.isEnabled()) {
				System.out.println("Tracking No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Tracking No Field : Field is Disabled as Expected");
				System.out.println("Tracking No : " + trackingNo.getAttribute("value"));
			}

			WebElement noOfPackages = driver.findElement(By.xpath("(//app-form-text//div//input)[9]"));
			if (noOfPackages.isEnabled()) {
				System.out.println("No of Packages Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("No of Packages Field : Field is Disabled as Expected");
				System.out.println("No of Packages : " + noOfPackages.getAttribute("value"));
			}

			WebElement exchangeRate = driver.findElement(By.xpath("(//app-form-text//div//input)[10]"));
			if (exchangeRate.isEnabled()) {
				System.out.println("Exchange Rate Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("No of Packages Field : Field is Disabled as Expected");
				System.out.println("Exchange Rate : " + exchangeRate.getAttribute("value"));
			}

			WebElement logisticsTileDropdown = driver.findElement(By.xpath("(//*[@id='headingTwo']/h5/button)[1]"));
			logisticsTileDropdown.click();
			Thread.sleep(3000);

			WebElement customDuty = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[23]"));
			customDuty.sendKeys("100");

			WebElement dutyInvoiceNo = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[24]"));
			dutyInvoiceNo.sendKeys(UUID());

			WebElement dutyInvoiceDate = driver
					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[1]"));
			String date1 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			dutyInvoiceDate.sendKeys(date1);

			WebElement delayReason = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[3]"));
			delayReason.sendKeys("NA");

			WebElement pickupDate = driver
					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[2]"));
			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			pickupDate.sendKeys(date2);

			WebElement logisticsRemarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[4]"));
			logisticsRemarks.sendKeys("NA");

			/* / CIF - Import - Grid Fields/ */

			int scrollAmount = 4000;
			WebElement slickGridScroll = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll);
			Thread.sleep(1000);
			j.executeScript("arguments[0].scrollLeft += arguments[1];", slickGridScroll, scrollAmount);
			Thread.sleep(1000);

			WebElement BOEDescription = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l27 r27')]"));
			j.executeScript("arguments[0].click();", BOEDescription);
			WebElement BOEDescription1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l27 r27')]//input"));
			BOEDescription1.sendKeys("Logistics Fields");

			WebElement unitPrice = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l30 r30')]"));
			j.executeScript("arguments[0].click();", unitPrice);
			WebElement unitPrice1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l30 r30')]//input"));
			unitPrice1.sendKeys("10");

			WebElement extendedValue = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l31 r31')]"));
			WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
			j.executeScript("arguments[0].click();", extendedValue);
			WebElement refreshedExtendedValue = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains (@class, 'slick-cell l31 r31')]")));
			String extendedValueAttribute = refreshedExtendedValue.getText();

			WebElement assessableValue = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[21]"));
			assessableValue.sendKeys(extendedValueAttribute);

			WebElement HSCode = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l32 r32')]"));
			j.executeScript("arguments[0].click();", HSCode);
			WebElement HSCode1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l32 r32')]//input"));
			HSCode1.sendKeys("12345");

			WebElement itemType = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l33 r33')]"));
			j.executeScript("arguments[0].click();", itemType);
			WebElement itemType1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l33 r33')]//select"));
			selectOptionByIndex(itemType1, 3);

			WebElement rateOfDuty = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l34 r34')]"));
			j.executeScript("arguments[0].click();", rateOfDuty);
			WebElement rateOfDuty1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l34 r34')]//select"));
			selectOptionByIndex(rateOfDuty1, 3);

			WebElement totalDutyAmt = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l38 r38')]"));
			j.executeScript("arguments[0].click();", totalDutyAmt);
			WebElement refreshedtotalDutyAmt = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains (@class, 'slick-cell l38 r38')]")));
			String totalDutyAttribute = refreshedtotalDutyAmt.getText();

			WebElement totalDutyAmount = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[22]"));
			totalDutyAmount.sendKeys(totalDutyAttribute);
		} else {
			System.out.println("Purchase Category NOT MATCHING");
		}
	}

	@When("User enters the logistics fields in logistics tile dropdown - \\(Testing & Services - Import), \\(Incoterm - CIF, Duty Exemption - NO)")
	public void user_enters_the_logistics_fields_in_logistics_tile_dropdown_testing_services_import_incoterm_cif_duty_exemption_no()
			throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;
		// For Incoterm: "CIF" & Duty Exemption: "NO"
		WebElement incoterm = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]"));
		selectOptionByIndex(incoterm, 3);

		/* /For "Import"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("0: 1"));

		if (attribute2.equals("0: 1")) {

			WebElement dutyExemption = driver.findElement(By.xpath("(//app-form-select//div//select)[1]"));
			selectOptionByIndex(dutyExemption, 1);

			WebElement customsRequestNo = driver.findElement(By.xpath("(//app-form-text//div//input)[5]"));
			if (customsRequestNo.isEnabled()) {
				System.out.println("Customs Request No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Customs Request No Field : Field is Disabled as Expected");
				System.out.println("Request No : " + customsRequestNo.getAttribute("value"));
			}

			WebElement BOENo = driver.findElement(By.xpath("(//app-form-text//div//input)[6]"));
			if (BOENo.isEnabled()) {
				System.out.println("BOE No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Customs Request No Field : Field is Disabled as Expected");
				System.out.println("BOE No : " + BOENo.getAttribute("value"));
			}

			WebElement BOEDate = driver.findElement(By.xpath("(//app-form-text//div//input)[7]"));
			if (BOEDate.isEnabled()) {
				System.out.println("BOEDate No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Customs Request No Field : Field is Disabled as Expected");
				System.out.println("BOEDate No : " + BOEDate.getAttribute("value"));
			}

			WebElement trackingNo = driver.findElement(By.xpath("(//app-form-text//div//input)[8]"));
			if (trackingNo.isEnabled()) {
				System.out.println("Tracking No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Tracking No Field : Field is Disabled as Expected");
				System.out.println("Tracking No : " + trackingNo.getAttribute("value"));
			}

			WebElement noOfPackages = driver.findElement(By.xpath("(//app-form-text//div//input)[9]"));
			if (noOfPackages.isEnabled()) {
				System.out.println("No of Packages Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("No of Packages Field : Field is Disabled as Expected");
				System.out.println("No of Packages : " + noOfPackages.getAttribute("value"));
			}

			WebElement exchangeRate = driver.findElement(By.xpath("(//app-form-text//div//input)[10]"));
			if (exchangeRate.isEnabled()) {
				System.out.println("Exchange Rate Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("No of Packages Field : Field is Disabled as Expected");
				System.out.println("Exchange Rate : " + exchangeRate.getAttribute("value"));
			}

			WebElement logisticsTileDropdown = driver.findElement(By.xpath("(//*[@id='headingTwo']/h5/button)[1]"));
			logisticsTileDropdown.click();
			Thread.sleep(3000);

			WebElement customDuty = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[23]"));
			customDuty.sendKeys("100");

			WebElement dutyInvoiceNo = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[24]"));
			dutyInvoiceNo.sendKeys(UUID());

			WebElement dutyInvoiceDate = driver
					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[1]"));
			String date1 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			dutyInvoiceDate.sendKeys(date1);

			WebElement delayReason = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[3]"));
			delayReason.sendKeys("NA");

			WebElement pickupDate = driver
					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[2]"));
			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			pickupDate.sendKeys(date2);

			WebElement logisticsRemarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[4]"));
			logisticsRemarks.sendKeys("NA");

			/* / CIF - Import - Grid Fields/ */

			int scrollAmount = 4000;
			WebElement slickGridScroll = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll);
			Thread.sleep(1000);
			j.executeScript("arguments[0].scrollLeft += arguments[1];", slickGridScroll, scrollAmount);
			Thread.sleep(1000);

			WebElement BOEDescription = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l25 r25')]"));
			j.executeScript("arguments[0].click();", BOEDescription);
			WebElement BOEDescription1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l25 r25')]//input"));
			BOEDescription1.sendKeys("Logistics Fields");

			WebElement unitPrice = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l28 r28')]"));
			j.executeScript("arguments[0].click();", unitPrice);
			WebElement unitPrice1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l28 r28')]//input"));
			unitPrice1.sendKeys("10");

			WebElement extendedValue = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l29 r29')]"));
			WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
			j.executeScript("arguments[0].click();", extendedValue);
			WebElement refreshedExtendedValue = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains (@class, 'slick-cell l29 r29')]")));
			String extendedValueAttribute = refreshedExtendedValue.getText();

			WebElement assessableValue = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[21]"));
			assessableValue.sendKeys(extendedValueAttribute);

			WebElement HSCode = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l30 r30')]"));
			j.executeScript("arguments[0].click();", HSCode);
			WebElement HSCode1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l30 r30')]//input"));
			HSCode1.sendKeys("12345");

			WebElement itemType = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l31 r31')]"));
			j.executeScript("arguments[0].click();", itemType);
			WebElement itemType1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l31 r31')]//select"));
			selectOptionByIndex(itemType1, 3);

			WebElement rateOfDuty = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l32 r32')]"));
			j.executeScript("arguments[0].click();", rateOfDuty);
			WebElement rateOfDuty1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l32 r32')]//select"));
			selectOptionByIndex(rateOfDuty1, 3);

			WebElement totalDutyAmt = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l36 r36')]"));
			j.executeScript("arguments[0].click();", totalDutyAmt);
			WebElement refreshedtotalDutyAmt = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains (@class, 'slick-cell l36 r36')]")));
			String totalDutyAttribute = refreshedtotalDutyAmt.getText();

			WebElement totalDutyAmount = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[22]"));
			totalDutyAmount.sendKeys(totalDutyAttribute);
		} else {
			System.out.println("Purchase Category NOT MATCHING");
		}
	}

	@When("User enters the logistics fields in logistics tile dropdown - \\(PO Order - NPM - Import), \\(Incoterm - CIF, Duty Exemption - NO)")
	public void user_enters_the_logistics_fields_in_logistics_tile_dropdown_po_order_npm_import_incoterm_cif_duty_exemption_no()
			throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;
		// For Incoterm: "CIF" & Duty Exemption: "NO"
		WebElement incoterm = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]"));
		selectOptionByIndex(incoterm, 3);

		/* /For "Import"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("0: 1"));

		if (attribute2.equals("0: 1")) {

			WebElement dutyExemption = driver.findElement(By.xpath("(//app-form-select//div//select)[1]"));
			selectOptionByIndex(dutyExemption, 1);

			WebElement customsRequestNo = driver.findElement(By.xpath("(//app-form-text//div//input)[5]"));
			if (customsRequestNo.isEnabled()) {
				System.out.println("Customs Request No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Customs Request No Field : Field is Disabled as Expected");
				System.out.println("Request No : " + customsRequestNo.getAttribute("value"));
			}

			WebElement BOENo = driver.findElement(By.xpath("(//app-form-text//div//input)[6]"));
			if (BOENo.isEnabled()) {
				System.out.println("BOE No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Customs Request No Field : Field is Disabled as Expected");
				System.out.println("BOE No : " + BOENo.getAttribute("value"));
			}

			WebElement BOEDate = driver.findElement(By.xpath("(//app-form-text//div//input)[7]"));
			if (BOEDate.isEnabled()) {
				System.out.println("BOEDate No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Customs Request No Field : Field is Disabled as Expected");
				System.out.println("BOEDate No : " + BOEDate.getAttribute("value"));
			}

			WebElement trackingNo = driver.findElement(By.xpath("(//app-form-text//div//input)[8]"));
			if (trackingNo.isEnabled()) {
				System.out.println("Tracking No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Tracking No Field : Field is Disabled as Expected");
				System.out.println("Tracking No : " + trackingNo.getAttribute("value"));
			}

			WebElement noOfPackages = driver.findElement(By.xpath("(//app-form-text//div//input)[9]"));
			if (noOfPackages.isEnabled()) {
				System.out.println("No of Packages Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("No of Packages Field : Field is Disabled as Expected");
				System.out.println("No of Packages : " + noOfPackages.getAttribute("value"));
			}

			WebElement exchangeRate = driver.findElement(By.xpath("(//app-form-text//div//input)[10]"));
			if (exchangeRate.isEnabled()) {
				System.out.println("Exchange Rate Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("No of Packages Field : Field is Disabled as Expected");
				System.out.println("Exchange Rate : " + exchangeRate.getAttribute("value"));
			}

			WebElement logisticsTileDropdown = driver.findElement(By.xpath("(//*[@id='headingTwo']/h5/button)[1]"));
			logisticsTileDropdown.click();
			Thread.sleep(3000);

			WebElement customDuty = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[23]"));
			customDuty.sendKeys("100");

			WebElement dutyInvoiceNo = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[24]"));
			dutyInvoiceNo.sendKeys(UUID());

			WebElement dutyInvoiceDate = driver
					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[1]"));
			String date1 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			dutyInvoiceDate.sendKeys(date1);

			WebElement delayReason = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[3]"));
			delayReason.sendKeys("NA");

			WebElement pickupDate = driver
					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[2]"));
			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			pickupDate.sendKeys(date2);

			WebElement logisticsRemarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[4]"));
			logisticsRemarks.sendKeys("NA");

			/* / CIF - Import - Grid Fields/ */

			int scrollAmount = 4000;
			WebElement slickGridScroll = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll);
			Thread.sleep(1000);
			j.executeScript("arguments[0].scrollLeft += arguments[1];", slickGridScroll, scrollAmount);
			Thread.sleep(1000);

			WebElement BOEDescription = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l24 r24')]"));
			j.executeScript("arguments[0].click();", BOEDescription);
			WebElement BOEDescription1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l24 r24')]//input"));
			BOEDescription1.sendKeys("Logistics Fields");

			WebElement unitPrice = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l27 r27')]"));
			j.executeScript("arguments[0].click();", unitPrice);
			WebElement unitPrice1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l27 r27')]//input"));
			unitPrice1.sendKeys("10");

			WebElement extendedValue = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l28 r28')]"));
			WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
			j.executeScript("arguments[0].click();", extendedValue);
			WebElement refreshedExtendedValue = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains (@class, 'slick-cell l28 r28')]")));
			String extendedValueAttribute = refreshedExtendedValue.getText();

			WebElement assessableValue = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[21]"));
			assessableValue.sendKeys(extendedValueAttribute);

			WebElement HSCode = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l29 r29')]"));
			j.executeScript("arguments[0].click();", HSCode);
			WebElement HSCode1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l29 r29')]//input"));
			HSCode1.sendKeys("12345");

			WebElement itemType = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l30 r30')]"));
			j.executeScript("arguments[0].click();", itemType);
			WebElement itemType1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l30 r30')]//select"));
			selectOptionByIndex(itemType1, 3);

			WebElement rateOfDuty = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l31 r31')]"));
			j.executeScript("arguments[0].click();", rateOfDuty);
			WebElement rateOfDuty1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l31 r31')]//select"));
			selectOptionByIndex(rateOfDuty1, 3);

			WebElement totalDutyAmt = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l35 r35')]"));
			j.executeScript("arguments[0].click();", totalDutyAmt);
			WebElement refreshedtotalDutyAmt = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains (@class, 'slick-cell l35 r35')]")));
			String totalDutyAttribute = refreshedtotalDutyAmt.getText();

			WebElement totalDutyAmount = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[22]"));
			totalDutyAmount.sendKeys(totalDutyAttribute);
		} else {
			System.out.println("Purchase Category NOT MATCHING");
		}
	}

	@When("User edit the logistics fields in logistics tile dropdown  - \\(PO Order - RM - Import), \\(Incoterm - DDU, Duty Exemption - YES)")
	public void user_edit_the_logistics_fields_in_logistics_tile_dropdown_po_order_rm_import_incoterm_ddu_duty_exemption_yes()
			throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;
		// For Incoterm: "DDU" & Duty Exemption : Yes
		WebElement incoterm = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]"));
		selectOptionByIndex(incoterm, 6);

		/* /For "Import"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("0: 1"));

		if (attribute2.equals("0: 1")) {

			WebElement dutyExemption = driver.findElement(By.xpath("(//app-form-select//div//select)[1]"));
			selectOptionByIndex(dutyExemption, 0);

			WebElement customsRequestNo = driver.findElement(By.xpath("(//app-form-text//div//input)[5]"));
			if (customsRequestNo.isEnabled()) {
				System.out.println("Customs Request No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Customs Request No Field : Field is Disabled as Expected");
				System.out.println("Request No : " + customsRequestNo.getAttribute("value"));
			}

			WebElement BOENo = driver.findElement(By.xpath("(//app-form-text//div//input)[6]"));
			if (BOENo.isEnabled()) {
				System.out.println("BOE No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Customs Request No Field : Field is Disabled as Expected");
				System.out.println("BOE No : " + BOENo.getAttribute("value"));
			}

			WebElement BOEDate = driver.findElement(By.xpath("(//app-form-text//div//input)[7]"));
			if (BOEDate.isEnabled()) {
				System.out.println("BOEDate No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Customs Request No Field : Field is Disabled as Expected");
				System.out.println("BOEDate No : " + BOEDate.getAttribute("value"));
			}

			WebElement trackingNo = driver.findElement(By.xpath("(//app-form-text//div//input)[8]"));
			if (trackingNo.isEnabled()) {
				System.out.println("Tracking No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Tracking No Field : Field is Disabled as Expected");
				System.out.println("Tracking No : " + trackingNo.getAttribute("value"));
			}

			WebElement noOfPackages = driver.findElement(By.xpath("(//app-form-text//div//input)[9]"));
			if (noOfPackages.isEnabled()) {
				System.out.println("No of Packages Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("No of Packages Field : Field is Disabled as Expected");
				System.out.println("No of Packages : " + noOfPackages.getAttribute("value"));
			}

			WebElement exchangeRate = driver.findElement(By.xpath("(//app-form-text//div//input)[10]"));
			if (exchangeRate.isEnabled()) {
				System.out.println("Exchange Rate Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("No of Packages Field : Field is Disabled as Expected");
				System.out.println("Exchange Rate : " + exchangeRate.getAttribute("value"));
			}

			WebElement logisticsTileDropdown = driver.findElement(By.xpath("(//*[@id='headingTwo']/h5/button)[1]"));
			logisticsTileDropdown.click();
			Thread.sleep(3000);

			WebElement slickGridScroll = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll);

			WebElement customDuty = driver.findElement(By.xpath("(//app-form-text//div//input)[23]"));
			if (customDuty.isEnabled()) {
				System.out.println("Custom Duty Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Custom Duty Field : Field is Disabled as Expected");
			}

			WebElement dutyInvoiceNo = driver.findElement(By.xpath("(//app-form-text//div//input)[24]"));
			if (dutyInvoiceNo.isEnabled()) {
				System.out.println("Duty Invoice No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Duty Invoice No Field : Field is Disabled as Expected");
			}

			WebElement dutyInvoiceDate = driver.findElement(By.xpath("(//app-form-text//div//input)[25]"));
			if (dutyInvoiceDate.isEnabled()) {
				System.out.println("Duty Invoice Date Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Duty Invoice Date Field : Field is Disabled as Expected");
			}

			WebElement aging = driver.findElement(By.xpath("(//app-form-text//div//input)[26]"));
			if (aging.isEnabled()) {
				System.out.println("Aging Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Aging Field : Field is Disabled as Expected");
			}

			WebElement delayReason = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[3]"));
			delayReason.clear();
			delayReason.sendKeys("Editing For DDU");

//			WebElement pickupDate = driver
//					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[1]"));
//			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
//			pickupDate.sendKeys(date2);

			WebElement logisticsRemarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[4]"));
			logisticsRemarks.clear();
			logisticsRemarks.sendKeys("Editing For DDU");

			/* / DDU - Import - Grid Fields/ */

			int scrollAmount = 4000;
			WebElement slickGridScroll2 = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll2);
			Thread.sleep(1000);
			j.executeScript("arguments[0].scrollLeft += arguments[1];", slickGridScroll2, scrollAmount);
			Thread.sleep(1000);

			WebElement BOEDescription = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l27 r27')]"));
			j.executeScript("arguments[0].click();", BOEDescription);
			WebElement BOEDescription1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l27 r27')]//input"));
			BOEDescription1.sendKeys("Edited For DDU");

			WebElement unitPrice = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l30 r30')]"));
			j.executeScript("arguments[0].click();", unitPrice);
			WebElement unitPrice1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l30 r30')]//input"));
			unitPrice1.sendKeys("5");

			WebElement extendedValue = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l31 r31')]"));
			WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
			j.executeScript("arguments[0].click();", extendedValue);
			WebElement refreshedExtendedValue = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains (@class, 'slick-cell l31 r31')]")));
			String extendedValueAttribute = refreshedExtendedValue.getText();

			WebElement assessableValue = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[21]"));
			assessableValue.clear();
			assessableValue.sendKeys(extendedValueAttribute);

			WebElement HSCode = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l32 r32')]"));
			j.executeScript("arguments[0].click();", HSCode);
			WebElement HSCode1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l32 r32')]//input"));
			HSCode1.sendKeys("54321");

			WebElement itemType = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l33 r33')]"));
			j.executeScript("arguments[0].click();", itemType);
			WebElement itemType1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l33 r33')]//select"));
			selectOptionByIndex(itemType1, 1);

			WebElement rateOfDuty = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l34 r34')]"));
			j.executeScript("arguments[0].click();", rateOfDuty);
			WebElement rateOfDuty1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l34 r34')]//select"));
			selectOptionByIndex(rateOfDuty1, 2);

			WebElement totalDutyAmt = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l38 r38')]"));
			j.executeScript("arguments[0].click();", totalDutyAmt);
			WebElement refreshedtotalDutyAmt = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains (@class, 'slick-cell l38 r38')]")));
			String totalDutyAttribute = refreshedtotalDutyAmt.getText();

			WebElement totalDutyAmount = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[22]"));
			totalDutyAmount.clear();
			totalDutyAmount.sendKeys(totalDutyAttribute);
		} else {
			System.out.println("Purchase Category NOT MATCHING");
		}
	}

	@When("User edit the logistics fields in logistics tile dropdown - \\(Testing & Services - Import), \\(Incoterm - DDU, Duty Exemption - YES)")
	public void user_edit_the_logistics_fields_in_logistics_tile_dropdown_testing_services_import_incoterm_ddu_duty_exemption_yes()
			throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;
		// For Incoterm: "DDU" & Duty Exemption : Yes
		WebElement incoterm = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]"));
		selectOptionByIndex(incoterm, 6);

		/* /For "Import"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("0: 1"));

		if (attribute2.equals("0: 1")) {

			WebElement dutyExemption = driver.findElement(By.xpath("(//app-form-select//div//select)[1]"));
			selectOptionByIndex(dutyExemption, 0);

			WebElement customsRequestNo = driver.findElement(By.xpath("(//app-form-text//div//input)[5]"));
			if (customsRequestNo.isEnabled()) {
				System.out.println("Customs Request No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Customs Request No Field : Field is Disabled as Expected");
				System.out.println("Request No : " + customsRequestNo.getAttribute("value"));
			}

			WebElement BOENo = driver.findElement(By.xpath("(//app-form-text//div//input)[6]"));
			if (BOENo.isEnabled()) {
				System.out.println("BOE No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Customs Request No Field : Field is Disabled as Expected");
				System.out.println("BOE No : " + BOENo.getAttribute("value"));
			}

			WebElement BOEDate = driver.findElement(By.xpath("(//app-form-text//div//input)[7]"));
			if (BOEDate.isEnabled()) {
				System.out.println("BOEDate No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Customs Request No Field : Field is Disabled as Expected");
				System.out.println("BOEDate No : " + BOEDate.getAttribute("value"));
			}

			WebElement trackingNo = driver.findElement(By.xpath("(//app-form-text//div//input)[8]"));
			if (trackingNo.isEnabled()) {
				System.out.println("Tracking No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Tracking No Field : Field is Disabled as Expected");
				System.out.println("Tracking No : " + trackingNo.getAttribute("value"));
			}

			WebElement noOfPackages = driver.findElement(By.xpath("(//app-form-text//div//input)[9]"));
			if (noOfPackages.isEnabled()) {
				System.out.println("No of Packages Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("No of Packages Field : Field is Disabled as Expected");
				System.out.println("No of Packages : " + noOfPackages.getAttribute("value"));
			}

			WebElement exchangeRate = driver.findElement(By.xpath("(//app-form-text//div//input)[10]"));
			if (exchangeRate.isEnabled()) {
				System.out.println("Exchange Rate Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("No of Packages Field : Field is Disabled as Expected");
				System.out.println("Exchange Rate : " + exchangeRate.getAttribute("value"));
			}

			WebElement logisticsTileDropdown = driver.findElement(By.xpath("(//*[@id='headingTwo']/h5/button)[1]"));
			logisticsTileDropdown.click();
			Thread.sleep(3000);

			WebElement slickGridScroll = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll);

			WebElement customDuty = driver.findElement(By.xpath("(//app-form-text//div//input)[23]"));
			if (customDuty.isEnabled()) {
				System.out.println("Custom Duty Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Custom Duty Field : Field is Disabled as Expected");
			}

			WebElement dutyInvoiceNo = driver.findElement(By.xpath("(//app-form-text//div//input)[24]"));
			if (dutyInvoiceNo.isEnabled()) {
				System.out.println("Duty Invoice No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Duty Invoice No Field : Field is Disabled as Expected");
			}

			WebElement dutyInvoiceDate = driver.findElement(By.xpath("(//app-form-text//div//input)[25]"));
			if (dutyInvoiceDate.isEnabled()) {
				System.out.println("Duty Invoice Date Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Duty Invoice Date Field : Field is Disabled as Expected");
			}

			WebElement aging = driver.findElement(By.xpath("(//app-form-text//div//input)[26]"));
			if (aging.isEnabled()) {
				System.out.println("Aging Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Aging Field : Field is Disabled as Expected");
			}

			WebElement delayReason = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[3]"));
			delayReason.clear();
			delayReason.sendKeys("Editing For DDU");

//			WebElement pickupDate = driver
//					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[1]"));
//			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
//			pickupDate.sendKeys(date2);

			WebElement logisticsRemarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[4]"));
			logisticsRemarks.clear();
			logisticsRemarks.sendKeys("Editing For DDU");

			/* / DDU - Import - Grid Fields/ */

			int scrollAmount = 4000;
			WebElement slickGridScroll2 = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll2);
			Thread.sleep(1000);
			j.executeScript("arguments[0].scrollLeft += arguments[1];", slickGridScroll2, scrollAmount);
			Thread.sleep(1000);

			WebElement BOEDescription = driver.findElement(
					By.xpath(".//div [contains (@class, 'slick-cell l25 r25')]"));
			j.executeScript("arguments[0].click();", BOEDescription);
			WebElement BOEDescription1 = driver.findElement(By.xpath(
					".//div [contains (@class, 'slick-cell l25 r25')]//input"));
			BOEDescription1.sendKeys("Edited For DDU");

			WebElement unitPrice = driver.findElement(
					By.xpath(".//div [contains (@class, 'slick-cell l28 r28')]"));
			j.executeScript("arguments[0].click();", unitPrice);
			WebElement unitPrice1 = driver.findElement(By.xpath(
					".//div [contains (@class, 'slick-cell l28 r28')]//input"));
			unitPrice1.sendKeys("5");

			WebElement extendedValue = driver.findElement(
					By.xpath(".//div [contains (@class, 'slick-cell l29 r29')]"));
			WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
			j.executeScript("arguments[0].click();", extendedValue);
			WebElement refreshedExtendedValue = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div [contains (@class, 'slick-cell l29 r29')]")));
			String extendedValueAttribute = refreshedExtendedValue.getText();

			WebElement assessableValue = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[21]"));
			assessableValue.clear();
			assessableValue.sendKeys(extendedValueAttribute);

			WebElement HSCode = driver.findElement(
					By.xpath(".//div [contains (@class, 'slick-cell l30 r30')]"));
			j.executeScript("arguments[0].click();", HSCode);
			WebElement HSCode1 = driver.findElement(By.xpath(
					".//div [contains (@class, 'slick-cell l30 r30')]//input"));
			HSCode1.sendKeys("54321");

			WebElement itemType = driver.findElement(
					By.xpath(".//div [contains (@class, 'slick-cell l31 r31')]"));
			j.executeScript("arguments[0].click();", itemType);
			WebElement itemType1 = driver.findElement(By.xpath(
					".//div [contains (@class, 'slick-cell l31 r31')]//select"));
			selectOptionByIndex(itemType1, 1);

			WebElement rateOfDuty = driver.findElement(
					By.xpath(".//div [contains (@class, 'slick-cell l32 r32')]"));
			j.executeScript("arguments[0].click();", rateOfDuty);
			WebElement rateOfDuty1 = driver.findElement(By.xpath(
					".//div [contains (@class, 'slick-cell l32 r32')]//select"));
			selectOptionByIndex(rateOfDuty1, 2);

			WebElement totalDutyAmt = driver.findElement(
					By.xpath(".//div [contains (@class, 'slick-cell l36 r36')]"));
			j.executeScript("arguments[0].click();", totalDutyAmt);
			WebElement refreshedtotalDutyAmt = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div [contains (@class, 'slick-cell l36 r36')]")));
			String totalDutyAttribute = refreshedtotalDutyAmt.getText();

			WebElement totalDutyAmount = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[22]"));
			totalDutyAmount.clear();
			totalDutyAmount.sendKeys(totalDutyAttribute);
		} else {
			System.out.println("Purchase Category NOT MATCHING");
		}
	}

	@When("User edit the logistics fields in logistics tile dropdown  - \\(PO Order - NPM - Import), \\(Incoterm - DDU, Duty Exemption - YES)")
	public void user_edit_the_logistics_fields_in_logistics_tile_dropdown_po_order_npm_import_incoterm_ddu_duty_exemption_yes()
			throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;
		// For Incoterm: "DDU" & Duty Exemption : Yes
		WebElement incoterm = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]"));
		selectOptionByIndex(incoterm, 6);

		/* /For "Import"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("0: 1"));

		if (attribute2.equals("0: 1")) {

			WebElement dutyExemption = driver.findElement(By.xpath("(//app-form-select//div//select)[1]"));
			selectOptionByIndex(dutyExemption, 0);

			WebElement customsRequestNo = driver.findElement(By.xpath("(//app-form-text//div//input)[5]"));
			if (customsRequestNo.isEnabled()) {
				System.out.println("Customs Request No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Customs Request No Field : Field is Disabled as Expected");
				System.out.println("Request No : " + customsRequestNo.getAttribute("value"));
			}

			WebElement BOENo = driver.findElement(By.xpath("(//app-form-text//div//input)[6]"));
			if (BOENo.isEnabled()) {
				System.out.println("BOE No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Customs Request No Field : Field is Disabled as Expected");
				System.out.println("BOE No : " + BOENo.getAttribute("value"));
			}

			WebElement BOEDate = driver.findElement(By.xpath("(//app-form-text//div//input)[7]"));
			if (BOEDate.isEnabled()) {
				System.out.println("BOEDate No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Customs Request No Field : Field is Disabled as Expected");
				System.out.println("BOEDate No : " + BOEDate.getAttribute("value"));
			}

			WebElement trackingNo = driver.findElement(By.xpath("(//app-form-text//div//input)[8]"));
			if (trackingNo.isEnabled()) {
				System.out.println("Tracking No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Tracking No Field : Field is Disabled as Expected");
				System.out.println("Tracking No : " + trackingNo.getAttribute("value"));
			}

			WebElement noOfPackages = driver.findElement(By.xpath("(//app-form-text//div//input)[9]"));
			if (noOfPackages.isEnabled()) {
				System.out.println("No of Packages Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("No of Packages Field : Field is Disabled as Expected");
				System.out.println("No of Packages : " + noOfPackages.getAttribute("value"));
			}

			WebElement exchangeRate = driver.findElement(By.xpath("(//app-form-text//div//input)[10]"));
			if (exchangeRate.isEnabled()) {
				System.out.println("Exchange Rate Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("No of Packages Field : Field is Disabled as Expected");
				System.out.println("Exchange Rate : " + exchangeRate.getAttribute("value"));
			}

			WebElement logisticsTileDropdown = driver.findElement(By.xpath("(//*[@id='headingTwo']/h5/button)[1]"));
			logisticsTileDropdown.click();
			Thread.sleep(3000);

			WebElement slickGridScroll = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll);

			WebElement customDuty = driver.findElement(By.xpath("(//app-form-text//div//input)[23]"));
			if (customDuty.isEnabled()) {
				System.out.println("Custom Duty Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Custom Duty Field : Field is Disabled as Expected");
			}

			WebElement dutyInvoiceNo = driver.findElement(By.xpath("(//app-form-text//div//input)[24]"));
			if (dutyInvoiceNo.isEnabled()) {
				System.out.println("Duty Invoice No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Duty Invoice No Field : Field is Disabled as Expected");
			}

			WebElement dutyInvoiceDate = driver.findElement(By.xpath("(//app-form-text//div//input)[25]"));
			if (dutyInvoiceDate.isEnabled()) {
				System.out.println("Duty Invoice Date Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Duty Invoice Date Field : Field is Disabled as Expected");
			}

			WebElement aging = driver.findElement(By.xpath("(//app-form-text//div//input)[26]"));
			if (aging.isEnabled()) {
				System.out.println("Aging Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Aging Field : Field is Disabled as Expected");
			}

			WebElement delayReason = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[3]"));
			delayReason.clear();
			delayReason.sendKeys("Editing For DDU");

//			WebElement pickupDate = driver
//					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[1]"));
//			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
//			pickupDate.sendKeys(date2);

			WebElement logisticsRemarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[4]"));
			logisticsRemarks.clear();
			logisticsRemarks.sendKeys("Editing For DDU");

			/* / DDU - Import - Grid Fields/ */

			int scrollAmount = 4000;
			WebElement slickGridScroll2 = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll2);
			Thread.sleep(1000);
			j.executeScript("arguments[0].scrollLeft += arguments[1];", slickGridScroll2, scrollAmount);
			Thread.sleep(1000);

			WebElement BOEDescription = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l24 r24')]"));
			j.executeScript("arguments[0].click();", BOEDescription);
			WebElement BOEDescription1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l24 r24')]//input"));
			BOEDescription1.sendKeys("Edited For DDU");

			WebElement unitPrice = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l27 r27')]"));
			j.executeScript("arguments[0].click();", unitPrice);
			WebElement unitPrice1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l27 r27')]//input"));
			unitPrice1.sendKeys("5");

			WebElement extendedValue = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l28 r28')]"));
			WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
			j.executeScript("arguments[0].click();", extendedValue);
			WebElement refreshedExtendedValue = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains (@class, 'slick-cell l28 r28')]")));
			String extendedValueAttribute = refreshedExtendedValue.getText();

			WebElement assessableValue = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[21]"));
			assessableValue.clear();
			assessableValue.sendKeys(extendedValueAttribute);

			WebElement HSCode = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l29 r29')]"));
			j.executeScript("arguments[0].click();", HSCode);
			WebElement HSCode1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l29 r29')]//input"));
			HSCode1.sendKeys("54321");

			WebElement itemType = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l30 r30')]"));
			j.executeScript("arguments[0].click();", itemType);
			WebElement itemType1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l30 r30')]//select"));
			selectOptionByIndex(itemType1, 1);

			WebElement rateOfDuty = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l31 r31')]"));
			j.executeScript("arguments[0].click();", rateOfDuty);
			WebElement rateOfDuty1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l31 r31')]//select"));
			selectOptionByIndex(rateOfDuty1, 2);

			WebElement totalDutyAmt = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l35 r35')]"));
			j.executeScript("arguments[0].click();", totalDutyAmt);
			WebElement refreshedtotalDutyAmt = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains (@class, 'slick-cell l35 r35')]")));
			String totalDutyAttribute = refreshedtotalDutyAmt.getText();

			WebElement totalDutyAmount = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[22]"));
			totalDutyAmount.clear();
			totalDutyAmount.sendKeys(totalDutyAttribute);
		} else {
			System.out.println("Purchase Category NOT MATCHING");
		}
	}

	@When("User enters the logistics fields in logistics tile dropdown - \\(PO Order - RM - Import), \\(Incoterm - DDU, Duty Exemption - NO)")
	public void user_enters_the_logistics_fields_in_logistics_tile_dropdown_po_order_rm_import_incoterm_ddu_duty_exemption_no()
			throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;
		// For Incoterm: "DDU" & Duty Exemption: "NO"
		WebElement incoterm = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]"));
		selectOptionByIndex(incoterm, 6);

		/* /For "Import"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("0: 1"));

		if (attribute2.equals("0: 1")) {

			WebElement dutyExemption = driver.findElement(By.xpath("(//app-form-select//div//select)[1]"));
			selectOptionByIndex(dutyExemption, 1);

			WebElement customsRequestNo = driver.findElement(By.xpath("(//app-form-text//div//input)[5]"));
			if (customsRequestNo.isEnabled()) {
				System.out.println("Customs Request No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Customs Request No Field : Field is Disabled as Expected");
				System.out.println("Request No : " + customsRequestNo.getAttribute("value"));
			}

			WebElement BOENo = driver.findElement(By.xpath("(//app-form-text//div//input)[6]"));
			if (BOENo.isEnabled()) {
				System.out.println("BOE No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Customs Request No Field : Field is Disabled as Expected");
				System.out.println("BOE No : " + BOENo.getAttribute("value"));
			}

			WebElement BOEDate = driver.findElement(By.xpath("(//app-form-text//div//input)[7]"));
			if (BOEDate.isEnabled()) {
				System.out.println("BOEDate No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Customs Request No Field : Field is Disabled as Expected");
				System.out.println("BOEDate No : " + BOEDate.getAttribute("value"));
			}

			WebElement trackingNo = driver.findElement(By.xpath("(//app-form-text//div//input)[8]"));
			if (trackingNo.isEnabled()) {
				System.out.println("Tracking No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Tracking No Field : Field is Disabled as Expected");
				System.out.println("Tracking No : " + trackingNo.getAttribute("value"));
			}

			WebElement noOfPackages = driver.findElement(By.xpath("(//app-form-text//div//input)[9]"));
			if (noOfPackages.isEnabled()) {
				System.out.println("No of Packages Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("No of Packages Field : Field is Disabled as Expected");
				System.out.println("No of Packages : " + noOfPackages.getAttribute("value"));
			}

			WebElement exchangeRate = driver.findElement(By.xpath("(//app-form-text//div//input)[10]"));
			if (exchangeRate.isEnabled()) {
				System.out.println("Exchange Rate Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("No of Packages Field : Field is Disabled as Expected");
				System.out.println("Exchange Rate : " + exchangeRate.getAttribute("value"));
			}

			WebElement logisticsTileDropdown = driver.findElement(By.xpath("(//*[@id='headingTwo']/h5/button)[1]"));
			logisticsTileDropdown.click();
			Thread.sleep(3000);

			WebElement customDuty = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[23]"));
			customDuty.sendKeys("100");

			WebElement dutyInvoiceNo = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[24]"));
			dutyInvoiceNo.sendKeys(UUID());

			WebElement dutyInvoiceDate = driver
					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[1]"));
			String date1 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			dutyInvoiceDate.sendKeys(date1);

			WebElement delayReason = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[3]"));
			delayReason.sendKeys("NA");

			WebElement pickupDate = driver
					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[2]"));
			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			pickupDate.sendKeys(date2);

			WebElement logisticsRemarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[4]"));
			logisticsRemarks.sendKeys("NA");

			WebElement CHACheckbox = driver.findElement(By.xpath("(//input[@type='checkbox'])"));
			j.executeScript("arguments[0].click();", CHACheckbox);

			/* / DDU - Import - Grid Fields/ */

			int scrollAmount = 4000;
			WebElement slickGridScroll = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll);
			Thread.sleep(1000);
			j.executeScript("arguments[0].scrollLeft += arguments[1];", slickGridScroll, scrollAmount);
			Thread.sleep(1000);

			WebElement BOEDescription = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l27 r27')]"));
			j.executeScript("arguments[0].click();", BOEDescription);
			WebElement BOEDescription1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l27 r27')]//input"));
			BOEDescription1.sendKeys("Logistics Fields");

			WebElement unitPrice = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l30 r30')]"));
			j.executeScript("arguments[0].click();", unitPrice);
			WebElement unitPrice1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l30 r30')]//input"));
			unitPrice1.sendKeys("10");

			WebElement extendedValue = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l31 r31')]"));
			WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
			j.executeScript("arguments[0].click();", extendedValue);
			WebElement refreshedExtendedValue = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains (@class, 'slick-cell l31 r31')]")));
			String extendedValueAttribute = refreshedExtendedValue.getText();

			WebElement assessableValue = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[21]"));
			assessableValue.sendKeys(extendedValueAttribute);

			WebElement HSCode = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l32 r32')]"));
			j.executeScript("arguments[0].click();", HSCode);
			WebElement HSCode1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l32 r32')]//input"));
			HSCode1.sendKeys("12345");

			WebElement itemType = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l33 r33')]"));
			j.executeScript("arguments[0].click();", itemType);
			WebElement itemType1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l33 r33')]//select"));
			selectOptionByIndex(itemType1, 3);

			WebElement rateOfDuty = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l34 r34')]"));
			j.executeScript("arguments[0].click();", rateOfDuty);
			WebElement rateOfDuty1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l34 r34')]//select"));
			selectOptionByIndex(rateOfDuty1, 3);

			WebElement totalDutyAmt = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l38 r38')]"));
			j.executeScript("arguments[0].click();", totalDutyAmt);
			WebElement refreshedtotalDutyAmt = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains (@class, 'slick-cell l38 r38')]")));
			String totalDutyAttribute = refreshedtotalDutyAmt.getText();

			WebElement totalDutyAmount = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[22]"));
			totalDutyAmount.sendKeys(totalDutyAttribute);
		} else {
			System.out.println("Purchase Category NOT MATCHING");
		}
	}

	@When("User enters the logistics fields in logistics tile dropdown - \\(Testing & Services - Import), \\(Incoterm - DDU, Duty Exemption - NO)")
	public void user_enters_the_logistics_fields_in_logistics_tile_dropdown_testing_services_import_incoterm_ddu_duty_exemption_no()
			throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;
		// For Incoterm: "DDU" & Duty Exemption: "NO"
		WebElement incoterm = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]"));
		selectOptionByIndex(incoterm, 6);

		/* /For "Import"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("0: 1"));

		if (attribute2.equals("0: 1")) {

			WebElement dutyExemption = driver.findElement(By.xpath("(//app-form-select//div//select)[1]"));
			selectOptionByIndex(dutyExemption, 1);

			WebElement customsRequestNo = driver.findElement(By.xpath("(//app-form-text//div//input)[5]"));
			if (customsRequestNo.isEnabled()) {
				System.out.println("Customs Request No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Customs Request No Field : Field is Disabled as Expected");
				System.out.println("Request No : " + customsRequestNo.getAttribute("value"));
			}

			WebElement BOENo = driver.findElement(By.xpath("(//app-form-text//div//input)[6]"));
			if (BOENo.isEnabled()) {
				System.out.println("BOE No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Customs Request No Field : Field is Disabled as Expected");
				System.out.println("BOE No : " + BOENo.getAttribute("value"));
			}

			WebElement BOEDate = driver.findElement(By.xpath("(//app-form-text//div//input)[7]"));
			if (BOEDate.isEnabled()) {
				System.out.println("BOEDate No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Customs Request No Field : Field is Disabled as Expected");
				System.out.println("BOEDate No : " + BOEDate.getAttribute("value"));
			}

			WebElement trackingNo = driver.findElement(By.xpath("(//app-form-text//div//input)[8]"));
			if (trackingNo.isEnabled()) {
				System.out.println("Tracking No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Tracking No Field : Field is Disabled as Expected");
				System.out.println("Tracking No : " + trackingNo.getAttribute("value"));
			}

			WebElement noOfPackages = driver.findElement(By.xpath("(//app-form-text//div//input)[9]"));
			if (noOfPackages.isEnabled()) {
				System.out.println("No of Packages Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("No of Packages Field : Field is Disabled as Expected");
				System.out.println("No of Packages : " + noOfPackages.getAttribute("value"));
			}

			WebElement exchangeRate = driver.findElement(By.xpath("(//app-form-text//div//input)[10]"));
			if (exchangeRate.isEnabled()) {
				System.out.println("Exchange Rate Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("No of Packages Field : Field is Disabled as Expected");
				System.out.println("Exchange Rate : " + exchangeRate.getAttribute("value"));
			}

			WebElement logisticsTileDropdown = driver.findElement(By.xpath("(//*[@id='headingTwo']/h5/button)[1]"));
			logisticsTileDropdown.click();
			Thread.sleep(3000);

			WebElement customDuty = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[23]"));
			customDuty.sendKeys("100");

			WebElement dutyInvoiceNo = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[24]"));
			dutyInvoiceNo.sendKeys(UUID());

			WebElement dutyInvoiceDate = driver
					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[1]"));
			String date1 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			dutyInvoiceDate.sendKeys(date1);

			WebElement delayReason = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[3]"));
			delayReason.sendKeys("NA");

			WebElement pickupDate = driver
					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[2]"));
			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			pickupDate.sendKeys(date2);

			WebElement logisticsRemarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[4]"));
			logisticsRemarks.sendKeys("NA");

			WebElement CHACheckbox = driver.findElement(By.xpath("(//input[@type='checkbox'])"));
			j.executeScript("arguments[0].click();", CHACheckbox);

			/* / DDU - Import - Grid Fields/ */

			int scrollAmount = 4000;
			WebElement slickGridScroll = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll);
			Thread.sleep(1000);
			j.executeScript("arguments[0].scrollLeft += arguments[1];", slickGridScroll, scrollAmount);
			Thread.sleep(1000);

			WebElement BOEDescription = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l25 r25')]"));
			j.executeScript("arguments[0].click();", BOEDescription);
			WebElement BOEDescription1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l25 r25')]//input"));
			BOEDescription1.sendKeys("Logistics Fields");

			WebElement unitPrice = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l28 r28')]"));
			j.executeScript("arguments[0].click();", unitPrice);
			WebElement unitPrice1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l28 r28')]//input"));
			unitPrice1.sendKeys("10");

			WebElement extendedValue = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l29 r29')]"));
			WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
			j.executeScript("arguments[0].click();", extendedValue);
			WebElement refreshedExtendedValue = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains (@class, 'slick-cell l29 r29')]")));
			String extendedValueAttribute = refreshedExtendedValue.getText();

			WebElement assessableValue = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[21]"));
			assessableValue.sendKeys(extendedValueAttribute);

			WebElement HSCode = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l30 r30')]"));
			j.executeScript("arguments[0].click();", HSCode);
			WebElement HSCode1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l30 r30')]//input"));
			HSCode1.sendKeys("12345");

			WebElement itemType = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l31 r31')]"));
			j.executeScript("arguments[0].click();", itemType);
			WebElement itemType1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l31 r31')]//select"));
			selectOptionByIndex(itemType1, 3);

			WebElement rateOfDuty = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l32 r32')]"));
			j.executeScript("arguments[0].click();", rateOfDuty);
			WebElement rateOfDuty1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l32 r32')]//select"));
			selectOptionByIndex(rateOfDuty1, 3);

			WebElement totalDutyAmt = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l36 r36')]"));
			j.executeScript("arguments[0].click();", totalDutyAmt);
			WebElement refreshedtotalDutyAmt = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains (@class, 'slick-cell l36 r36')]")));
			String totalDutyAttribute = refreshedtotalDutyAmt.getText();

			WebElement totalDutyAmount = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[22]"));
			totalDutyAmount.sendKeys(totalDutyAttribute);
		} else {
			System.out.println("Purchase Category NOT MATCHING");
		}
	}

	@When("User enters the logistics fields in logistics tile dropdown - \\(PO Order - NPM - Import), \\(Incoterm - DDU, Duty Exemption - NO)")
	public void user_enters_the_logistics_fields_in_logistics_tile_dropdown_po_order_npm_import_incoterm_ddu_duty_exemption_no()
			throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;
		// For Incoterm: "DDU" & Duty Exemption: "NO"
		WebElement incoterm = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]"));
		selectOptionByIndex(incoterm, 6);

		/* /For "Import"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("0: 1"));

		if (attribute2.equals("0: 1")) {

			WebElement dutyExemption = driver.findElement(By.xpath("(//app-form-select//div//select)[1]"));
			selectOptionByIndex(dutyExemption, 1);

			WebElement customsRequestNo = driver.findElement(By.xpath("(//app-form-text//div//input)[5]"));
			if (customsRequestNo.isEnabled()) {
				System.out.println("Customs Request No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Customs Request No Field : Field is Disabled as Expected");
				System.out.println("Request No : " + customsRequestNo.getAttribute("value"));
			}

			WebElement BOENo = driver.findElement(By.xpath("(//app-form-text//div//input)[6]"));
			if (BOENo.isEnabled()) {
				System.out.println("BOE No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Customs Request No Field : Field is Disabled as Expected");
				System.out.println("BOE No : " + BOENo.getAttribute("value"));
			}

			WebElement BOEDate = driver.findElement(By.xpath("(//app-form-text//div//input)[7]"));
			if (BOEDate.isEnabled()) {
				System.out.println("BOEDate No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Customs Request No Field : Field is Disabled as Expected");
				System.out.println("BOEDate No : " + BOEDate.getAttribute("value"));
			}

			WebElement trackingNo = driver.findElement(By.xpath("(//app-form-text//div//input)[8]"));
			if (trackingNo.isEnabled()) {
				System.out.println("Tracking No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Tracking No Field : Field is Disabled as Expected");
				System.out.println("Tracking No : " + trackingNo.getAttribute("value"));
			}

			WebElement noOfPackages = driver.findElement(By.xpath("(//app-form-text//div//input)[9]"));
			if (noOfPackages.isEnabled()) {
				System.out.println("No of Packages Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("No of Packages Field : Field is Disabled as Expected");
				System.out.println("No of Packages : " + noOfPackages.getAttribute("value"));
			}

			WebElement exchangeRate = driver.findElement(By.xpath("(//app-form-text//div//input)[10]"));
			if (exchangeRate.isEnabled()) {
				System.out.println("Exchange Rate Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("No of Packages Field : Field is Disabled as Expected");
				System.out.println("Exchange Rate : " + exchangeRate.getAttribute("value"));
			}

			WebElement logisticsTileDropdown = driver.findElement(By.xpath("(//*[@id='headingTwo']/h5/button)[1]"));
			logisticsTileDropdown.click();
			Thread.sleep(3000);

			WebElement customDuty = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[23]"));
			customDuty.sendKeys("100");

			WebElement dutyInvoiceNo = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[24]"));
			dutyInvoiceNo.sendKeys(UUID());

			WebElement dutyInvoiceDate = driver
					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[1]"));
			String date1 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			dutyInvoiceDate.sendKeys(date1);

			WebElement delayReason = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[3]"));
			delayReason.sendKeys("NA");

			WebElement pickupDate = driver
					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[2]"));
			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			pickupDate.sendKeys(date2);

			WebElement logisticsRemarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[4]"));
			logisticsRemarks.sendKeys("NA");

			WebElement CHACheckbox = driver.findElement(By.xpath("(//input[@type='checkbox'])"));
			j.executeScript("arguments[0].click();", CHACheckbox);

			/* / DDU - Import - Grid Fields/ */

			int scrollAmount = 4000;
			WebElement slickGridScroll = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll);
			Thread.sleep(1000);
			j.executeScript("arguments[0].scrollLeft += arguments[1];", slickGridScroll, scrollAmount);
			Thread.sleep(1000);

			WebElement BOEDescription = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l24 r24')]"));
			j.executeScript("arguments[0].click();", BOEDescription);
			WebElement BOEDescription1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l24 r24')]//input"));
			BOEDescription1.sendKeys("Logistics Fields");

			WebElement unitPrice = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l27 r27')]"));
			j.executeScript("arguments[0].click();", unitPrice);
			WebElement unitPrice1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l27 r27')]//input"));
			unitPrice1.sendKeys("10");

			WebElement extendedValue = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l28 r28')]"));
			WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
			j.executeScript("arguments[0].click();", extendedValue);
			WebElement refreshedExtendedValue = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains (@class, 'slick-cell l28 r28')]")));
			String extendedValueAttribute = refreshedExtendedValue.getText();

			WebElement assessableValue = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[21]"));
			assessableValue.sendKeys(extendedValueAttribute);

			WebElement HSCode = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l29 r29')]"));
			j.executeScript("arguments[0].click();", HSCode);
			WebElement HSCode1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l29 r29')]//input"));
			HSCode1.sendKeys("12345");

			WebElement itemType = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l30 r30')]"));
			j.executeScript("arguments[0].click();", itemType);
			WebElement itemType1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l30 r30')]//select"));
			selectOptionByIndex(itemType1, 3);

			WebElement rateOfDuty = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l31 r31')]"));
			j.executeScript("arguments[0].click();", rateOfDuty);
			WebElement rateOfDuty1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l31 r31')]//select"));
			selectOptionByIndex(rateOfDuty1, 3);

			WebElement totalDutyAmt = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l35 r35')]"));
			j.executeScript("arguments[0].click();", totalDutyAmt);
			WebElement refreshedtotalDutyAmt = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains (@class, 'slick-cell l35 r35')]")));
			String totalDutyAttribute = refreshedtotalDutyAmt.getText();

			WebElement totalDutyAmount = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[22]"));
			totalDutyAmount.sendKeys(totalDutyAttribute);
		} else {
			System.out.println("Purchase Category NOT MATCHING");
		}
	}

	@When("User edit the logistics fields in logistics tile dropdown  - \\(PO Order - RM - Import), \\(Incoterm - DAP, Duty Exemption - YES)")
	public void user_edit_the_logistics_fields_in_logistics_tile_dropdown_po_order_rm_import_incoterm_dap_duty_exemption_yes()
			throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;
		// For Incoterm: "DAP" & Duty Exemption : Yes
		WebElement incoterm = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]"));
		selectOptionByIndex(incoterm, 4);

		/* /For "Import"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("0: 1"));

		if (attribute2.equals("0: 1")) {

			WebElement dutyExemption = driver.findElement(By.xpath("(//app-form-select//div//select)[1]"));
			selectOptionByIndex(dutyExemption, 0);

			WebElement customsRequestNo = driver.findElement(By.xpath("(//app-form-text//div//input)[5]"));
			if (customsRequestNo.isEnabled()) {
				System.out.println("Customs Request No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Customs Request No Field : Field is Disabled as Expected");
				System.out.println("Request No : " + customsRequestNo.getAttribute("value"));
			}

			WebElement BOENo = driver.findElement(By.xpath("(//app-form-text//div//input)[6]"));
			if (BOENo.isEnabled()) {
				System.out.println("BOE No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Customs Request No Field : Field is Disabled as Expected");
				System.out.println("BOE No : " + BOENo.getAttribute("value"));
			}

			WebElement BOEDate = driver.findElement(By.xpath("(//app-form-text//div//input)[7]"));
			if (BOEDate.isEnabled()) {
				System.out.println("BOEDate No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Customs Request No Field : Field is Disabled as Expected");
				System.out.println("BOEDate No : " + BOEDate.getAttribute("value"));
			}

			WebElement trackingNo = driver.findElement(By.xpath("(//app-form-text//div//input)[8]"));
			if (trackingNo.isEnabled()) {
				System.out.println("Tracking No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Tracking No Field : Field is Disabled as Expected");
				System.out.println("Tracking No : " + trackingNo.getAttribute("value"));
			}

			WebElement noOfPackages = driver.findElement(By.xpath("(//app-form-text//div//input)[9]"));
			if (noOfPackages.isEnabled()) {
				System.out.println("No of Packages Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("No of Packages Field : Field is Disabled as Expected");
				System.out.println("No of Packages : " + noOfPackages.getAttribute("value"));
			}

			WebElement exchangeRate = driver.findElement(By.xpath("(//app-form-text//div//input)[10]"));
			if (exchangeRate.isEnabled()) {
				System.out.println("Exchange Rate Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("No of Packages Field : Field is Disabled as Expected");
				System.out.println("Exchange Rate : " + exchangeRate.getAttribute("value"));
			}

			WebElement logisticsTileDropdown = driver.findElement(By.xpath("(//*[@id='headingTwo']/h5/button)[1]"));
			logisticsTileDropdown.click();
			Thread.sleep(3000);

			WebElement slickGridScroll = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll);

			WebElement customDuty = driver.findElement(By.xpath("(//app-form-text//div//input)[23]"));
			if (customDuty.isEnabled()) {
				System.out.println("Custom Duty Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Custom Duty Field : Field is Disabled as Expected");
			}

			WebElement dutyInvoiceNo = driver.findElement(By.xpath("(//app-form-text//div//input)[24]"));
			if (dutyInvoiceNo.isEnabled()) {
				System.out.println("Duty Invoice No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Duty Invoice No Field : Field is Disabled as Expected");
			}

			WebElement dutyInvoiceDate = driver.findElement(By.xpath("(//app-form-text//div//input)[25]"));
			if (dutyInvoiceDate.isEnabled()) {
				System.out.println("Duty Invoice Date Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Duty Invoice Date Field : Field is Disabled as Expected");
			}

			WebElement aging = driver.findElement(By.xpath("(//app-form-text//div//input)[26]"));
			if (aging.isEnabled()) {
				System.out.println("Aging Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Aging Field : Field is Disabled as Expected");
			}

			WebElement delayReason = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[3]"));
			delayReason.clear();
			delayReason.sendKeys("Editing For DAP");

//			WebElement pickupDate = driver
//					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[1]"));
//			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
//			pickupDate.sendKeys(date2);

			WebElement logisticsRemarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[4]"));
			logisticsRemarks.clear();
			logisticsRemarks.sendKeys("Editing For DAP");

			WebElement CHACheckbox = driver.findElement(By.xpath("(//input[@type='checkbox'])"));
			j.executeScript("arguments[0].click();", CHACheckbox);

			/* / DAP - Import - Grid Fields / */

			int scrollAmount = 4000;
			WebElement slickGridScroll2 = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll2);
			Thread.sleep(1000);
			j.executeScript("arguments[0].scrollLeft += arguments[1];", slickGridScroll2, scrollAmount);
			Thread.sleep(1000);

			WebElement BOEDescription = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l27 r27')]"));
			j.executeScript("arguments[0].click();", BOEDescription);
			WebElement BOEDescription1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l27 r27')]//input"));
			BOEDescription1.sendKeys("Edited For DAP");

			WebElement unitPrice = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l30 r30')]"));
			j.executeScript("arguments[0].click();", unitPrice);
			WebElement unitPrice1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l30 r30')]//input"));
			unitPrice1.sendKeys("5");

			WebElement extendedValue = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l31 r31')]"));
			WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
			j.executeScript("arguments[0].click();", extendedValue);
			WebElement refreshedExtendedValue = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains (@class, 'slick-cell l31 r31')]")));
			String extendedValueAttribute = refreshedExtendedValue.getText();

			WebElement assessableValue = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[21]"));
			assessableValue.clear();
			assessableValue.sendKeys(extendedValueAttribute);

			WebElement HSCode = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l32 r32')]"));
			j.executeScript("arguments[0].click();", HSCode);
			WebElement HSCode1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l32 r32')]//input"));
			HSCode1.sendKeys("54321");

			WebElement itemType = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l33 r33')]"));
			j.executeScript("arguments[0].click();", itemType);
			WebElement itemType1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l33 r33')]//select"));
			selectOptionByIndex(itemType1, 1);

			WebElement rateOfDuty = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l34 r34')]"));
			j.executeScript("arguments[0].click();", rateOfDuty);
			WebElement rateOfDuty1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l34 r34')]//select"));
			selectOptionByIndex(rateOfDuty1, 2);

			WebElement totalDutyAmt = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l38 r38')]"));
			j.executeScript("arguments[0].click();", totalDutyAmt);
			WebElement refreshedtotalDutyAmt = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains (@class, 'slick-cell l38 r38')]")));
			String totalDutyAttribute = refreshedtotalDutyAmt.getText();

			WebElement totalDutyAmount = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[22]"));
			totalDutyAmount.clear();
			totalDutyAmount.sendKeys(totalDutyAttribute);
		} else {
			System.out.println("Purchase Category NOT MATCHING");
		}
	}

	@When("User edit the logistics fields in logistics tile dropdown - \\(Testing & Services - Import), \\(Incoterm - DAP, Duty Exemption - YES)")
	public void user_edit_the_logistics_fields_in_logistics_tile_dropdown_testing_services_import_incoterm_dap_duty_exemption_yes()
			throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;
		// For Incoterm: "DAP" & Duty Exemption : Yes
		WebElement incoterm = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]"));
		selectOptionByIndex(incoterm, 4);

		/* /For "Import"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("0: 1"));

		if (attribute2.equals("0: 1")) {

			WebElement dutyExemption = driver.findElement(By.xpath("(//app-form-select//div//select)[1]"));
			selectOptionByIndex(dutyExemption, 0);

			WebElement customsRequestNo = driver.findElement(By.xpath("(//app-form-text//div//input)[5]"));
			if (customsRequestNo.isEnabled()) {
				System.out.println("Customs Request No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Customs Request No Field : Field is Disabled as Expected");
				System.out.println("Request No : " + customsRequestNo.getAttribute("value"));
			}

			WebElement BOENo = driver.findElement(By.xpath("(//app-form-text//div//input)[6]"));
			if (BOENo.isEnabled()) {
				System.out.println("BOE No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Customs Request No Field : Field is Disabled as Expected");
				System.out.println("BOE No : " + BOENo.getAttribute("value"));
			}

			WebElement BOEDate = driver.findElement(By.xpath("(//app-form-text//div//input)[7]"));
			if (BOEDate.isEnabled()) {
				System.out.println("BOEDate No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Customs Request No Field : Field is Disabled as Expected");
				System.out.println("BOEDate No : " + BOEDate.getAttribute("value"));
			}

			WebElement trackingNo = driver.findElement(By.xpath("(//app-form-text//div//input)[8]"));
			if (trackingNo.isEnabled()) {
				System.out.println("Tracking No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Tracking No Field : Field is Disabled as Expected");
				System.out.println("Tracking No : " + trackingNo.getAttribute("value"));
			}

			WebElement noOfPackages = driver.findElement(By.xpath("(//app-form-text//div//input)[9]"));
			if (noOfPackages.isEnabled()) {
				System.out.println("No of Packages Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("No of Packages Field : Field is Disabled as Expected");
				System.out.println("No of Packages : " + noOfPackages.getAttribute("value"));
			}

			WebElement exchangeRate = driver.findElement(By.xpath("(//app-form-text//div//input)[10]"));
			if (exchangeRate.isEnabled()) {
				System.out.println("Exchange Rate Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("No of Packages Field : Field is Disabled as Expected");
				System.out.println("Exchange Rate : " + exchangeRate.getAttribute("value"));
			}

			WebElement logisticsTileDropdown = driver.findElement(By.xpath("(//*[@id='headingTwo']/h5/button)[1]"));
			logisticsTileDropdown.click();
			Thread.sleep(3000);

			WebElement slickGridScroll = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll);

			WebElement customDuty = driver.findElement(By.xpath("(//app-form-text//div//input)[23]"));
			if (customDuty.isEnabled()) {
				System.out.println("Custom Duty Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Custom Duty Field : Field is Disabled as Expected");
			}

			WebElement dutyInvoiceNo = driver.findElement(By.xpath("(//app-form-text//div//input)[24]"));
			if (dutyInvoiceNo.isEnabled()) {
				System.out.println("Duty Invoice No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Duty Invoice No Field : Field is Disabled as Expected");
			}

			WebElement dutyInvoiceDate = driver.findElement(By.xpath("(//app-form-text//div//input)[25]"));
			if (dutyInvoiceDate.isEnabled()) {
				System.out.println("Duty Invoice Date Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Duty Invoice Date Field : Field is Disabled as Expected");
			}

			WebElement aging = driver.findElement(By.xpath("(//app-form-text//div//input)[26]"));
			if (aging.isEnabled()) {
				System.out.println("Aging Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Aging Field : Field is Disabled as Expected");
			}

			WebElement delayReason = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[3]"));
			delayReason.clear();
			delayReason.sendKeys("Editing For DAP");

//			WebElement pickupDate = driver
//					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[1]"));
//			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
//			pickupDate.sendKeys(date2);

			WebElement logisticsRemarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[4]"));
			logisticsRemarks.clear();
			logisticsRemarks.sendKeys("Editing For DAP");

			WebElement CHACheckbox = driver.findElement(By.xpath("(//input[@type='checkbox'])"));
			j.executeScript("arguments[0].click();", CHACheckbox);

			/* / DAP - Import - Grid Fields / */

			int scrollAmount = 4000;
			WebElement slickGridScroll2 = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll2);
			Thread.sleep(1000);
			j.executeScript("arguments[0].scrollLeft += arguments[1];", slickGridScroll2, scrollAmount);
			Thread.sleep(1000);

			WebElement BOEDescription = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l25 r25')]"));
			j.executeScript("arguments[0].click();", BOEDescription);
			WebElement BOEDescription1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l25 r25')]//input"));
			BOEDescription1.sendKeys("Edited For DAP");

			WebElement unitPrice = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l28 r28')]"));
			j.executeScript("arguments[0].click();", unitPrice);
			WebElement unitPrice1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l28 r28')]//input"));
			unitPrice1.sendKeys("5");

			WebElement extendedValue = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l29 r29')]"));
			WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
			j.executeScript("arguments[0].click();", extendedValue);
			WebElement refreshedExtendedValue = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains (@class, 'slick-cell l29 r29')]")));
			String extendedValueAttribute = refreshedExtendedValue.getText();

			WebElement assessableValue = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[21]"));
			assessableValue.clear();
			assessableValue.sendKeys(extendedValueAttribute);

			WebElement HSCode = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l30 r30')]"));
			j.executeScript("arguments[0].click();", HSCode);
			WebElement HSCode1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l30 r30')]//input"));
			HSCode1.sendKeys("54321");

			WebElement itemType = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l31 r31')]"));
			j.executeScript("arguments[0].click();", itemType);
			WebElement itemType1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l31 r31')]//select"));
			selectOptionByIndex(itemType1, 1);

			WebElement rateOfDuty = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l32 r32')]"));
			j.executeScript("arguments[0].click();", rateOfDuty);
			WebElement rateOfDuty1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l32 r32')]//select"));
			selectOptionByIndex(rateOfDuty1, 2);

			WebElement totalDutyAmt = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l36 r36')]"));
			j.executeScript("arguments[0].click();", totalDutyAmt);
			WebElement refreshedtotalDutyAmt = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains (@class, 'slick-cell l36 r36')]")));
			String totalDutyAttribute = refreshedtotalDutyAmt.getText();

			WebElement totalDutyAmount = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[22]"));
			totalDutyAmount.clear();
			totalDutyAmount.sendKeys(totalDutyAttribute);
		} else {
			System.out.println("Purchase Category NOT MATCHING");
		}
	}

	@When("User edit the logistics fields in logistics tile dropdown  - \\(PO Order - NPM - Import), \\(Incoterm - DAP, Duty Exemption - YES)")
	public void user_edit_the_logistics_fields_in_logistics_tile_dropdown_po_order_npm_import_incoterm_dap_duty_exemption_yes()
			throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;
		// For Incoterm: "DAP" & Duty Exemption : Yes
		WebElement incoterm = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]"));
		selectOptionByIndex(incoterm, 4);

		/* /For "Import"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("0: 1"));

		if (attribute2.equals("0: 1")) {

			WebElement dutyExemption = driver.findElement(By.xpath("(//app-form-select//div//select)[1]"));
			selectOptionByIndex(dutyExemption, 0);

			WebElement customsRequestNo = driver.findElement(By.xpath("(//app-form-text//div//input)[5]"));
			if (customsRequestNo.isEnabled()) {
				System.out.println("Customs Request No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Customs Request No Field : Field is Disabled as Expected");
				System.out.println("Request No : " + customsRequestNo.getAttribute("value"));
			}

			WebElement BOENo = driver.findElement(By.xpath("(//app-form-text//div//input)[6]"));
			if (BOENo.isEnabled()) {
				System.out.println("BOE No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Customs Request No Field : Field is Disabled as Expected");
				System.out.println("BOE No : " + BOENo.getAttribute("value"));
			}

			WebElement BOEDate = driver.findElement(By.xpath("(//app-form-text//div//input)[7]"));
			if (BOEDate.isEnabled()) {
				System.out.println("BOEDate No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Customs Request No Field : Field is Disabled as Expected");
				System.out.println("BOEDate No : " + BOEDate.getAttribute("value"));
			}

			WebElement trackingNo = driver.findElement(By.xpath("(//app-form-text//div//input)[8]"));
			if (trackingNo.isEnabled()) {
				System.out.println("Tracking No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Tracking No Field : Field is Disabled as Expected");
				System.out.println("Tracking No : " + trackingNo.getAttribute("value"));
			}

			WebElement noOfPackages = driver.findElement(By.xpath("(//app-form-text//div//input)[9]"));
			if (noOfPackages.isEnabled()) {
				System.out.println("No of Packages Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("No of Packages Field : Field is Disabled as Expected");
				System.out.println("No of Packages : " + noOfPackages.getAttribute("value"));
			}

			WebElement exchangeRate = driver.findElement(By.xpath("(//app-form-text//div//input)[10]"));
			if (exchangeRate.isEnabled()) {
				System.out.println("Exchange Rate Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("No of Packages Field : Field is Disabled as Expected");
				System.out.println("Exchange Rate : " + exchangeRate.getAttribute("value"));
			}

			WebElement logisticsTileDropdown = driver.findElement(By.xpath("(//*[@id='headingTwo']/h5/button)[1]"));
			logisticsTileDropdown.click();
			Thread.sleep(3000);

			WebElement slickGridScroll = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll);

			WebElement customDuty = driver.findElement(By.xpath("(//app-form-text//div//input)[23]"));
			if (customDuty.isEnabled()) {
				System.out.println("Custom Duty Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Custom Duty Field : Field is Disabled as Expected");
			}

			WebElement dutyInvoiceNo = driver.findElement(By.xpath("(//app-form-text//div//input)[24]"));
			if (dutyInvoiceNo.isEnabled()) {
				System.out.println("Duty Invoice No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Duty Invoice No Field : Field is Disabled as Expected");
			}

			WebElement dutyInvoiceDate = driver.findElement(By.xpath("(//app-form-text//div//input)[25]"));
			if (dutyInvoiceDate.isEnabled()) {
				System.out.println("Duty Invoice Date Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Duty Invoice Date Field : Field is Disabled as Expected");
			}

			WebElement aging = driver.findElement(By.xpath("(//app-form-text//div//input)[26]"));
			if (aging.isEnabled()) {
				System.out.println("Aging Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Aging Field : Field is Disabled as Expected");
			}

			WebElement delayReason = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[3]"));
			delayReason.clear();
			delayReason.sendKeys("Editing For DAP");

//			WebElement pickupDate = driver
//					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[1]"));
//			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
//			pickupDate.sendKeys(date2);

			WebElement logisticsRemarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[4]"));
			logisticsRemarks.clear();
			logisticsRemarks.sendKeys("Editing For DAP");

			/* / CHA Fields / */

			WebElement CHAName = driver.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[37]"));
			CHAName.clear();
			CHAName.sendKeys("Edited Freight");

			WebElement CHAInvoiceNo = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[38]"));
			CHAInvoiceNo.clear();
			CHAInvoiceNo.sendKeys("56789");

			WebElement CHAInvoiceDate = driver
					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[2]"));
			String date = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			CHAInvoiceDate.clear();
			CHAInvoiceDate.sendKeys(date);

			WebElement CHAInvoiceValue = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[39]"));
			CHAInvoiceValue.clear();
			CHAInvoiceValue.sendKeys("50");

			/* / DAP - Import - Grid Fields / */

			int scrollAmount = 4000;
			WebElement slickGridScroll2 = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll2);
			Thread.sleep(1000);
			j.executeScript("arguments[0].scrollLeft += arguments[1];", slickGridScroll2, scrollAmount);
			Thread.sleep(1000);

			WebElement BOEDescription = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l24 r24')]"));
			j.executeScript("arguments[0].click();", BOEDescription);
			WebElement BOEDescription1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l24 r24')]//input"));
			BOEDescription1.sendKeys("Edited For DAP");

			WebElement unitPrice = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l27 r27')]"));
			j.executeScript("arguments[0].click();", unitPrice);
			WebElement unitPrice1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l27 r27')]//input"));
			unitPrice1.sendKeys("5");

			WebElement extendedValue = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l28 r28')]"));
			WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
			j.executeScript("arguments[0].click();", extendedValue);
			WebElement refreshedExtendedValue = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains (@class, 'slick-cell l28 r28')]")));
			String extendedValueAttribute = refreshedExtendedValue.getText();

			WebElement assessableValue = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[21]"));
			assessableValue.clear();
			assessableValue.sendKeys(extendedValueAttribute);

			WebElement HSCode = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l29 r29')]"));
			j.executeScript("arguments[0].click();", HSCode);
			WebElement HSCode1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l29 r29')]//input"));
			HSCode1.sendKeys("54321");

			WebElement itemType = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l30 r30')]"));
			j.executeScript("arguments[0].click();", itemType);
			WebElement itemType1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l30 r30')]//select"));
			selectOptionByIndex(itemType1, 1);

			WebElement rateOfDuty = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l31 r31')]"));
			j.executeScript("arguments[0].click();", rateOfDuty);
			WebElement rateOfDuty1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l31 r31')]//select"));
			selectOptionByIndex(rateOfDuty1, 2);

			WebElement totalDutyAmt = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l35 r35')]"));
			j.executeScript("arguments[0].click();", totalDutyAmt);
			WebElement refreshedtotalDutyAmt = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains (@class, 'slick-cell l35 r35')]")));
			String totalDutyAttribute = refreshedtotalDutyAmt.getText();

			WebElement totalDutyAmount = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[22]"));
			totalDutyAmount.clear();
			totalDutyAmount.sendKeys(totalDutyAttribute);
		} else {
			System.out.println("Purchase Category NOT MATCHING");
		}
	}

	@When("User select the Yet to Freight status from the filter - \\(PO Order - RM - Import)")
	public void user_select_the_yet_to_freight_status_from_the_filter_po_order_rm_import() throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement Status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(Status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
//		wait1.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement staleElementDummyClick = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		j.executeScript("arguments[0].click();", staleElementDummyClick);
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait1.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 1);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 1);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 3);
		Thread.sleep(2500);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(2000);
	}

	@When("User select the Yet to Freight status from the filter - \\(Testing & Services - Import)")
	public void user_select_the_yet_to_freight_status_from_the_filter_testing_services_import()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement Status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(Status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
//		wait1.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement staleElementDummyClick = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		j.executeScript("arguments[0].click();", staleElementDummyClick);
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait1.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 3);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 3);
		Thread.sleep(2500);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(2000);
	}

	@When("User select the Yet to Freight status from the filter - \\(WEB Order - RM - Import)")
	public void user_select_the_yet_to_freight_status_from_the_filter_web_order_rm_import()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement Status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(Status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
//		wait1.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement staleElementDummyClick = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		j.executeScript("arguments[0].click();", staleElementDummyClick);
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait1.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 1);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 2);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 3);
		Thread.sleep(2500);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(2000);
	}

	@When("User select the Yet to Freight status from the filter - \\(PO Order - FG - Import)")
	public void user_select_the_yet_to_freight_status_from_the_filter_po_order_fg_import() throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement Status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(Status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
//		wait1.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement staleElementDummyClick = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		j.executeScript("arguments[0].click();", staleElementDummyClick);
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait1.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 2);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 1);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 3);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(2000);
	}

	@When("User select the Yet to Freight status from the filter - \\(WEB Order - FG - Import)")
	public void user_select_the_yet_to_freight_status_from_the_filter_web_order_fg_import()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement Status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(Status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
//		wait1.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement staleElementDummyClick = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		j.executeScript("arguments[0].click();", staleElementDummyClick);
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait1.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 2);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 2);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 3);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(2000);
	}

	@When("User select the Yet to Freight status from the filter - \\(PO Order - NPM - Import)")
	public void user_select_the_yet_to_freight_status_from_the_filter_po_order_npm_import()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
//		wait1.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement staleElementDummyClick = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		j.executeScript("arguments[0].click();", staleElementDummyClick);
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait1.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 3);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 1);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 3);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(2000);
	}

	@When("User select the Yet to Freight status from the filter - \\(WEB Order - NPM - Import)")
	public void user_select_the_yet_to_freight_status_from_the_filter_web_order_npm_import()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
//		wait1.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement staleElementDummyClick = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		j.executeScript("arguments[0].click();", staleElementDummyClick);
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait1.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 3);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 2);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 3);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(2000);
	}

	@When("User select the Yet to CHA status from the filter - \\(PO Order - RM - Import)")
	public void user_select_the_yet_to_cha_status_from_the_filter_po_order_rm_import() throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait1.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait1.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 1);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 1);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 4);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
	}

	@When("User select the Yet to CHA status from the filter - \\(Testing & Services - Import)")
	public void user_select_the_yet_to_cha_status_from_the_filter_testing_services_import()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait1.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait1.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 3);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 4);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
	}

	@When("User select the Yet to CHA status from the filter - \\(WEB Order - RM - Import)")
	public void user_select_the_yet_to_cha_status_from_the_filter_web_order_rm_import() throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait1.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait1.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 1);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 2);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 4);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
	}

	@When("User select the Yet to CHA status from the filter - \\(PO Order - FG - Import)")
	public void user_select_the_yet_to_cha_status_from_the_filter_po_order_fg_import() throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait1.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait1.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 2);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 1);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 4);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
	}

	@When("User select the Yet to CHA status from the filter - \\(WEB Order - FG - Import)")
	public void user_select_the_yet_to_cha_status_from_the_filter_web_order_fg_import() throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait1.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait1.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 2);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 2);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 4);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
	}

	@When("User select the Yet to CHA status from the filter - \\(PO Order - NPM - Import)")
	public void user_select_the_yet_to_cha_status_from_the_filter_po_order_npm_import() throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait1.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait1.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 3);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 1);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 4);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
	}

	@When("User select the Yet to CHA status from the filter - \\(WEB Order - NPM - Import)")
	public void user_select_the_yet_to_cha_status_from_the_filter_web_order_npm_import() throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait1.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait1.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 3);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 2);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 4);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
	}

	@When("User select the Yet to CHA status from the filter - \\(PO Order - RM - Domestic)")
	public void user_select_the_yet_to_cha_status_from_the_filter_po_order_rm_domestic() throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait1.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait1.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 1);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 1);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 4);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
	}

	@When("User select the Yet to CHA status from the filter - \\(Testing & Services - Domestic)")
	public void user_select_the_yet_to_cha_status_from_the_filter_testing_services_domestic()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait1.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait1.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 3);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 4);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
	}

	@When("User select the Yet to CHA status from the filter - \\(WEB Order - RM - Domestic)")
	public void user_select_the_yet_to_cha_status_from_the_filter_web_order_rm_domestic() throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait1.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait1.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 1);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 2);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 4);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
	}

	@When("User select the Yet to CHA status from the filter - \\(PO Order - FG - Domestic)")
	public void user_select_the_yet_to_cha_status_from_the_filter_po_order_fg_domestic() throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait1.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait1.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 2);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 1);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 4);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
	}

	@When("User select the Yet to CHA status from the filter - \\(WEB Order - FG - Domestic)")
	public void user_select_the_yet_to_cha_status_from_the_filter_web_order_fg_domestic() throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait1.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait1.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 2);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 2);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 4);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
	}

	@When("User select the Yet to CHA status from the filter - \\(PO Order - NPM - Domestic)")
	public void user_select_the_yet_to_cha_status_from_the_filter_po_order_npm_domestic() throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait1.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait1.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 3);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 1);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 4);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
	}

	@When("User select the Yet to CHA status from the filter - \\(WEB Order - NPM - Domestic)")
	public void user_select_the_yet_to_cha_status_from_the_filter_web_order_npm_domestic() throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait1.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait1.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 3);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 2);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 4);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
	}

	@When("User enters the Freight fields in logistics tile dropdown - \\(PO Order - RM - Import), \\(Incoterm - EXW, Duty Exemption - YES)")
	public void user_enters_the_freight_fields_in_logistics_tile_dropdown_po_order_rm_import_incoterm_exw_duty_exemption_yes()
			throws InterruptedException {
		WebElement logisticsTileDropdown = driver.findElement(By.xpath("(//*[@id='headingTwo']/h5/button)[1]"));
		logisticsTileDropdown.click();
		Thread.sleep(3000);

		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement freightInvoiceNo = driver
				.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[25]"));
		wait.until(ExpectedConditions.visibilityOf(freightInvoiceNo));
		freightInvoiceNo.sendKeys(UUID());

		WebElement typeOfImport = driver.findElement(By.xpath("(//app-form-select[1]//div[1]//select)[2]"));
		selectOptionByIndex(typeOfImport, 1);

		WebElement packageWeight = driver
				.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[26]"));
		packageWeight.sendKeys("100");

		WebElement vWeight = driver.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[27]"));
		vWeight.sendKeys("100");

		WebElement billingWeight = driver
				.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[28]"));
		billingWeight.sendKeys("100");

		WebElement basicFreight = driver.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[29]"));
		basicFreight.sendKeys("100");

		WebElement fuelSurcharge = driver
				.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[30]"));
		fuelSurcharge.sendKeys("100");

		WebElement otherSurcharge = driver
				.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[31]"));
		otherSurcharge.sendKeys("100");

		WebElement clearanceCharges = driver
				.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[32]"));
		clearanceCharges.sendKeys("100");

		WebElement freightGST = driver.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[33]"));
		freightGST.sendKeys("18");

		WebElement totalFreight = driver.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[34]"));
		if (totalFreight.isEnabled()) {
			System.out.println("Freight Field : Field is Enabled as Not Expected");
		} else {
			System.out.println("Freight Field : Field is Disabled as Expected");
			System.out.println("Total Freight Charges : " + totalFreight.getAttribute("Value"));
		}
		WebElement freightRemarks = driver
				.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[5]"));
		freightRemarks.sendKeys("NA");
	}

	@When("User enters the CHA fields in logistics tile dropdown - \\(PO Order - RM - Import), \\(Incoterm - FOB, Duty Exemption - NO)")
	public void user_enters_the_cha_fields_in_logistics_tile_dropdown_po_order_rm_import_incoterm_fob_duty_exemption_no()
			throws InterruptedException {
		WebElement logisticsTileDropdown = driver.findElement(By.xpath("(//*[@id='headingTwo']/h5/button)[1]"));
		logisticsTileDropdown.click();
		Thread.sleep(3000);

		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement CHAName = driver.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[35]"));
		wait.until(ExpectedConditions.visibilityOf(CHAName));
		CHAName.sendKeys("Freight");

		WebElement CHAInvoiceNo = driver.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[36]"));
		CHAInvoiceNo.sendKeys("98765");

		WebElement CHAInvoiceDate = driver
				.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[1]"));
		String date = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
		CHAInvoiceDate.sendKeys(date);

		WebElement CHAInvoiceValue = driver
				.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[37]"));
		CHAInvoiceValue.sendKeys("100");
	}

	@When("User enters the CHA fields in logistics tile dropdown - \\(PO Order - RM - Domestic), \\(Incoterm - FOB, Duty Exemption - YES)")
	public void user_enters_the_cha_fields_in_logistics_tile_dropdown_po_order_rm_domestic_incoterm_fob_duty_exemption_yes()
			throws InterruptedException {
		WebElement logisticsTileDropdown = driver.findElement(By.xpath("(//*[@id='headingTwo']/h5/button)[1]"));
		logisticsTileDropdown.click();
		Thread.sleep(3000);

		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement CHAName = driver.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[34]"));
		wait.until(ExpectedConditions.visibilityOf(CHAName));
		CHAName.sendKeys("Freight");

		WebElement CHAInvoiceNo = driver.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[35]"));
		CHAInvoiceNo.sendKeys("98765");

		WebElement CHAInvoiceDate = driver
				.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[1]"));
		String date = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
		CHAInvoiceDate.sendKeys(date);

		WebElement CHAInvoiceValue = driver
				.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[36]"));
		CHAInvoiceValue.sendKeys("100");
	}

	@When("User enters the CHA fields in logistics tile dropdown - \\(PO Order - RM - Domestic), \\(Incoterm - DDU, Duty Exemption - YES)")
	public void user_enters_the_cha_fields_in_logistics_tile_dropdown_po_order_rm_domestic_incoterm_ddu_duty_exemption_yes()
			throws InterruptedException {
		WebElement logisticsTileDropdown = driver.findElement(By.xpath("(//*[@id='headingTwo']/h5/button)[1]"));
		logisticsTileDropdown.click();
		Thread.sleep(3000);

		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement CHAName = driver.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[37]"));
		wait.until(ExpectedConditions.visibilityOf(CHAName));
		CHAName.sendKeys("Freight");

		WebElement CHAInvoiceNo = driver.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[38]"));
		CHAInvoiceNo.sendKeys("98765");

		WebElement CHAInvoiceDate = driver
				.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[1]"));
		String date = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
		CHAInvoiceDate.sendKeys(date);

		WebElement CHAInvoiceValue = driver
				.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[39]"));
		CHAInvoiceValue.sendKeys("100");
	}

	@When("User enters the CHA fields in logistics tile dropdown - \\(PO Order - RM - Import), \\(Incoterm - DDU, Duty Exemption - NO)")
	public void user_enters_the_cha_fields_in_logistics_tile_dropdown_po_order_rm_import_incoterm_ddu_duty_exemption_no()
			throws InterruptedException {
		WebElement logisticsTileDropdown = driver.findElement(By.xpath("(//*[@id='headingTwo']/h5/button)[1]"));
		logisticsTileDropdown.click();
		Thread.sleep(3000);

		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement CHAName = driver.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[38]"));
		wait.until(ExpectedConditions.visibilityOf(CHAName));
		CHAName.sendKeys("Freight");

		WebElement CHAInvoiceNo = driver.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[39]"));
		CHAInvoiceNo.sendKeys("98765");

		WebElement CHAInvoiceDate = driver
				.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[1]"));
		String date = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
		CHAInvoiceDate.sendKeys(date);

		WebElement CHAInvoiceValue = driver
				.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[40]"));
		CHAInvoiceValue.sendKeys("100");
	}

	@When("User enters the Freight fields in logistics tile dropdown - \\(PO Order - RM - Import), \\(Incoterm - FOB, Duty Exemption - NO)")
	public void user_enters_the_freight_fields_in_logistics_tile_dropdown_po_order_rm_import_incoterm_fob_duty_exemption_no()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement logisticsTileDropdown = driver.findElement(By.xpath("(//*[@id='headingTwo']/h5/button)[1]"));
		wait.until(ExpectedConditions.visibilityOf(logisticsTileDropdown));
		logisticsTileDropdown.click();
		Thread.sleep(3000);

		WebElement freightInvoiceNo = driver
				.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[25]"));
		wait.until(ExpectedConditions
				.visibilityOfElementLocated(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[25]")));
		freightInvoiceNo.sendKeys(UUID());

		WebElement typeOfImport = driver.findElement(By.xpath("(//app-form-select[1]//div[1]//select)[2]"));
		selectOptionByIndex(typeOfImport, 1);

		WebElement packageWeight = driver
				.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[26]"));
		packageWeight.sendKeys("100");

		WebElement vWeight = driver.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[27]"));
		vWeight.sendKeys("100");

		WebElement billingWeight = driver
				.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[28]"));
		billingWeight.sendKeys("100");

		WebElement basicFreight = driver.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[29]"));
		basicFreight.sendKeys("100");

		WebElement fuelSurcharge = driver
				.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[30]"));
		fuelSurcharge.sendKeys("100");

		WebElement otherSurcharge = driver
				.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[31]"));
		otherSurcharge.sendKeys("100");

		WebElement clearanceCharges = driver
				.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[32]"));
		clearanceCharges.sendKeys("100");

		WebElement freightGST = driver.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[33]"));
		freightGST.sendKeys("18");

		WebElement totalFreight = driver.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[34]"));
		if (totalFreight.isEnabled()) {
			System.out.println("Freight Field : Field is Enabled as Not Expected");
		} else {
			System.out.println("Freight Field : Field is Disabled as Expected");
			System.out.println("Total Freight Charges : " + totalFreight.getAttribute("Value"));
		}
		WebElement freightRemarks = driver
				.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[5]"));
		freightRemarks.sendKeys("NA");
	}

	@When("User select the Yet to Logistics status from the filter - \\(PO Order - RM - Domestic)")
	public void user_select_the_yet_to_logistics_status_from_the_filter_po_order_rm_domestic() {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(20));

		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		receiptBtn.click();

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 1);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 1);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

//		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
//		wait.until(ExpectedConditions.visibilityOf(GRNStatus));
//		WebElement refreshedGRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
//		wait.until(ExpectedConditions.visibilityOf(refreshedGRNStatus));
//		WebElement refreshedGRNStatus1 = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
//		wait.until(ExpectedConditions.visibilityOf(refreshedGRNStatus1));
//		selectOptionByIndex(refreshedGRNStatus1, 1);
//		try {
//			return wait
//					.until(ExpectedConditions.presenceOfElementLocated(By.xpath("//select[@name='receiptstatusid']")));
//		} catch (StaleElementReferenceException e) {
//			return wait
//					.until(ExpectedConditions.presenceOfElementLocated(By.xpath("//select[@name='receiptstatusid']")));
//		}

		int maxRetries = 3;
		for (int i = 0; i < maxRetries; i++) {
			try {
				WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
				wait.until(ExpectedConditions.visibilityOf(GRNStatus));
				selectOptionByIndex(GRNStatus, 1);
				break; // If the click is successful, exit the loop
			} catch (StaleElementReferenceException e) {
				// Element is stale, handle it and continue the loop
				System.out.println("Stale Element Reference Exception. Retrying...");
			}
		}
	}

	@When("User select the Yet to Logistics status from the filter - \\(Testing & Services - Domestic)")
	public WebElement user_select_the_yet_to_logistics_status_from_the_filter_testing_services_domestic() {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(20));

		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		receiptBtn.click();

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 3);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		wait.until(ExpectedConditions.visibilityOf(GRNStatus));
		WebElement refreshedGRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNStatus));
		WebElement refreshedGRNStatus1 = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNStatus1));
		selectOptionByIndex(refreshedGRNStatus1, 1);
		try {
			return wait
					.until(ExpectedConditions.presenceOfElementLocated(By.xpath("//select[@name='receiptstatusid']")));
		} catch (StaleElementReferenceException e) {
			return wait
					.until(ExpectedConditions.presenceOfElementLocated(By.xpath("//select[@name='receiptstatusid']")));
		}
	}

	@When("User select the Yet to Logistics status from the filter - \\(CSM - Domestic)")
	public WebElement user_select_the_yet_to_logistics_status_from_the_filter_csm_domestic() {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(20));

		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		receiptBtn.click();

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 4);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		wait.until(ExpectedConditions.visibilityOf(GRNStatus));
		WebElement refreshedGRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNStatus));
		WebElement refreshedGRNStatus1 = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNStatus1));
		selectOptionByIndex(refreshedGRNStatus1, 1);
		try {
			return wait
					.until(ExpectedConditions.presenceOfElementLocated(By.xpath("//select[@name='receiptstatusid']")));
		} catch (StaleElementReferenceException e) {
			return wait
					.until(ExpectedConditions.presenceOfElementLocated(By.xpath("//select[@name='receiptstatusid']")));
		}
	}

	@When("User select the Yet to Logistics status from the filter - \\(WEB Order - RM - Domestic)")
	public WebElement user_select_the_yet_to_logistics_status_from_the_filter_web_order_rm_domestic() {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(20));

		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		receiptBtn.click();

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 1);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 2);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		By grnStatusLocator = By.xpath("//select[@name='receiptstatusid']");
		WebElement GRNStatus = driver.findElement(grnStatusLocator);
		wait.until(ExpectedConditions.visibilityOf(GRNStatus));
		selectOptionByIndex(GRNStatus, 1);

		WebElement refreshedGRNStatus = driver.findElement(grnStatusLocator);
		WebElement refreshed = wait
				.until(ExpectedConditions.presenceOfElementLocated(By.xpath("//select[@name='receiptstatusid']")));
		selectOptionByIndex(refreshed, 1);

//		WebElement refreshedGRNStatus1 = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
//		wait.until(ExpectedConditions.visibilityOf(refreshedGRNStatus1));
//		selectOptionByIndex(refreshedGRNStatus1, 1);
		try {
			return wait
					.until(ExpectedConditions.presenceOfElementLocated(By.xpath("//select[@name='receiptstatusid']")));
		} catch (StaleElementReferenceException e) {
			return wait
					.until(ExpectedConditions.presenceOfElementLocated(By.xpath("//select[@name='receiptstatusid']")));
		}
	}

	@When("User select the Yet to Logistics status from the filter - \\(PO Order - FG - Domestic)")
	public void user_select_the_yet_to_logistics_status_from_the_filter_po_order_fg_domestic() {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(20));

		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		receiptBtn.click();

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 2);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 1);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

//		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
//		wait.until(ExpectedConditions.visibilityOf(GRNStatus));
//		WebElement refreshedGRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
//		wait.until(ExpectedConditions.visibilityOf(refreshedGRNStatus));
//		WebElement refreshedGRNStatus1 = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
//		wait.until(ExpectedConditions.visibilityOf(refreshedGRNStatus1));
//		selectOptionByIndex(refreshedGRNStatus1, 1);
//		try {
//			return wait
//					.until(ExpectedConditions.presenceOfElementLocated(By.xpath("//select[@name='receiptstatusid']")));
//		} catch (StaleElementReferenceException e) {
//			return wait
//					.until(ExpectedConditions.presenceOfElementLocated(By.xpath("//select[@name='receiptstatusid']")));
//		}
		
		int maxretries = 3;
		for (int i = 0; i < maxretries; i++) {
			try {
			WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
			wait.until(ExpectedConditions.visibilityOf(GRNStatus));
			selectOptionByIndex(GRNStatus, 1);
			break;
			}catch(StaleElementReferenceException e) {
				System.out.println("Maximum Retry Failed");
			}
		}
	}

	@When("User select the Yet to Logistics status from the filter - \\(WEB Order - FG - Domestic)")
	public WebElement user_select_the_yet_to_logistics_status_from_the_filter_web_order_fg_domestic() {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(20));

		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		receiptBtn.click();

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 2);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 2);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		wait.until(ExpectedConditions.visibilityOf(GRNStatus));
		WebElement refreshedGRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNStatus));
		WebElement refreshedGRNStatus1 = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNStatus1));
		selectOptionByIndex(refreshedGRNStatus1, 1);
		try {
			return wait
					.until(ExpectedConditions.presenceOfElementLocated(By.xpath("//select[@name='receiptstatusid']")));
		} catch (StaleElementReferenceException e) {
			return wait
					.until(ExpectedConditions.presenceOfElementLocated(By.xpath("//select[@name='receiptstatusid']")));
		}
	}

	@When("User select the Yet to Logistics status from the filter - \\(PO Order - NPM - Domestic)")
	public WebElement user_select_the_yet_to_logistics_status_from_the_filter_po_order_npm_domestic()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(20));

		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		receiptBtn.click();

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 3);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 1);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		wait.until(ExpectedConditions.visibilityOf(GRNStatus));
		WebElement refreshedGRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNStatus));
		WebElement refreshedGRNStatus1 = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNStatus1));
		selectOptionByIndex(refreshedGRNStatus1, 1);
		Thread.sleep(2000);
		try {
			return wait
					.until(ExpectedConditions.presenceOfElementLocated(By.xpath("//select[@name='receiptstatusid']")));
		} catch (StaleElementReferenceException e) {
			return wait
					.until(ExpectedConditions.presenceOfElementLocated(By.xpath("//select[@name='receiptstatusid']")));
		}
	}

	@When("User select the Yet to Logistics status from the filter - \\(WEB Order - NPM - Domestic)")
	public WebElement user_select_the_yet_to_logistics_status_from_the_filter_web_order_npm_domestic()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(20));

		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		receiptBtn.click();

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 3);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 2);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		wait.until(ExpectedConditions.visibilityOf(GRNStatus));
		WebElement refreshedGRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNStatus));
		WebElement refreshedGRNStatus1 = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNStatus1));
		selectOptionByIndex(refreshedGRNStatus1, 1);
		Thread.sleep(2000);
		try {
			return wait
					.until(ExpectedConditions.presenceOfElementLocated(By.xpath("//select[@name='receiptstatusid']")));
		} catch (StaleElementReferenceException e) {
			return wait
					.until(ExpectedConditions.presenceOfElementLocated(By.xpath("//select[@name='receiptstatusid']")));
		}
	}

	@Given("User click on the edit button")
	public void user_click_on_the_edit_button() throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(20));
		WebElement receiptmodule = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("window.scrollTo(0,0);", receiptmodule);
		wait.until(ExpectedConditions.elementToBeClickable(receiptmodule));
		j.executeScript("arguments[0].click();", receiptmodule);
		Thread.sleep(1000);

		WebElement editBtn = wait.until(ExpectedConditions
				.visibilityOfElementLocated(By.xpath("//table[@role='grid']//tbody//tr[1]//th//button[1]//i")));
		wait.until(ExpectedConditions.elementToBeClickable(editBtn));
		j.executeScript("arguments[0].click();", editBtn);
		Thread.sleep(2000);
	}

	@When("User ensure the logistics fields are in disabled status")
	public void user_ensure_the_logistics_fields_are_in_disabled_status() throws InterruptedException {
		WebElement logisticsTileDropdown = driver.findElement(By.xpath("(//*[@id=\"headingTwo\"]/h5/button)[1]"));
		logisticsTileDropdown.click();
		Thread.sleep(1000);

		WebElement logisticsTile = driver.findElement(By.xpath("(//div[@id='collapseTwo'])[1]"));
		if (logisticsTile.isEnabled()) {
			System.out.println("Field is Enabled as Not Expected");
		} else {
			System.out.println("Field is Disabled as Expected");
			System.out.println("Total Receipt Value : " + logisticsTile.getAttribute("value"));
		}
	}

	@When("User move the stock to the IQC team")
	public void user_move_the_stock_to_the_iqc_team() {
		JavascriptExecutor j = (JavascriptExecutor) driver;
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(20));
		WebElement checkbox = driver.findElement(By.xpath("(//input[@type='checkbox'])[2]"));
//		wait.until(ExpectedConditions.visibilityOf(checkbox));
		WebElement staleEleRefClick = driver.findElement(By.xpath("//button[contains (text(), 'Move to IQC')]"));
		j.executeScript("arguments[0].click();", staleEleRefClick);
		WebElement refreshedCheckbox = driver.findElement(By.xpath("(//input[@type='checkbox'])[2]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedCheckbox));
		j.executeScript("arguments[0].click();", refreshedCheckbox);
		WebElement btnMoveToIQC = driver.findElement(By.xpath("//button[contains (text(), 'Move to IQC')]"));
		btnMoveToIQC.click();
	}

	@Given("User enters the Logistics Team Member {string} and {string}")
	public void user_enters_the_logistics_team_member_and(String username, String password) {
		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
		WebElement loginID = driver.findElement(By.xpath("//input[@id='loginkey'][1]"));
		loginID.sendKeys(username);
		WebElement loginPassword = driver.findElement(By.xpath("//input[@id='password'][1]"));
		loginPassword.sendKeys(password);
		WebElement btnClick = driver.findElement(By.xpath("//input[@id='remembermeCheck'][1]"));
		btnClick.click();
		WebElement btnUnclick = driver.findElement(By.xpath("//input[@id='remembermeCheck'][1]"));
		btnUnclick.click();
		WebElement signInButton = driver.findElement(By.xpath("//button[@type='submit'][1]"));
		signInButton.click();
	}

	@When("User enters the logistics fields in logistics tile dropdown - \\(PO Order - RM - Domestic), \\(Incoterm - EXW, Duty Exemption - NO)")
	public void user_enters_the_logistics_fields_in_logistics_tile_dropdown_po_order_rm_domestic_incoterm_exw_duty_exemption_no()
			throws InterruptedException {

		// For Incoterm: "EXW", Duty Exemption: "NO"
		WebElement incoterm = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]"));
		selectOptionByIndex(incoterm, 0);

		/* /For "Domestic"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("1: 2"));

		if (attribute2.equals("1: 2")) {

			WebElement dutyExemption = driver.findElement(By.xpath("(//app-form-select//div//select)[1]"));
			selectOptionByIndex(dutyExemption, 1);

			WebElement trackingNo = driver.findElement(By.xpath("(//app-form-text//div//input)[5]"));
			if (trackingNo.isEnabled()) {
				System.out.println("Tracking No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Tracking No Field : Field is Disabled as Expected");
				System.out.println("Tracking No : " + trackingNo.getAttribute("value"));
			}

			WebElement noOfPackages = driver.findElement(By.xpath("(//app-form-text//div//input)[6]"));
			if (noOfPackages.isEnabled()) {
				System.out.println("No of Packages Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("No of Packages Field : Field is Disabled as Expected");
				System.out.println("No of Packages : " + noOfPackages.getAttribute("value"));
			}

			WebElement logisticsTileDropdown = driver.findElement(By.xpath("(//*[@id='headingTwo']/h5/button)[1]"));
			logisticsTileDropdown.click();
			Thread.sleep(3000);

			WebElement customDuty = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[16]"));
			if (customDuty.isEnabled()) {
				System.out.println("Custom Duty Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Custom Duty Field : Field is Disabled as Expected");
				System.out.println("Custom Duty : " + customDuty.getAttribute("value"));
			}

			WebElement dutyInvoiceNo = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[17]"));
			if (dutyInvoiceNo.isEnabled()) {
				System.out.println("Duty Invoice No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Duty Invoice No Field : Field is Disabled as Expected");
				System.out.println("Duty Invoice No : " + dutyInvoiceNo.getAttribute("value"));
			}

			WebElement dutyInvoiceDate = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[18]"));
			if (dutyInvoiceDate.isEnabled()) {
				System.out.println("Duty Invoice Date Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Duty Invoice Date Field : Field is Disabled as Expected");
				System.out.println("Duty Invoice Date : " + dutyInvoiceDate.getAttribute("value"));
			}

			WebElement aging = driver.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[19]"));
			if (aging.isEnabled()) {
				System.out.println("Aging Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Aging Field : Field is Disabled as Expected");
				System.out.println("Aging : " + aging.getAttribute("value"));
			}

			WebElement delayReason = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[3]"));
			delayReason.sendKeys("NA");

			WebElement pickupDate = driver
					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[1]"));
			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			pickupDate.sendKeys(date2);

//			WebElement logisticsRemarks = driver
//					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[4]"));
//			logisticsRemarks.sendKeys("NA");

			/* / EXW - Domestic - Grid Fields/ */
			JavascriptExecutor j = (JavascriptExecutor) driver;
			int scrollAmount = 4000;
			WebElement slickGridScroll = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll);
			Thread.sleep(1000);
			j.executeScript("arguments[0].scrollLeft += arguments[1];", slickGridScroll, scrollAmount);
			Thread.sleep(1000);

			WebElement BOEDescription = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l30 r30')]"));
			j.executeScript("arguments[0].click();", BOEDescription);
			WebElement BOEDescription1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l30 r30')]//input"));
			BOEDescription1.sendKeys("Logistics Fields");

			WebElement extendedValue = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l34 r34')]"));
			WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
			j.executeScript("arguments[0].click();", extendedValue);
			WebElement refreshedExtendedValue = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains (@class, 'slick-cell l34 r34')]")));
			String extendedValueAttribute = refreshedExtendedValue.getText();

			WebElement assessableValue = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[14]"));
			assessableValue.sendKeys(extendedValueAttribute);

			WebElement HSCode = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l35 r35')]"));
			j.executeScript("arguments[0].click();", HSCode);
			WebElement HSCode1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l35 r35')]//input"));
			HSCode1.sendKeys("12345");

			WebElement itemType = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l36 r36')]"));
			j.executeScript("arguments[0].click();", itemType);
			WebElement itemType1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l36 r36')]//select"));
			selectOptionByIndex(itemType1, 3);

			WebElement rateOfDuty = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l37 r37')]"));
			j.executeScript("arguments[0].click();", rateOfDuty);
			WebElement rateOfDuty1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l37 r37')]//select"));
			selectOptionByIndex(rateOfDuty1, 3);

			WebElement TDAmount = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l39 r39')]"));
			j.executeScript("arguments[0].click();", TDAmount);
			WebElement refreshedTDAmount = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains (@class, 'slick-cell l39 r39')]")));
			String TDAttribute = refreshedTDAmount.getText();

			WebElement totalDutyAmount = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[15]"));
			totalDutyAmount.sendKeys(TDAttribute);
		}
	}

	@When("User enters the logistics fields in logistics tile dropdown - \\(Testing & Services - Domestic), \\(Incoterm - EXW, Duty Exemption - NO)")
	public void user_enters_the_logistics_fields_in_logistics_tile_dropdown_testing_services_domestic_incoterm_exw_duty_exemption_no()
			throws InterruptedException {
		// For Incoterm: "EXW", Duty Exemption: "NO"
		WebElement incoterm = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]"));
		selectOptionByIndex(incoterm, 0);

		/* /For "Domestic"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("1: 2"));

		if (attribute2.equals("1: 2")) {

			WebElement dutyExemption = driver.findElement(By.xpath("(//app-form-select//div//select)[1]"));
			selectOptionByIndex(dutyExemption, 1);

			WebElement trackingNo = driver.findElement(By.xpath("(//app-form-text//div//input)[5]"));
			if (trackingNo.isEnabled()) {
				System.out.println("Tracking No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Tracking No Field : Field is Disabled as Expected");
				System.out.println("Tracking No : " + trackingNo.getAttribute("value"));
			}

			WebElement noOfPackages = driver.findElement(By.xpath("(//app-form-text//div//input)[6]"));
			if (noOfPackages.isEnabled()) {
				System.out.println("No of Packages Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("No of Packages Field : Field is Disabled as Expected");
				System.out.println("No of Packages : " + noOfPackages.getAttribute("value"));
			}

			WebElement logisticsTileDropdown = driver.findElement(By.xpath("(//*[@id='headingTwo']/h5/button)[1]"));
			logisticsTileDropdown.click();
			Thread.sleep(3000);

			WebElement customDuty = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[16]"));
			if (customDuty.isEnabled()) {
				System.out.println("Custom Duty Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Custom Duty Field : Field is Disabled as Expected");
				System.out.println("Custom Duty : " + customDuty.getAttribute("value"));
			}

			WebElement dutyInvoiceNo = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[17]"));
			if (dutyInvoiceNo.isEnabled()) {
				System.out.println("Duty Invoice No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Duty Invoice No Field : Field is Disabled as Expected");
				System.out.println("Duty Invoice No : " + dutyInvoiceNo.getAttribute("value"));
			}

			WebElement dutyInvoiceDate = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[18]"));
			if (dutyInvoiceDate.isEnabled()) {
				System.out.println("Duty Invoice Date Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Duty Invoice Date Field : Field is Disabled as Expected");
				System.out.println("Duty Invoice Date : " + dutyInvoiceDate.getAttribute("value"));
			}

			WebElement aging = driver.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[19]"));
			if (aging.isEnabled()) {
				System.out.println("Aging Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Aging Field : Field is Disabled as Expected");
				System.out.println("Aging : " + aging.getAttribute("value"));
			}

			WebElement delayReason = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[3]"));
			delayReason.sendKeys("NA");

			WebElement pickupDate = driver
					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[1]"));
			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			pickupDate.sendKeys(date2);

			WebElement logisticsRemarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[4]"));
			logisticsRemarks.sendKeys("NA");

			/* / EXW - Domestic - Grid Fields/ */
			JavascriptExecutor j = (JavascriptExecutor) driver;
			int scrollAmount = 4000;
			WebElement slickGridScroll = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll);
			Thread.sleep(1000);
			j.executeScript("arguments[0].scrollLeft += arguments[1];", slickGridScroll, scrollAmount);
			Thread.sleep(1000);

			WebElement BOEDescription = driver.findElement(
					By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l28 r28']"));
			j.executeScript("arguments[0].click();", BOEDescription);
			WebElement BOEDescription1 = driver.findElement(By.xpath(
					"//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l28 r28 active editable selected']//input"));
			BOEDescription1.sendKeys("Logistics Fields");

			WebElement extendedValue = driver.findElement(
					By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l32 r32 selected']"));
			WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
			j.executeScript("arguments[0].click();", extendedValue);
			WebElement refreshedExtendedValue = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					"//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l32 r32 selected active']")));
			String extendedValueAttribute = refreshedExtendedValue.getText();

			WebElement assessableValue = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[14]"));
			assessableValue.sendKeys(extendedValueAttribute);

			WebElement HSCode = driver.findElement(
					By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l33 r33 selected']"));
			j.executeScript("arguments[0].click();", HSCode);
			WebElement HSCode1 = driver.findElement(By.xpath(
					"//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l33 r33 selected active editable']//input"));
			HSCode1.sendKeys("12345");

			WebElement itemType = driver.findElement(
					By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l34 r34 selected']"));
			j.executeScript("arguments[0].click();", itemType);
			WebElement itemType1 = driver.findElement(By.xpath(
					"//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l34 r34 selected active editable']//select"));
			selectOptionByIndex(itemType1, 3);

			WebElement rateOfDuty = driver.findElement(
					By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l35 r35 selected']"));
			j.executeScript("arguments[0].click();", rateOfDuty);
			WebElement rateOfDuty1 = driver.findElement(By.xpath(
					"//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l35 r35 selected active editable']//select"));
			selectOptionByIndex(rateOfDuty1, 3);

			WebElement TDAmount = driver.findElement(
					By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l37 r37 selected']"));
			j.executeScript("arguments[0].click();", TDAmount);
			WebElement refreshedTDAmount = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					"//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l37 r37 selected active']")));
			String TDAttribute = refreshedTDAmount.getText();

			WebElement totalDutyAmount = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[15]"));
			totalDutyAmount.sendKeys(TDAttribute);
		}
	}

	@When("User enters the logistics fields in logistics tile dropdown - \\(CSM - Domestic), \\(Incoterm - EXW, Duty Exemption - NO)")
	public void user_enters_the_logistics_fields_in_logistics_tile_dropdown_csm_domestic_incoterm_exw_duty_exemption_no()
			throws InterruptedException {
		// For Incoterm: "EXW", Duty Exemption: "NO"
		WebElement incoterm = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]"));
		selectOptionByIndex(incoterm, 0);
		
		/* /For "Domestic"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("1: 2"));

		if (attribute2.equals("1: 2")) {

			WebElement dutyExemption = driver.findElement(By.xpath("(//app-form-select//div//select)[1]"));
			selectOptionByIndex(dutyExemption, 1);

			WebElement trackingNo = driver.findElement(By.xpath("(//app-form-text//div//input)[5]"));
			if (trackingNo.isEnabled()) {
				System.out.println("Tracking No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Tracking No Field : Field is Disabled as Expected");
				System.out.println("Tracking No : " + trackingNo.getAttribute("value"));
			}

			WebElement noOfPackages = driver.findElement(By.xpath("(//app-form-text//div//input)[6]"));
			if (noOfPackages.isEnabled()) {
				System.out.println("No of Packages Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("No of Packages Field : Field is Disabled as Expected");
				System.out.println("No of Packages : " + noOfPackages.getAttribute("value"));
			}

			WebElement logisticsTileDropdown = driver.findElement(By.xpath("(//*[@id='headingTwo']/h5/button)[1]"));
			logisticsTileDropdown.click();
			Thread.sleep(3000);

			WebElement customDuty = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[16]"));
			if (customDuty.isEnabled()) {
				System.out.println("Custom Duty Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Custom Duty Field : Field is Disabled as Expected");
				System.out.println("Custom Duty : " + customDuty.getAttribute("value"));
			}

			WebElement dutyInvoiceNo = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[17]"));
			if (dutyInvoiceNo.isEnabled()) {
				System.out.println("Duty Invoice No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Duty Invoice No Field : Field is Disabled as Expected");
				System.out.println("Duty Invoice No : " + dutyInvoiceNo.getAttribute("value"));
			}

			WebElement dutyInvoiceDate = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[18]"));
			if (dutyInvoiceDate.isEnabled()) {
				System.out.println("Duty Invoice Date Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Duty Invoice Date Field : Field is Disabled as Expected");
				System.out.println("Duty Invoice Date : " + dutyInvoiceDate.getAttribute("value"));
			}

			WebElement aging = driver.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[19]"));
			if (aging.isEnabled()) {
				System.out.println("Aging Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Aging Field : Field is Disabled as Expected");
				System.out.println("Aging : " + aging.getAttribute("value"));
			}

			WebElement delayReason = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[2]"));
			delayReason.sendKeys("NA");

			WebElement pickupDate = driver
					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[1]"));
			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			pickupDate.sendKeys(date2);

			WebElement logisticsRemarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[3]"));
			logisticsRemarks.sendKeys("NA");

			/* / EXW - Domestic - Grid Fields/ */
			JavascriptExecutor j = (JavascriptExecutor) driver;
			int scrollAmount = 4000;
			WebElement slickGridScroll = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll);
			Thread.sleep(1000);
			j.executeScript("arguments[0].scrollLeft += arguments[1];", slickGridScroll, scrollAmount);
			Thread.sleep(1000);

			WebElement BOEDescription = driver.findElement(
					By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l25 r25']"));
			j.executeScript("arguments[0].click();", BOEDescription);
			WebElement BOEDescription1 = driver.findElement(By.xpath(
					"//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l25 r25 active editable selected']//input"));
			BOEDescription1.sendKeys("Logistics Fields");

			WebElement extendedValue = driver.findElement(
					By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l29 r29 selected']"));
			WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
			j.executeScript("arguments[0].click();", extendedValue);
			WebElement refreshedExtendedValue = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					"//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l29 r29 active selected']")));
			String extendedValueAttribute = refreshedExtendedValue.getText();

			WebElement assessableValue = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[14]"));
			assessableValue.sendKeys(extendedValueAttribute);

			WebElement HSCode = driver.findElement(
					By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l30 r30 selected']"));
			j.executeScript("arguments[0].click();", HSCode);
			WebElement HSCode1 = driver.findElement(By.xpath(
					"//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l30 r30 selected active editable']//input"));
			HSCode1.sendKeys("12345");

			WebElement itemType = driver.findElement(
					By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l31 r31 selected']"));
			j.executeScript("arguments[0].click();", itemType);
			Thread.sleep(500);
			try {
				itemType = driver.findElement(By.xpath(
						"//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l31 r31 active selected']"));
				j.executeScript("arguments[0].click();", itemType);
			} catch (StaleElementReferenceException e) {
				j.executeScript("arguments[0].click();", itemType);
			}
			WebElement itemType1 = driver.findElement(By.xpath(
					"//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l31 r31 selected active editable']//select"));
			selectOptionByIndex(itemType1, 3);

			WebElement rateOfDuty = driver.findElement(
					By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l32 r32 selected']"));
			j.executeScript("arguments[0].click();", rateOfDuty);
			Thread.sleep(500);
			try {
				rateOfDuty = driver.findElement(By.xpath(
						"//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l32 r32 active selected']"));
				j.executeScript("arguments[0].click();", rateOfDuty);
			} catch (StaleElementReferenceException e) {
				j.executeScript("arguments[0].click();", rateOfDuty);
			}
			WebElement rateOfDuty1 = driver.findElement(By.xpath(
					"//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l32 r32 selected active editable']//select"));
			selectOptionByIndex(rateOfDuty1, 3);

			WebElement TDAmount = driver.findElement(
					By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l34 r34 selected']"));
			j.executeScript("arguments[0].click();", TDAmount);
			WebElement refreshedTDAmount = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					"//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l34 r34 active selected']")));
			String TDAttribute = refreshedTDAmount.getText();

			WebElement totalDutyAmount = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[15]"));
			totalDutyAmount.sendKeys(TDAttribute);
		}
	}

	@When("User enters the logistics fields in logistics tile dropdown - \\(PO Order - NPM - Domestic), \\(Incoterm - EXW, Duty Exemption - NO)")
	public void user_enters_the_logistics_fields_in_logistics_tile_dropdown_po_order_npm_domestic_incoterm_exw_duty_exemption_no()
			throws InterruptedException {
		// For Incoterm: "EXW", Duty Exemption: "NO"
		WebElement incoterm = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]"));
		selectOptionByIndex(incoterm, 0);

		/* /For "Domestic"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("1: 2"));

		if (attribute2.equals("1: 2")) {

			WebElement dutyExemption = driver.findElement(By.xpath("(//app-form-select//div//select)[1]"));
			selectOptionByIndex(dutyExemption, 1);

			WebElement trackingNo = driver.findElement(By.xpath("(//app-form-text//div//input)[5]"));
			if (trackingNo.isEnabled()) {
				System.out.println("Tracking No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Tracking No Field : Field is Disabled as Expected");
				System.out.println("Tracking No : " + trackingNo.getAttribute("value"));
			}

			WebElement noOfPackages = driver.findElement(By.xpath("(//app-form-text//div//input)[6]"));
			if (noOfPackages.isEnabled()) {
				System.out.println("No of Packages Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("No of Packages Field : Field is Disabled as Expected");
				System.out.println("No of Packages : " + noOfPackages.getAttribute("value"));
			}

			WebElement logisticsTileDropdown = driver.findElement(By.xpath("(//*[@id='headingTwo']/h5/button)[1]"));
			logisticsTileDropdown.click();
			Thread.sleep(3000);

			WebElement customDuty = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[16]"));
			if (customDuty.isEnabled()) {
				System.out.println("Custom Duty Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Custom Duty Field : Field is Disabled as Expected");
				System.out.println("Custom Duty : " + customDuty.getAttribute("value"));
			}

			WebElement dutyInvoiceNo = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[17]"));
			if (dutyInvoiceNo.isEnabled()) {
				System.out.println("Duty Invoice No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Duty Invoice No Field : Field is Disabled as Expected");
				System.out.println("Duty Invoice No : " + dutyInvoiceNo.getAttribute("value"));
			}

			WebElement dutyInvoiceDate = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[18]"));
			if (dutyInvoiceDate.isEnabled()) {
				System.out.println("Duty Invoice Date Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Duty Invoice Date Field : Field is Disabled as Expected");
				System.out.println("Duty Invoice Date : " + dutyInvoiceDate.getAttribute("value"));
			}

			WebElement aging = driver.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[19]"));
			if (aging.isEnabled()) {
				System.out.println("Aging Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Aging Field : Field is Disabled as Expected");
				System.out.println("Aging : " + aging.getAttribute("value"));
			}

			WebElement delayReason = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[3]"));
			delayReason.sendKeys("NA");

			WebElement pickupDate = driver
					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[1]"));
			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			pickupDate.sendKeys(date2);

			WebElement logisticsRemarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[4]"));
			logisticsRemarks.sendKeys("NA");

			/* / EXW - Domestic - Grid Fields/ */
			JavascriptExecutor j = (JavascriptExecutor) driver;
			int scrollAmount = 4000;
			WebElement slickGridScroll = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll);
			Thread.sleep(1000);
			j.executeScript("arguments[0].scrollLeft += arguments[1];", slickGridScroll, scrollAmount);
			Thread.sleep(1000);

			WebElement BOEDescription = driver.findElement(
					By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l27 r27']"));
			j.executeScript("arguments[0].click();", BOEDescription);
			WebElement BOEDescription1 = driver.findElement(By.xpath(
					"//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l27 r27 active editable selected']//input"));
			BOEDescription1.sendKeys("Logistics Fields");

			WebElement extendedValue = driver.findElement(
					By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l31 r31 selected']"));
			WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
			j.executeScript("arguments[0].click();", extendedValue);
			WebElement refreshedExtendedValue = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					"//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l31 r31 selected active']")));
			String extendedValueAttribute = refreshedExtendedValue.getText();

			WebElement assessableValue = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[14]"));
			assessableValue.sendKeys(extendedValueAttribute);

			WebElement HSCode = driver.findElement(
					By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l32 r32 selected']"));
			j.executeScript("arguments[0].click();", HSCode);
			WebElement HSCode1 = driver.findElement(By.xpath(
					"//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l32 r32 selected active editable']//input"));
			HSCode1.sendKeys("12345");

			WebElement itemType = driver.findElement(
					By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l33 r33 selected']"));
			j.executeScript("arguments[0].click();", itemType);
			WebElement itemType1 = driver.findElement(By.xpath(
					"//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l33 r33 selected active editable']//select"));
			selectOptionByIndex(itemType1, 3);

			WebElement rateOfDuty = driver.findElement(
					By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l34 r34 selected']"));
			j.executeScript("arguments[0].click();", rateOfDuty);
			WebElement rateOfDuty1 = driver.findElement(By.xpath(
					"//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l34 r34 selected active editable']//select"));
			selectOptionByIndex(rateOfDuty1, 3);

			WebElement TDAmount = driver.findElement(
					By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l36 r36 selected']"));
			j.executeScript("arguments[0].click();", TDAmount);
			WebElement refreshedTDAmount = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					"//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l36 r36 selected active']")));
			String TDAttribute = refreshedTDAmount.getText();

			WebElement totalDutyAmount = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[15]"));
			totalDutyAmount.sendKeys(TDAttribute);
		}
	}

	@When("User enters the logistics fields in logistics tile dropdown - \\(PO Order - RM - Domestic), \\(Incoterm - CIF, Duty Exemption - NO)")
	public void user_enters_the_logistics_fields_in_logistics_tile_dropdown_po_order_rm_domestic_incoterm_cif_duty_exemption_no()
			throws InterruptedException {
		// For Incoterm: "CIF", Duty Exemption: "NO"
		WebElement incoterm = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]"));
		selectOptionByIndex(incoterm, 3);

		/* /For "Domestic"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("1: 2"));

		if (attribute2.equals("1: 2")) {

			WebElement dutyExemption = driver.findElement(By.xpath("(//app-form-select//div//select)[1]"));
			selectOptionByIndex(dutyExemption, 1);

			WebElement trackingNo = driver.findElement(By.xpath("(//app-form-text//div//input)[5]"));
			if (trackingNo.isEnabled()) {
				System.out.println("Tracking No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Tracking No Field : Field is Disabled as Expected");
				System.out.println("Tracking No : " + trackingNo.getAttribute("value"));
			}

			WebElement noOfPackages = driver.findElement(By.xpath("(//app-form-text//div//input)[6]"));
			if (noOfPackages.isEnabled()) {
				System.out.println("No of Packages Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("No of Packages Field : Field is Disabled as Expected");
				System.out.println("No of Packages : " + noOfPackages.getAttribute("value"));
			}

			WebElement logisticsTileDropdown = driver.findElement(By.xpath("(//*[@id='headingTwo']/h5/button)[1]"));
			logisticsTileDropdown.click();
			Thread.sleep(3000);

			WebElement customDuty = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[19]"));
			if (customDuty.isEnabled()) {
				System.out.println("Custom Duty Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Custom Duty Field : Field is Disabled as Expected");
				System.out.println("Custom Duty : " + customDuty.getAttribute("value"));
			}

			WebElement dutyInvoiceNo = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[20]"));
			if (dutyInvoiceNo.isEnabled()) {
				System.out.println("Duty Invoice No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Duty Invoice No Field : Field is Disabled as Expected");
				System.out.println("Duty Invoice No : " + dutyInvoiceNo.getAttribute("value"));
			}

			WebElement dutyInvoiceDate = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[21]"));
			if (dutyInvoiceDate.isEnabled()) {
				System.out.println("Duty Invoice Date Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Duty Invoice Date Field : Field is Disabled as Expected");
				System.out.println("Duty Invoice Date : " + dutyInvoiceDate.getAttribute("value"));
			}

			WebElement aging = driver.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[22]"));
			if (aging.isEnabled()) {
				System.out.println("Aging Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Aging Field : Field is Disabled as Expected");
				System.out.println("Aging : " + aging.getAttribute("value"));
			}

			WebElement delayReason = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[3]"));
			delayReason.sendKeys("NA");

			WebElement pickupDate = driver
					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[1]"));
			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			pickupDate.sendKeys(date2);

			WebElement logisticsRemarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[4]"));
			logisticsRemarks.sendKeys("NA");

			/* / CIF - Domestic - Grid Fields/ */
			JavascriptExecutor j = (JavascriptExecutor) driver;
			int scrollAmount = 4000;
			WebElement slickGridScroll = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll);
			Thread.sleep(1000);
			j.executeScript("arguments[0].scrollLeft += arguments[1];", slickGridScroll, scrollAmount);
			Thread.sleep(1000);

			WebElement BOEDescription = driver.findElement(
					By.xpath(".//div[contains (@class,'slick-cell l27 r27')]"));
			j.executeScript("arguments[0].click();", BOEDescription);
			WebElement BOEDescription1 = driver.findElement(By.xpath(
					".//div[contains (@class,'slick-cell l27 r27')]//input"));
			BOEDescription1.sendKeys("Logistics Fields");

			WebElement extendedValue = driver.findElement(
					By.xpath(".//div[contains (@class,'slick-cell l31 r31')]"));
			WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
			j.executeScript("arguments[0].click();", extendedValue);
			WebElement refreshedExtendedValue = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains (@class,'slick-cell l31 r31')]")));
			String extendedValueAttribute = refreshedExtendedValue.getText();

			WebElement assessableValue = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[17]"));
			assessableValue.sendKeys(extendedValueAttribute);

			WebElement HSCode = driver.findElement(
					By.xpath(".//div[contains (@class,'slick-cell l32 r32')]"));
			j.executeScript("arguments[0].click();", HSCode);
			WebElement HSCode1 = driver.findElement(By.xpath(
					".//div[contains (@class,'slick-cell l32 r32')]//input"));
			HSCode1.sendKeys("12345");

			WebElement itemType = driver.findElement(
					By.xpath(".//div[contains (@class,'slick-cell l33 r33')]"));
			j.executeScript("arguments[0].click();", itemType);
			WebElement itemType1 = driver.findElement(By.xpath(
					".//div[contains (@class,'slick-cell l33 r33')]//select"));
			selectOptionByIndex(itemType1, 3);

			WebElement rateOfDuty = driver.findElement(
					By.xpath(".//div[contains (@class,'slick-cell l34 r34')]"));
			j.executeScript("arguments[0].click();", rateOfDuty);
			WebElement rateOfDuty1 = driver.findElement(By.xpath(
					".//div[contains (@class,'slick-cell l34 r34')]//select"));
			selectOptionByIndex(rateOfDuty1, 3);

			WebElement TDAmount = driver.findElement(
					By.xpath(".//div[contains (@class,'slick-cell l36 r36')]"));
			j.executeScript("arguments[0].click();", TDAmount);
			WebElement refreshedTDAmount = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains (@class,'slick-cell l36 r36')]")));
			String TDAttribute = refreshedTDAmount.getText();

			WebElement totalDutyAmount = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[18]"));
			totalDutyAmount.sendKeys(TDAttribute);
		}
	}

	@When("User enters the logistics fields in logistics tile dropdown - \\(Testing & Services - Domestic), \\(Incoterm - CIF, Duty Exemption - NO)")
	public void user_enters_the_logistics_fields_in_logistics_tile_dropdown_testing_services_domestic_incoterm_cif_duty_exemption_no()
			throws InterruptedException {
		// For Incoterm: "CIF", Duty Exemption: "NO"
		WebElement incoterm = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]"));
		selectOptionByIndex(incoterm, 3);

		/* /For "Domestic"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("1: 2"));

		if (attribute2.equals("1: 2")) {

			WebElement dutyExemption = driver.findElement(By.xpath("(//app-form-select//div//select)[1]"));
			selectOptionByIndex(dutyExemption, 1);

			WebElement trackingNo = driver.findElement(By.xpath("(//app-form-text//div//input)[5]"));
			if (trackingNo.isEnabled()) {
				System.out.println("Tracking No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Tracking No Field : Field is Disabled as Expected");
				System.out.println("Tracking No : " + trackingNo.getAttribute("value"));
			}

			WebElement noOfPackages = driver.findElement(By.xpath("(//app-form-text//div//input)[6]"));
			if (noOfPackages.isEnabled()) {
				System.out.println("No of Packages Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("No of Packages Field : Field is Disabled as Expected");
				System.out.println("No of Packages : " + noOfPackages.getAttribute("value"));
			}

			WebElement logisticsTileDropdown = driver.findElement(By.xpath("(//*[@id='headingTwo']/h5/button)[1]"));
			logisticsTileDropdown.click();
			Thread.sleep(3000);

			WebElement customDuty = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[19]"));
			if (customDuty.isEnabled()) {
				System.out.println("Custom Duty Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Custom Duty Field : Field is Disabled as Expected");
				System.out.println("Custom Duty : " + customDuty.getAttribute("value"));
			}

			WebElement dutyInvoiceNo = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[20]"));
			if (dutyInvoiceNo.isEnabled()) {
				System.out.println("Duty Invoice No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Duty Invoice No Field : Field is Disabled as Expected");
				System.out.println("Duty Invoice No : " + dutyInvoiceNo.getAttribute("value"));
			}

			WebElement dutyInvoiceDate = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[21]"));
			if (dutyInvoiceDate.isEnabled()) {
				System.out.println("Duty Invoice Date Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Duty Invoice Date Field : Field is Disabled as Expected");
				System.out.println("Duty Invoice Date : " + dutyInvoiceDate.getAttribute("value"));
			}

			WebElement aging = driver.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[22]"));
			if (aging.isEnabled()) {
				System.out.println("Aging Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Aging Field : Field is Disabled as Expected");
				System.out.println("Aging : " + aging.getAttribute("value"));
			}

			WebElement delayReason = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[3]"));
			delayReason.sendKeys("NA");

			WebElement pickupDate = driver
					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[1]"));
			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			pickupDate.sendKeys(date2);

			WebElement logisticsRemarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[4]"));
			logisticsRemarks.sendKeys("NA");

			/* / CIF - Domestic - Grid Fields/ */
			JavascriptExecutor j = (JavascriptExecutor) driver;
			int scrollAmount = 4000;
			WebElement slickGridScroll = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll);
			Thread.sleep(1000);
			j.executeScript("arguments[0].scrollLeft += arguments[1];", slickGridScroll, scrollAmount);
			Thread.sleep(1000);

			WebElement BOEDescription = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l25 r25')]"));
			j.executeScript("arguments[0].click();", BOEDescription);
			WebElement BOEDescription1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l25 r25')]//input"));
			BOEDescription1.sendKeys("Logistics Fields");

			WebElement extendedValue = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l29 r29')]"));
			WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
			j.executeScript("arguments[0].click();", extendedValue);
			WebElement refreshedExtendedValue = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains (@class, 'slick-cell l29 r29')]")));
			String extendedValueAttribute = refreshedExtendedValue.getText();

			WebElement assessableValue = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[17]"));
			assessableValue.sendKeys(extendedValueAttribute);

			WebElement HSCode = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l30 r30')]"));
			j.executeScript("arguments[0].click();", HSCode);
			WebElement HSCode1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l30 r30')]//input"));
			HSCode1.sendKeys("12345");

			WebElement itemType = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l31 r31')]"));
			j.executeScript("arguments[0].click();", itemType);
			WebElement itemType1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l31 r31')]//select"));
			selectOptionByIndex(itemType1, 3);

			WebElement rateOfDuty = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l32 r32')]"));
			j.executeScript("arguments[0].click();", rateOfDuty);
			WebElement rateOfDuty1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l32 r32')]//select"));
			selectOptionByIndex(rateOfDuty1, 3);

			WebElement TDAmount = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l34 r34')]"));
			j.executeScript("arguments[0].click();", TDAmount);
			WebElement refreshedTDAmount = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains (@class, 'slick-cell l34 r34')]")));
			String TDAttribute = refreshedTDAmount.getText();

			WebElement totalDutyAmount = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[18]"));
			totalDutyAmount.sendKeys(TDAttribute);
		}
	}

	@When("User enters the logistics fields in logistics tile dropdown - \\(PO Order - FG - Domestic), \\(Incoterm - CIF, Duty Exemption - NO)")
	public void user_enters_the_logistics_fields_in_logistics_tile_dropdown_po_order_fg_domestic_incoterm_cif_duty_exemption_no()
			throws InterruptedException {
		// For Incoterm: "CIF", Duty Exemption: "NO"
		WebElement incoterm = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]"));
		selectOptionByIndex(incoterm, 3);

		/* /For "Domestic"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("1: 2"));

		if (attribute2.equals("1: 2")) {

			WebElement dutyExemption = driver.findElement(By.xpath("(//app-form-select//div//select)[1]"));
			selectOptionByIndex(dutyExemption, 1);

			WebElement trackingNo = driver.findElement(By.xpath("(//app-form-text//div//input)[5]"));
			if (trackingNo.isEnabled()) {
				System.out.println("Tracking No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Tracking No Field : Field is Disabled as Expected");
				System.out.println("Tracking No : " + trackingNo.getAttribute("value"));
			}

			WebElement noOfPackages = driver.findElement(By.xpath("(//app-form-text//div//input)[6]"));
			if (noOfPackages.isEnabled()) {
				System.out.println("No of Packages Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("No of Packages Field : Field is Disabled as Expected");
				System.out.println("No of Packages : " + noOfPackages.getAttribute("value"));
			}

			WebElement logisticsTileDropdown = driver.findElement(By.xpath("(//*[@id='headingTwo']/h5/button)[1]"));
			logisticsTileDropdown.click();
			Thread.sleep(3000);

			WebElement customDuty = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[19]"));
			if (customDuty.isEnabled()) {
				System.out.println("Custom Duty Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Custom Duty Field : Field is Disabled as Expected");
				System.out.println("Custom Duty : " + customDuty.getAttribute("value"));
			}

			WebElement dutyInvoiceNo = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[20]"));
			if (dutyInvoiceNo.isEnabled()) {
				System.out.println("Duty Invoice No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Duty Invoice No Field : Field is Disabled as Expected");
				System.out.println("Duty Invoice No : " + dutyInvoiceNo.getAttribute("value"));
			}

			WebElement dutyInvoiceDate = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[21]"));
			if (dutyInvoiceDate.isEnabled()) {
				System.out.println("Duty Invoice Date Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Duty Invoice Date Field : Field is Disabled as Expected");
				System.out.println("Duty Invoice Date : " + dutyInvoiceDate.getAttribute("value"));
			}

			WebElement aging = driver.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[22]"));
			if (aging.isEnabled()) {
				System.out.println("Aging Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Aging Field : Field is Disabled as Expected");
				System.out.println("Aging : " + aging.getAttribute("value"));
			}

			WebElement delayReason = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[3]"));
			delayReason.sendKeys("NA");

			WebElement pickupDate = driver
					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[1]"));
			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			pickupDate.sendKeys(date2);

			WebElement logisticsRemarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[4]"));
			logisticsRemarks.sendKeys("NA");

			/* / CIF - Domestic - Grid Fields/ */
			JavascriptExecutor j = (JavascriptExecutor) driver;
			int scrollAmount = 4000;
			WebElement slickGridScroll = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll);
			Thread.sleep(1000);
			j.executeScript("arguments[0].scrollLeft += arguments[1];", slickGridScroll, scrollAmount);
			Thread.sleep(1000);

			WebElement BOEDescription = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l27 r27')]"));
			j.executeScript("arguments[0].click();", BOEDescription);
			WebElement BOEDescription1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l27 r27')]//input"));
			BOEDescription1.sendKeys("Logistics Fields");

			WebElement extendedValue = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l31 r31')]"));
			WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
			j.executeScript("arguments[0].click();", extendedValue);
			WebElement refreshedExtendedValue = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains (@class, 'slick-cell l31 r31')]")));
			String extendedValueAttribute = refreshedExtendedValue.getText();

			WebElement assessableValue = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[17]"));
			assessableValue.sendKeys(extendedValueAttribute);

			WebElement HSCode = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l32 r32')]"));
			j.executeScript("arguments[0].click();", HSCode);
			WebElement HSCode1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l32 r32')]//input"));
			HSCode1.sendKeys("12345");

			WebElement itemType = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l33 r33')]"));
			j.executeScript("arguments[0].click();", itemType);
			WebElement itemType1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l33 r33')]//select"));
			selectOptionByIndex(itemType1, 3);

			WebElement rateOfDuty = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l34 r34')]"));
			j.executeScript("arguments[0].click();", rateOfDuty);
			WebElement rateOfDuty1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l34 r34')]//select"));
			selectOptionByIndex(rateOfDuty1, 3);

			WebElement TDAmount = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l36 r36')]"));
			j.executeScript("arguments[0].click();", TDAmount);
			WebElement refreshedTDAmount = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains (@class, 'slick-cell l36 r36')]")));
			String TDAttribute = refreshedTDAmount.getText();

			WebElement totalDutyAmount = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[18]"));
			totalDutyAmount.sendKeys(TDAttribute);
		}
	}

	@When("User enters the logistics fields in logistics tile dropdown - \\(PO Order - NPM - Domestic), \\(Incoterm - CIF, Duty Exemption - NO)")
	public void user_enters_the_logistics_fields_in_logistics_tile_dropdown_po_order_npm_domestic_incoterm_cif_duty_exemption_no()
			throws InterruptedException {
		// For Incoterm: "CIF", Duty Exemption: "NO"
		WebElement incoterm = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]"));
		selectOptionByIndex(incoterm, 3);

		/* /For "Domestic"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("1: 2"));

		if (attribute2.equals("1: 2")) {

			WebElement dutyExemption = driver.findElement(By.xpath("(//app-form-select//div//select)[1]"));
			selectOptionByIndex(dutyExemption, 1);

			WebElement trackingNo = driver.findElement(By.xpath("(//app-form-text//div//input)[5]"));
			if (trackingNo.isEnabled()) {
				System.out.println("Tracking No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Tracking No Field : Field is Disabled as Expected");
				System.out.println("Tracking No : " + trackingNo.getAttribute("value"));
			}

			WebElement noOfPackages = driver.findElement(By.xpath("(//app-form-text//div//input)[6]"));
			if (noOfPackages.isEnabled()) {
				System.out.println("No of Packages Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("No of Packages Field : Field is Disabled as Expected");
				System.out.println("No of Packages : " + noOfPackages.getAttribute("value"));
			}

			WebElement logisticsTileDropdown = driver.findElement(By.xpath("(//*[@id='headingTwo']/h5/button)[1]"));
			logisticsTileDropdown.click();
			Thread.sleep(3000);

			WebElement customDuty = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[19]"));
			if (customDuty.isEnabled()) {
				System.out.println("Custom Duty Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Custom Duty Field : Field is Disabled as Expected");
				System.out.println("Custom Duty : " + customDuty.getAttribute("value"));
			}

			WebElement dutyInvoiceNo = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[20]"));
			if (dutyInvoiceNo.isEnabled()) {
				System.out.println("Duty Invoice No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Duty Invoice No Field : Field is Disabled as Expected");
				System.out.println("Duty Invoice No : " + dutyInvoiceNo.getAttribute("value"));
			}

			WebElement dutyInvoiceDate = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[21]"));
			if (dutyInvoiceDate.isEnabled()) {
				System.out.println("Duty Invoice Date Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Duty Invoice Date Field : Field is Disabled as Expected");
				System.out.println("Duty Invoice Date : " + dutyInvoiceDate.getAttribute("value"));
			}

			WebElement aging = driver.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[22]"));
			if (aging.isEnabled()) {
				System.out.println("Aging Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Aging Field : Field is Disabled as Expected");
				System.out.println("Aging : " + aging.getAttribute("value"));
			}

			WebElement delayReason = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[3]"));
			delayReason.sendKeys("NA");

			WebElement pickupDate = driver
					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[1]"));
			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			pickupDate.sendKeys(date2);

			WebElement logisticsRemarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[4]"));
			logisticsRemarks.sendKeys("NA");

			/* / CIF - Domestic - Grid Fields/ */
			JavascriptExecutor j = (JavascriptExecutor) driver;
			int scrollAmount = 4000;
			WebElement slickGridScroll = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll);
			Thread.sleep(1000);
			j.executeScript("arguments[0].scrollLeft += arguments[1];", slickGridScroll, scrollAmount);
			Thread.sleep(1000);

			WebElement BOEDescription = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l24 r24')]"));
			j.executeScript("arguments[0].click();", BOEDescription);
			WebElement BOEDescription1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l24 r24')]//input"));
			BOEDescription1.sendKeys("Logistics Fields");

			WebElement extendedValue = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l28 r28')]"));
			WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
			j.executeScript("arguments[0].click();", extendedValue);
			WebElement refreshedExtendedValue = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains (@class, 'slick-cell l28 r28')]")));
			String extendedValueAttribute = refreshedExtendedValue.getText();

			WebElement assessableValue = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[17]"));
			assessableValue.sendKeys(extendedValueAttribute);

			WebElement HSCode = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l29 r29')]"));
			j.executeScript("arguments[0].click();", HSCode);
			WebElement HSCode1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l29 r29')]//input"));
			HSCode1.sendKeys("12345");

			WebElement itemType = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l30 r30')]"));
			j.executeScript("arguments[0].click();", itemType);
			WebElement itemType1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l30 r30')]//select"));
			selectOptionByIndex(itemType1, 3);

			WebElement rateOfDuty = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l31 r31')]"));
			j.executeScript("arguments[0].click();", rateOfDuty);
			WebElement rateOfDuty1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l31 r31')]//select"));
			selectOptionByIndex(rateOfDuty1, 3);

			WebElement TDAmount = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l33 r33')]"));
			j.executeScript("arguments[0].click();", TDAmount);
			WebElement refreshedTDAmount = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains (@class, 'slick-cell l33 r33')]")));
			String TDAttribute = refreshedTDAmount.getText();

			WebElement totalDutyAmount = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[18]"));
			totalDutyAmount.sendKeys(TDAttribute);
		}
	}

	@When("User enters the logistics fields in logistics tile dropdown - \\(PO Order - RM - Domestic), \\(Incoterm - FOB, Duty Exemption - YES)")
	public void user_enters_the_logistics_fields_in_logistics_tile_dropdown_po_order_rm_domestic_incoterm_fob_duty_exemption_yes()
			throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;

		// For Incoterm: "FOB", Duty Exemption: "YES"
		WebElement incoterm = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]"));
		selectOptionByIndex(incoterm, 2);

		/* /For "Domestic"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("1: 2"));

		if (attribute2.equals("1: 2")) {

			WebElement dutyExemption = driver.findElement(By.xpath("(//app-form-select//div//select)[1]"));
			selectOptionByIndex(dutyExemption, 0);

			WebElement DTAP_Applicable = driver.findElement(By.xpath("(//app-form-select//div//select)[2]"));
			selectOptionByIndex(DTAP_Applicable, 0);

			WebElement trackingNo = driver.findElement(By.xpath("(//app-form-text//div//input)[5]"));
			if (trackingNo.isEnabled()) {
				System.out.println("Tracking No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Tracking No Field : Field is Disabled as Expected");
				System.out.println("Tracking No : " + trackingNo.getAttribute("value"));
			}

			WebElement noOfPackages = driver.findElement(By.xpath("(//app-form-text//div//input)[6]"));
			if (noOfPackages.isEnabled()) {
				System.out.println("No of Packages Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("No of Packages Field : Field is Disabled as Expected");
				System.out.println("No of Packages : " + noOfPackages.getAttribute("value"));
			}

			WebElement logisticsTileDropdown = driver.findElement(By.xpath("(//*[@id='headingTwo']/h5/button)[1]"));
			logisticsTileDropdown.click();
			Thread.sleep(3000);

			WebElement customDuty = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[16]"));
			if (customDuty.isEnabled()) {
				System.out.println("Custom Duty Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Custom Duty Field : Field is Disabled as Expected");
				System.out.println("Custom Duty : " + customDuty.getAttribute("value"));
			}

			WebElement dutyInvoiceNo = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[17]"));
			if (dutyInvoiceNo.isEnabled()) {
				System.out.println("Duty Invoice No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Duty Invoice No Field : Field is Disabled as Expected");
				System.out.println("Duty Invoice No : " + dutyInvoiceNo.getAttribute("value"));
			}

			WebElement dutyInvoiceDate = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[18]"));
			if (dutyInvoiceDate.isEnabled()) {
				System.out.println("Duty Invoice Date Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Duty Invoice Date Field : Field is Disabled as Expected");
				System.out.println("Duty Invoice Date : " + dutyInvoiceDate.getAttribute("value"));
			}

			WebElement aging = driver.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[19]"));
			if (aging.isEnabled()) {
				System.out.println("Aging Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Aging Field : Field is Disabled as Expected");
				System.out.println("Aging : " + aging.getAttribute("value"));
			}

			WebElement delayReason = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[3]"));
			delayReason.sendKeys("NA");

			WebElement pickupDate = driver
					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[1]"));
			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			pickupDate.sendKeys(date2);

			WebElement logisticsRemarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[4]"));
			logisticsRemarks.sendKeys("NA");

			WebElement CHACheckbox = driver.findElement(By.xpath("(//input[@type='checkbox'])"));
			if (CHACheckbox.isEnabled()) {
				j.executeScript("arguments[0].click();", CHACheckbox);
			} else {
				System.out.println("Check Box Button Is Disabled As Not Expected");
			}

			/* / FOB - Domestic - Grid Fields/ */
			int scrollAmount = 4000;
			WebElement slickGridScroll = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll);
			Thread.sleep(1000);
			j.executeScript("arguments[0].scrollLeft += arguments[1];", slickGridScroll, scrollAmount);
			Thread.sleep(1000);

			WebElement BOEDescription = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l30 r30')]"));
			j.executeScript("arguments[0].click();", BOEDescription);
			WebElement BOEDescription1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l30 r30')]//input"));
			BOEDescription1.sendKeys("Logistics Fields");

			WebElement extendedValue = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l34 r34')]"));
			WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
			j.executeScript("arguments[0].click();", extendedValue);
			WebElement refreshedExtendedValue = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains (@class, 'slick-cell l34 r34')]")));
			String extendedValueAttribute = refreshedExtendedValue.getText();

			WebElement assessableValue = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[14]"));
			assessableValue.sendKeys(extendedValueAttribute);

			WebElement HSCode = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l35 r35')]"));
			j.executeScript("arguments[0].click();", HSCode);
			WebElement HSCode1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l35 r35')]//input"));
			HSCode1.sendKeys("12345");

			WebElement itemType = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l36 r36')]"));
			j.executeScript("arguments[0].click();", itemType);
			WebElement itemType1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l36 r36')]//select"));
			selectOptionByIndex(itemType1, 3);

			WebElement rateOfDuty = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l37 r37')]"));
			j.executeScript("arguments[0].click();", rateOfDuty);
			WebElement rateOfDuty1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l37 r37')]//select"));
			selectOptionByIndex(rateOfDuty1, 3);

			WebElement TDAmount = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l39 r39')]"));
			j.executeScript("arguments[0].click();", TDAmount);
			WebElement refreshedTDAmount = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains (@class, 'slick-cell l39 r39')]")));
			String TDAttribute = refreshedTDAmount.getText();

			WebElement totalDutyAmount = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[15]"));
			totalDutyAmount.sendKeys(TDAttribute);
		}
	}

	@When("User enters the logistics fields in logistics tile dropdown - \\(Testing & Services - Domestic), \\(Incoterm - FOB, Duty Exemption - YES)")
	public void user_enters_the_logistics_fields_in_logistics_tile_dropdown_testing_services_domestic_incoterm_fob_duty_exemption_yes()
			throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;

		// For Incoterm: "FOB", Duty Exemption: "YES"
		WebElement incoterm = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]"));
		selectOptionByIndex(incoterm, 2);

		/* /For "Domestic"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("1: 2"));

		if (attribute2.equals("1: 2")) {

			WebElement dutyExemption = driver.findElement(By.xpath("(//app-form-select//div//select)[1]"));
			selectOptionByIndex(dutyExemption, 0);

			WebElement DTAP_Applicable = driver.findElement(By.xpath("(//app-form-select//div//select)[2]"));
			selectOptionByIndex(DTAP_Applicable, 0);

			WebElement trackingNo = driver.findElement(By.xpath("(//app-form-text//div//input)[5]"));
			if (trackingNo.isEnabled()) {
				System.out.println("Tracking No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Tracking No Field : Field is Disabled as Expected");
				System.out.println("Tracking No : " + trackingNo.getAttribute("value"));
			}

			WebElement noOfPackages = driver.findElement(By.xpath("(//app-form-text//div//input)[6]"));
			if (noOfPackages.isEnabled()) {
				System.out.println("No of Packages Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("No of Packages Field : Field is Disabled as Expected");
				System.out.println("No of Packages : " + noOfPackages.getAttribute("value"));
			}

			WebElement logisticsTileDropdown = driver.findElement(By.xpath("(//*[@id='headingTwo']/h5/button)[1]"));
			logisticsTileDropdown.click();
			Thread.sleep(3000);

			WebElement customDuty = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[16]"));
			if (customDuty.isEnabled()) {
				System.out.println("Custom Duty Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Custom Duty Field : Field is Disabled as Expected");
				System.out.println("Custom Duty : " + customDuty.getAttribute("value"));
			}

			WebElement dutyInvoiceNo = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[17]"));
			if (dutyInvoiceNo.isEnabled()) {
				System.out.println("Duty Invoice No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Duty Invoice No Field : Field is Disabled as Expected");
				System.out.println("Duty Invoice No : " + dutyInvoiceNo.getAttribute("value"));
			}

			WebElement dutyInvoiceDate = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[18]"));
			if (dutyInvoiceDate.isEnabled()) {
				System.out.println("Duty Invoice Date Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Duty Invoice Date Field : Field is Disabled as Expected");
				System.out.println("Duty Invoice Date : " + dutyInvoiceDate.getAttribute("value"));
			}

			WebElement aging = driver.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[19]"));
			if (aging.isEnabled()) {
				System.out.println("Aging Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Aging Field : Field is Disabled as Expected");
				System.out.println("Aging : " + aging.getAttribute("value"));
			}

			WebElement delayReason = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[3]"));
			delayReason.sendKeys("NA");

			WebElement pickupDate = driver
					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[1]"));
			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			pickupDate.sendKeys(date2);

			WebElement logisticsRemarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[4]"));
			logisticsRemarks.sendKeys("NA");

			WebElement CHACheckbox = driver.findElement(By.xpath("(//input[@type='checkbox'])"));
			j.executeScript("arguments[0].click();", CHACheckbox);

			/* / FOB - Domestic - Grid Fields/ */
			int scrollAmount = 4000;
			WebElement slickGridScroll = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll);
			Thread.sleep(1000);
			j.executeScript("arguments[0].scrollLeft += arguments[1];", slickGridScroll, scrollAmount);
			Thread.sleep(1000);

			WebElement BOEDescription = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l28 r28')]"));
			j.executeScript("arguments[0].click();", BOEDescription);
			WebElement BOEDescription1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l28 r28')]//input"));
			BOEDescription1.sendKeys("Logistics Fields");

			WebElement extendedValue = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l32 r32')]"));
			WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
			j.executeScript("arguments[0].click();", extendedValue);
			WebElement refreshedExtendedValue = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains (@class, 'slick-cell l32 r32')]")));
			String extendedValueAttribute = refreshedExtendedValue.getText();

			WebElement assessableValue = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[14]"));
			assessableValue.sendKeys(extendedValueAttribute);

			WebElement HSCode = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l33 r33')]"));
			j.executeScript("arguments[0].click();", HSCode);
			WebElement HSCode1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l33 r33')]//input"));
			HSCode1.sendKeys("12345");

			WebElement itemType = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l34 r34')]"));
			j.executeScript("arguments[0].click();", itemType);
			WebElement itemType1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l34 r34')]//select"));
			selectOptionByIndex(itemType1, 3);

			WebElement rateOfDuty = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l35 r35')]"));
			j.executeScript("arguments[0].click();", rateOfDuty);
			WebElement rateOfDuty1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l35 r35')]//select"));
			selectOptionByIndex(rateOfDuty1, 3);

			WebElement TDAmount = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l37 r37')]"));
			j.executeScript("arguments[0].click();", TDAmount);
			WebElement refreshedTDAmount = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains (@class, 'slick-cell l37 r37')]")));
			String TDAttribute = refreshedTDAmount.getText();

			WebElement totalDutyAmount = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[15]"));
			totalDutyAmount.sendKeys(TDAttribute);
		}
	}

	@When("User enters the logistics fields in logistics tile dropdown - \\(PO Order - NPM - Domestic), \\(Incoterm - FOB, Duty Exemption - YES)")
	public void user_enters_the_logistics_fields_in_logistics_tile_dropdown_po_order_npm_domestic_incoterm_fob_duty_exemption_yes()
			throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;

		// For Incoterm: "FOB", Duty Exemption: "YES"
		WebElement incoterm = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]"));
		selectOptionByIndex(incoterm, 2);

		/* /For "Domestic"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("1: 2"));

		if (attribute2.equals("1: 2")) {

			WebElement dutyExemption = driver.findElement(By.xpath("(//app-form-select//div//select)[1]"));
			selectOptionByIndex(dutyExemption, 0);

			WebElement DTAP_Applicable = driver.findElement(By.xpath("(//app-form-select//div//select)[2]"));
			selectOptionByIndex(DTAP_Applicable, 0);

			WebElement trackingNo = driver.findElement(By.xpath("(//app-form-text//div//input)[5]"));
			if (trackingNo.isEnabled()) {
				System.out.println("Tracking No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Tracking No Field : Field is Disabled as Expected");
				System.out.println("Tracking No : " + trackingNo.getAttribute("value"));
			}

			WebElement noOfPackages = driver.findElement(By.xpath("(//app-form-text//div//input)[6]"));
			if (noOfPackages.isEnabled()) {
				System.out.println("No of Packages Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("No of Packages Field : Field is Disabled as Expected");
				System.out.println("No of Packages : " + noOfPackages.getAttribute("value"));
			}

			WebElement logisticsTileDropdown = driver.findElement(By.xpath("(//*[@id='headingTwo']/h5/button)[1]"));
			logisticsTileDropdown.click();
			Thread.sleep(3000);

			WebElement customDuty = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[16]"));
			if (customDuty.isEnabled()) {
				System.out.println("Custom Duty Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Custom Duty Field : Field is Disabled as Expected");
				System.out.println("Custom Duty : " + customDuty.getAttribute("value"));
			}

			WebElement dutyInvoiceNo = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[17]"));
			if (dutyInvoiceNo.isEnabled()) {
				System.out.println("Duty Invoice No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Duty Invoice No Field : Field is Disabled as Expected");
				System.out.println("Duty Invoice No : " + dutyInvoiceNo.getAttribute("value"));
			}

			WebElement dutyInvoiceDate = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[18]"));
			if (dutyInvoiceDate.isEnabled()) {
				System.out.println("Duty Invoice Date Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Duty Invoice Date Field : Field is Disabled as Expected");
				System.out.println("Duty Invoice Date : " + dutyInvoiceDate.getAttribute("value"));
			}

			WebElement aging = driver.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[19]"));
			if (aging.isEnabled()) {
				System.out.println("Aging Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Aging Field : Field is Disabled as Expected");
				System.out.println("Aging : " + aging.getAttribute("value"));
			}

			WebElement delayReason = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[3]"));
			delayReason.sendKeys("NA");

			WebElement pickupDate = driver
					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[1]"));
			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			pickupDate.sendKeys(date2);

			WebElement logisticsRemarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[4]"));
			logisticsRemarks.sendKeys("NA");

			WebElement CHACheckbox = driver.findElement(By.xpath("(//input[@type='checkbox'])"));
			j.executeScript("arguments[0].click();", CHACheckbox);

			/* / FOB - Domestic - Grid Fields/ */
			int scrollAmount = 4000;
			WebElement slickGridScroll = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll);
			Thread.sleep(1000);
			j.executeScript("arguments[0].scrollLeft += arguments[1];", slickGridScroll, scrollAmount);
			Thread.sleep(1000);

			WebElement BOEDescription = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l27 r27')]"));
			j.executeScript("arguments[0].click();", BOEDescription);
			WebElement BOEDescription1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l27 r27')]//input"));
			BOEDescription1.sendKeys("Logistics Fields");

			WebElement extendedValue = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l31 r31')]"));
			WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
			j.executeScript("arguments[0].click();", extendedValue);
			WebElement refreshedExtendedValue = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains (@class, 'slick-cell l31 r31')]")));
			String extendedValueAttribute = refreshedExtendedValue.getText();

			WebElement assessableValue = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[14]"));
			assessableValue.sendKeys(extendedValueAttribute);

			WebElement HSCode = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l32 r32')]"));
			j.executeScript("arguments[0].click();", HSCode);
			WebElement HSCode1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l32 r32')]//input"));
			HSCode1.sendKeys("12345");

			WebElement itemType = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l33 r33')]"));
			j.executeScript("arguments[0].click();", itemType);
			WebElement itemType1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l33 r33')]//select"));
			selectOptionByIndex(itemType1, 3);

			WebElement rateOfDuty = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l34 r34')]"));
			j.executeScript("arguments[0].click();", rateOfDuty);
			WebElement rateOfDuty1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l34 r34')]//select"));
			selectOptionByIndex(rateOfDuty1, 3);

			WebElement TDAmount = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l36 r36')]"));
			j.executeScript("arguments[0].click();", TDAmount);
			WebElement refreshedTDAmount = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains (@class, 'slick-cell l36 r36')]")));
			String TDAttribute = refreshedTDAmount.getText();

			WebElement totalDutyAmount = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[15]"));
			totalDutyAmount.sendKeys(TDAttribute);
		}
	}

	@When("User enters the logistics fields in logistics tile dropdown - \\(PO Order - RM - Domestic), \\(Incoterm - DDU, Duty Exemption - YES)")
	public void user_enters_the_logistics_fields_in_logistics_tile_dropdown_po_order_rm_domestic_incoterm_ddu_duty_exemption_yes()
			throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;

		// For Incoterm: "DDU", Duty Exemption: "YES"
		WebElement incoterm = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]"));
		selectOptionByIndex(incoterm, 6);

		/* /For "Domestic"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("1: 2"));

		if (attribute2.equals("1: 2")) {

			WebElement dutyExemption = driver.findElement(By.xpath("(//app-form-select//div//select)[1]"));
			selectOptionByIndex(dutyExemption, 0);

			WebElement DTAP_Applicable = driver.findElement(By.xpath("(//app-form-select//div//select)[2]"));
			selectOptionByIndex(DTAP_Applicable, 0);

			WebElement trackingNo = driver.findElement(By.xpath("(//app-form-text//div//input)[5]"));
			if (trackingNo.isEnabled()) {
				System.out.println("Tracking No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Tracking No Field : Field is Disabled as Expected");
				System.out.println("Tracking No : " + trackingNo.getAttribute("value"));
			}

			WebElement noOfPackages = driver.findElement(By.xpath("(//app-form-text//div//input)[6]"));
			if (noOfPackages.isEnabled()) {
				System.out.println("No of Packages Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("No of Packages Field : Field is Disabled as Expected");
				System.out.println("No of Packages : " + noOfPackages.getAttribute("value"));
			}

			WebElement logisticsTileDropdown = driver.findElement(By.xpath("(//*[@id='headingTwo']/h5/button)[1]"));
			logisticsTileDropdown.click();
			Thread.sleep(3000);

			WebElement customDuty = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[19]"));
			if (customDuty.isEnabled()) {
				System.out.println("Custom Duty Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Custom Duty Field : Field is Disabled as Expected");
				System.out.println("Custom Duty : " + customDuty.getAttribute("value"));
			}

			WebElement dutyInvoiceNo = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[20]"));
			if (dutyInvoiceNo.isEnabled()) {
				System.out.println("Duty Invoice No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Duty Invoice No Field : Field is Disabled as Expected");
				System.out.println("Duty Invoice No : " + dutyInvoiceNo.getAttribute("value"));
			}

			WebElement dutyInvoiceDate = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[21]"));
			if (dutyInvoiceDate.isEnabled()) {
				System.out.println("Duty Invoice Date Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Duty Invoice Date Field : Field is Disabled as Expected");
				System.out.println("Duty Invoice Date : " + dutyInvoiceDate.getAttribute("value"));
			}

			WebElement aging = driver.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[22]"));
			if (aging.isEnabled()) {
				System.out.println("Aging Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Aging Field : Field is Disabled as Expected");
				System.out.println("Aging : " + aging.getAttribute("value"));
			}

			WebElement delayReason = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[3]"));
			delayReason.sendKeys("NA");

			WebElement pickupDate = driver
					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[1]"));
			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			pickupDate.sendKeys(date2);

			WebElement logisticsRemarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[4]"));
			logisticsRemarks.sendKeys("NA");

			WebElement CHACheckbox = driver.findElement(By.xpath("(//input[@type='checkbox'])"));
			j.executeScript("arguments[0].click();", CHACheckbox);

			/* / DDU - Domestic - Grid Fields/ */
			int scrollAmount = 4000;
			WebElement slickGridScroll = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll);
			Thread.sleep(1000);
			j.executeScript("arguments[0].scrollLeft += arguments[1];", slickGridScroll, scrollAmount);
			Thread.sleep(1000);

			WebElement BOEDescription = driver.findElement(
					By.xpath(".//div[contains (@class,'slick-cell l27 r27')]"));
			j.executeScript("arguments[0].click();", BOEDescription);
			WebElement BOEDescription1 = driver.findElement(By.xpath(
					".//div[contains (@class,'slick-cell l27 r27')]//input"));
			BOEDescription1.sendKeys("Logistics Fields");

			WebElement extendedValue = driver.findElement(
					By.xpath(".//div[contains (@class,'slick-cell l31 r31')]"));
			WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
			j.executeScript("arguments[0].click();", extendedValue);
			WebElement refreshedExtendedValue = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains (@class,'slick-cell l31 r31')]")));
			String extendedValueAttribute = refreshedExtendedValue.getText();

			WebElement assessableValue = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[17]"));
			assessableValue.sendKeys(extendedValueAttribute);

			WebElement HSCode = driver.findElement(
					By.xpath(".//div[contains (@class,'slick-cell l32 r32')]"));
			j.executeScript("arguments[0].click();", HSCode);
			WebElement HSCode1 = driver.findElement(By.xpath(
					".//div[contains (@class,'slick-cell l32 r32')]//input"));
			HSCode1.sendKeys("12345");

			WebElement itemType = driver.findElement(
					By.xpath(".//div[contains (@class,'slick-cell l33 r33')]"));
			j.executeScript("arguments[0].click();", itemType);
			WebElement itemType1 = driver.findElement(By.xpath(
					".//div[contains (@class,'slick-cell l33 r33')]//select"));
			selectOptionByIndex(itemType1, 3);

			WebElement rateOfDuty = driver.findElement(
					By.xpath(".//div[contains (@class,'slick-cell l34 r34')]"));
			j.executeScript("arguments[0].click();", rateOfDuty);
			WebElement rateOfDuty1 = driver.findElement(By.xpath(
					".//div[contains (@class,'slick-cell l34 r34')]//select"));
			selectOptionByIndex(rateOfDuty1, 3);

			WebElement TDAmount = driver.findElement(
					By.xpath(".//div[contains (@class,'slick-cell l36 r36')]"));
			j.executeScript("arguments[0].click();", TDAmount);
			WebElement refreshedTDAmount = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains (@class,'slick-cell l36 r36')]")));
			String TDAttribute = refreshedTDAmount.getText();

			WebElement totalDutyAmount = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[18]"));
			totalDutyAmount.sendKeys(TDAttribute);
		}
	}

	@When("User enters the logistics fields in logistics tile dropdown - \\(Testing & Services - Domestic), \\(Incoterm - DDU, Duty Exemption - YES)")
	public void user_enters_the_logistics_fields_in_logistics_tile_dropdown_testing_services_domestic_incoterm_ddu_duty_exemption_yes()
			throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;

		// For Incoterm: "DDU", Duty Exemption: "YES"
		WebElement incoterm = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]"));
		selectOptionByIndex(incoterm, 6);

		/* /For "Domestic"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("1: 2"));

		if (attribute2.equals("1: 2")) {

			WebElement dutyExemption = driver.findElement(By.xpath("(//app-form-select//div//select)[1]"));
			selectOptionByIndex(dutyExemption, 0);

			WebElement DTAP_Applicable = driver.findElement(By.xpath("(//app-form-select//div//select)[2]"));
			selectOptionByIndex(DTAP_Applicable, 0);

			WebElement trackingNo = driver.findElement(By.xpath("(//app-form-text//div//input)[5]"));
			if (trackingNo.isEnabled()) {
				System.out.println("Tracking No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Tracking No Field : Field is Disabled as Expected");
				System.out.println("Tracking No : " + trackingNo.getAttribute("value"));
			}

			WebElement noOfPackages = driver.findElement(By.xpath("(//app-form-text//div//input)[6]"));
			if (noOfPackages.isEnabled()) {
				System.out.println("No of Packages Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("No of Packages Field : Field is Disabled as Expected");
				System.out.println("No of Packages : " + noOfPackages.getAttribute("value"));
			}

			WebElement logisticsTileDropdown = driver.findElement(By.xpath("(//*[@id='headingTwo']/h5/button)[1]"));
			logisticsTileDropdown.click();
			Thread.sleep(3000);

			WebElement customDuty = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[19]"));
			if (customDuty.isEnabled()) {
				System.out.println("Custom Duty Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Custom Duty Field : Field is Disabled as Expected");
				System.out.println("Custom Duty : " + customDuty.getAttribute("value"));
			}

			WebElement dutyInvoiceNo = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[20]"));
			if (dutyInvoiceNo.isEnabled()) {
				System.out.println("Duty Invoice No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Duty Invoice No Field : Field is Disabled as Expected");
				System.out.println("Duty Invoice No : " + dutyInvoiceNo.getAttribute("value"));
			}

			WebElement dutyInvoiceDate = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[21]"));
			if (dutyInvoiceDate.isEnabled()) {
				System.out.println("Duty Invoice Date Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Duty Invoice Date Field : Field is Disabled as Expected");
				System.out.println("Duty Invoice Date : " + dutyInvoiceDate.getAttribute("value"));
			}

			WebElement aging = driver.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[22]"));
			if (aging.isEnabled()) {
				System.out.println("Aging Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Aging Field : Field is Disabled as Expected");
				System.out.println("Aging : " + aging.getAttribute("value"));
			}

			WebElement delayReason = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[3]"));
			delayReason.sendKeys("NA");

			WebElement pickupDate = driver
					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[1]"));
			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			pickupDate.sendKeys(date2);

			WebElement logisticsRemarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[4]"));
			logisticsRemarks.sendKeys("NA");

			WebElement CHACheckbox = driver.findElement(By.xpath("(//input[@type='checkbox'])"));
			j.executeScript("arguments[0].click();", CHACheckbox);

			/* / DDU - Domestic - Grid Fields/ */
			int scrollAmount = 4000;
			WebElement slickGridScroll = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll);
			Thread.sleep(1000);
			j.executeScript("arguments[0].scrollLeft += arguments[1];", slickGridScroll, scrollAmount);
			Thread.sleep(1000);

			WebElement BOEDescription = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l25 r25')]"));
			j.executeScript("arguments[0].click();", BOEDescription);
			WebElement BOEDescription1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l25 r25')]//input"));
			BOEDescription1.sendKeys("Logistics Fields");

			WebElement extendedValue = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l29 r29')]"));
			WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
			j.executeScript("arguments[0].click();", extendedValue);
			WebElement refreshedExtendedValue = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains (@class, 'slick-cell l29 r29')]")));
			String extendedValueAttribute = refreshedExtendedValue.getText();

			WebElement assessableValue = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[17]"));
			assessableValue.sendKeys(extendedValueAttribute);

			WebElement HSCode = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l30 r30')]"));
			j.executeScript("arguments[0].click();", HSCode);
			WebElement HSCode1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l30 r30')]//input"));
			HSCode1.sendKeys("12345");

			WebElement itemType = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l31 r31')]"));
			j.executeScript("arguments[0].click();", itemType);
			WebElement itemType1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l31 r31')]//select"));
			selectOptionByIndex(itemType1, 3);

			WebElement rateOfDuty = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l32 r32')]"));
			j.executeScript("arguments[0].click();", rateOfDuty);
			WebElement rateOfDuty1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l32 r32')]//select"));
			selectOptionByIndex(rateOfDuty1, 3);

			WebElement TDAmount = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l34 r34')]"));
			j.executeScript("arguments[0].click();", TDAmount);
			WebElement refreshedTDAmount = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains (@class, 'slick-cell l34 r34')]")));
			String TDAttribute = refreshedTDAmount.getText();

			WebElement totalDutyAmount = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[18]"));
			totalDutyAmount.sendKeys(TDAttribute);
		}
	}

	@When("User enters the logistics fields in logistics tile dropdown - \\(PO Order - NPM - Domestic), \\(Incoterm - DDU, Duty Exemption - YES)")
	public void user_enters_the_logistics_fields_in_logistics_tile_dropdown_po_order_npm_domestic_incoterm_ddu_duty_exemption_yes()
			throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;

		// For Incoterm: "DDU", Duty Exemption: "YES"
		WebElement incoterm = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]"));
		selectOptionByIndex(incoterm, 6);

		/* /For "Domestic"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("1: 2"));

		if (attribute2.equals("1: 2")) {

			WebElement dutyExemption = driver.findElement(By.xpath("(//app-form-select//div//select)[1]"));
			selectOptionByIndex(dutyExemption, 0);

			WebElement DTAP_Applicable = driver.findElement(By.xpath("(//app-form-select//div//select)[2]"));
			selectOptionByIndex(DTAP_Applicable, 0);

			WebElement trackingNo = driver.findElement(By.xpath("(//app-form-text//div//input)[5]"));
			if (trackingNo.isEnabled()) {
				System.out.println("Tracking No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Tracking No Field : Field is Disabled as Expected");
				System.out.println("Tracking No : " + trackingNo.getAttribute("value"));
			}

			WebElement noOfPackages = driver.findElement(By.xpath("(//app-form-text//div//input)[6]"));
			if (noOfPackages.isEnabled()) {
				System.out.println("No of Packages Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("No of Packages Field : Field is Disabled as Expected");
				System.out.println("No of Packages : " + noOfPackages.getAttribute("value"));
			}

			WebElement logisticsTileDropdown = driver.findElement(By.xpath("(//*[@id='headingTwo']/h5/button)[1]"));
			logisticsTileDropdown.click();
			Thread.sleep(3000);

			WebElement customDuty = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[19]"));
			if (customDuty.isEnabled()) {
				System.out.println("Custom Duty Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Custom Duty Field : Field is Disabled as Expected");
				System.out.println("Custom Duty : " + customDuty.getAttribute("value"));
			}

			WebElement dutyInvoiceNo = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[20]"));
			if (dutyInvoiceNo.isEnabled()) {
				System.out.println("Duty Invoice No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Duty Invoice No Field : Field is Disabled as Expected");
				System.out.println("Duty Invoice No : " + dutyInvoiceNo.getAttribute("value"));
			}

			WebElement dutyInvoiceDate = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[21]"));
			if (dutyInvoiceDate.isEnabled()) {
				System.out.println("Duty Invoice Date Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Duty Invoice Date Field : Field is Disabled as Expected");
				System.out.println("Duty Invoice Date : " + dutyInvoiceDate.getAttribute("value"));
			}

			WebElement aging = driver.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[22]"));
			if (aging.isEnabled()) {
				System.out.println("Aging Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Aging Field : Field is Disabled as Expected");
				System.out.println("Aging : " + aging.getAttribute("value"));
			}

			WebElement delayReason = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[3]"));
			delayReason.sendKeys("NA");

			WebElement pickupDate = driver
					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[1]"));
			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			pickupDate.sendKeys(date2);

			WebElement logisticsRemarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[4]"));
			logisticsRemarks.sendKeys("NA");

			WebElement CHACheckbox = driver.findElement(By.xpath("(//input[@type='checkbox'])"));
			j.executeScript("arguments[0].click();", CHACheckbox);

			/* / FOB - Domestic - Grid Fields/ */
			int scrollAmount = 4000;
			WebElement slickGridScroll = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll);
			Thread.sleep(1000);
			j.executeScript("arguments[0].scrollLeft += arguments[1];", slickGridScroll, scrollAmount);
			Thread.sleep(1000);

			WebElement BOEDescription = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l24 r24')]"));
			j.executeScript("arguments[0].click();", BOEDescription);
			WebElement BOEDescription1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l24 r24')]//input"));
			BOEDescription1.sendKeys("Logistics Fields");

			WebElement extendedValue = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l28 r28')]"));
			WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
			j.executeScript("arguments[0].click();", extendedValue);
			WebElement refreshedExtendedValue = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains (@class, 'slick-cell l28 r28')]")));
			String extendedValueAttribute = refreshedExtendedValue.getText();

			WebElement assessableValue = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[17]"));
			assessableValue.sendKeys(extendedValueAttribute);

			WebElement HSCode = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l29 r29')]"));
			j.executeScript("arguments[0].click();", HSCode);
			WebElement HSCode1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l29 r29')]//input"));
			HSCode1.sendKeys("12345");

			WebElement itemType = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l30 r30')]"));
			j.executeScript("arguments[0].click();", itemType);
			WebElement itemType1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l30 r30')]//select"));
			selectOptionByIndex(itemType1, 3);

			WebElement rateOfDuty = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l31 r31')]"));
			j.executeScript("arguments[0].click();", rateOfDuty);
			WebElement rateOfDuty1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l31 r31')]//select"));
			selectOptionByIndex(rateOfDuty1, 3);

			WebElement TDAmount = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l33 r33')]"));
			j.executeScript("arguments[0].click();", TDAmount);
			WebElement refreshedTDAmount = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains (@class, 'slick-cell l33 r33')]")));
			String TDAttribute = refreshedTDAmount.getText();

			WebElement totalDutyAmount = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[18]"));
			totalDutyAmount.sendKeys(TDAttribute);
		}
	}

	@When("User select the Yet to DTAP status from the filter - \\(PO Order - RM - Domestic)")
	public void user_select_the_yet_to_dtap_status_from_the_filter_po_order_rm_domestic() throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement staleElementDummyClick = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		j.executeScript("arguments[0].click();", staleElementDummyClick);
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait1.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException | NoSuchElementException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 1);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 1);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 2);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(2000);
	}

	@When("User select the Yet to DTAP status from the filter - \\(Testing & Services - Domestic)")
	public void user_select_the_yet_to_dtap_status_from_the_filter_testing_services_domestic()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement staleElementDummyClick = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		j.executeScript("arguments[0].click();", staleElementDummyClick);
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait1.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException | NoSuchElementException e) {
		}

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 3);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 2);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(2000);
	}

	@When("User select the Yet to DTAP status from the filter - \\(WEB Order - RM - Domestic)")
	public void user_select_the_yet_to_dtap_status_from_the_filter_web_order_rm_domestic() throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement staleElementDummyClick = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		j.executeScript("arguments[0].click();", staleElementDummyClick);
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait1.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException | NoSuchElementException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 1);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 2);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 2);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(2000);
	}

	@When("User select the Yet to DTAP status from the filter - \\(PO Order - FG - Domestic)")
	public void user_select_the_yet_to_dtap_status_from_the_filter_po_order_fg_domestic() throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement staleElementDummyClick = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		j.executeScript("arguments[0].click();", staleElementDummyClick);
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait1.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException | NoSuchElementException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 2);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 1);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 2);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(2000);
	}

	@When("User select the Yet to DTAP status from the filter - \\(WEB Order - FG - Domestic)")
	public void user_select_the_yet_to_dtap_status_from_the_filter_web_order_fg_domestic() throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement staleElementDummyClick = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		j.executeScript("arguments[0].click();", staleElementDummyClick);
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait1.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException | NoSuchElementException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 2);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 2);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 2);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(2000);
	}

	@When("User select the Yet to DTAP status from the filter - \\(PO Order - NPM - Domestic)")
	public void user_select_the_yet_to_dtap_status_from_the_filter_po_order_npm_domestic() throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement staleElementDummyClick = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		j.executeScript("arguments[0].click();", staleElementDummyClick);
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait1.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException | NoSuchElementException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 3);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 1);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 2);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(2000);
	}

	@When("User select the Yet to DTAP status from the filter - \\(WEB Order - NPM - Domestic)")
	public void user_select_the_yet_to_dtap_status_from_the_filter_web_order_npm_domestic()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement staleElementDummyClick = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		j.executeScript("arguments[0].click();", staleElementDummyClick);
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait1.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException | NoSuchElementException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 3);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 2);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 2);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(2000);
	}

	@When("User select the Yet to Freight status from the filter - \\(PO Order - RM - Domestic)")
	public void user_select_the_yet_to_freight_status_from_the_filter_po_order_rm_domestic()
			throws InterruptedException {

		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(20));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(20));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement staleElementDummyClick = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		j.executeScript("arguments[0].click();", staleElementDummyClick);
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait1.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException | NoSuchElementException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 1);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 1);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 3);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(2000);
	}

	@When("User select the Yet to Freight status from the filter - \\(Testing & Services - Domestic)")
	public void user_select_the_yet_to_freight_status_from_the_filter_testing_services_domestic()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(20));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(20));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement staleElementDummyClick = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		j.executeScript("arguments[0].click();", staleElementDummyClick);
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait1.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException | NoSuchElementException e) {
		}

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 3);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 3);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(2000);
	}

	@When("User select the Yet to Freight status from the filter - \\(CSM - Domestic)")
	public void user_select_the_yet_to_freight_status_from_the_filter_csm_domestic() throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(20));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(20));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement staleElementDummyClick = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		j.executeScript("arguments[0].click();", staleElementDummyClick);
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait1.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException | NoSuchElementException e) {
		}

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 4);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 3);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(2000);
	}

	@When("User select the Yet to Freight status from the filter - \\(WEB Order - RM - Domestic)")
	public void user_select_the_yet_to_freight_status_from_the_filter_web_order_rm_domestic()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(20));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(20));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement staleElementDummyClick = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		j.executeScript("arguments[0].click();", staleElementDummyClick);
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait1.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException | NoSuchElementException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 1);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 2);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 3);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(2000);
	}

	@When("User select the Yet to Freight status from the filter - \\(PO Order - FG - Domestic)")
	public void user_select_the_yet_to_freight_status_from_the_filter_po_order_fg_domestic()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(20));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(20));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement staleElementDummyClick = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		j.executeScript("arguments[0].click();", staleElementDummyClick);
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait1.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException | NoSuchElementException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 2);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 1);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 3);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(2000);
	}

	@When("User select the Yet to Freight status from the filter - \\(WEB Order - FG - Domestic)")
	public void user_select_the_yet_to_freight_status_from_the_filter_web_order_fg_domestic()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(20));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(20));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement staleElementDummyClick = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		j.executeScript("arguments[0].click();", staleElementDummyClick);
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait1.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException | NoSuchElementException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 2);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 2);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 3);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(2000);
	}

	@When("User select the Yet to Freight status from the filter - \\(PO Order - NPM - Domestic)")
	public void user_select_the_yet_to_freight_status_from_the_filter_po_order_npm_domestic()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(20));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(20));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement staleElementDummyClick = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		j.executeScript("arguments[0].click();", staleElementDummyClick);
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait1.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException | NoSuchElementException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 3);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 1);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 3);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(2000);
	}

	@When("User select the Yet to Freight status from the filter - \\(WEB Order - NPM - Domestic)")
	public void user_select_the_yet_to_freight_status_from_the_filter_web_order_npm_domestic()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(20));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(20));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement staleElementDummyClick = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		j.executeScript("arguments[0].click();", staleElementDummyClick);
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait1.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException | NoSuchElementException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 3);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 2);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 3);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(2000);
	}

	@When("User enters the Freight fields in logistics tile dropdown - \\(PO Order - RM - Domestic), \\(Incoterm - EXW, Duty Exemption - NO)")
	public void user_enters_the_freight_fields_in_logistics_tile_dropdown_po_order_rm_domestic_incoterm_exw_duty_exemption_no()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement logisticsTileDropdown = driver.findElement(By.xpath("(//*[@id='headingTwo']/h5/button)[1]"));
		wait.until(ExpectedConditions.visibilityOf(logisticsTileDropdown));
		logisticsTileDropdown.click();
		Thread.sleep(3000);

		WebElement freightInvoiceNo = driver
				.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[21]"));
		wait.until(ExpectedConditions
				.visibilityOfElementLocated(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[21]")));
		freightInvoiceNo.sendKeys(UUID());

		WebElement typeOfImport = driver.findElement(By.xpath("(//app-form-select//div//select)[2]"));
		selectOptionByIndex(typeOfImport, 1);

		WebElement packageWeight = driver
				.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[22]"));
		packageWeight.sendKeys("100");

		WebElement vWeight = driver.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[23]"));
		vWeight.sendKeys("100");

		WebElement billingWeight = driver
				.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[24]"));
		billingWeight.sendKeys("100");

		WebElement basicFreight = driver.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[25]"));
		basicFreight.sendKeys("100");

		WebElement fuelSurcharge = driver
				.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[26]"));
		fuelSurcharge.sendKeys("100");

		WebElement otherSurcharge = driver
				.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[27]"));
		otherSurcharge.sendKeys("100");

		WebElement clearanceCharges = driver
				.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[28]"));
		clearanceCharges.sendKeys("100");

		WebElement freightGST = driver.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[29]"));
		freightGST.sendKeys("18");

		WebElement totalFreight = driver.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[30]"));
		if (totalFreight.isEnabled()) {
			System.out.println("Freight Field : Field is Enabled as Not Expected");
		} else {
			System.out.println("Freight Field : Field is Disabled as Expected");
			System.out.println("Total Freight Charges : " + totalFreight.getAttribute("Value"));
		}
		WebElement freightRemarks = driver
				.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[5]"));
		freightRemarks.sendKeys("NA");
	}

	@When("User enters the Freight fields in logistics tile dropdown - \\(CSM - Domestic), \\(Incoterm - EXW, Duty Exemption - NO)")
	public void user_enters_the_freight_fields_in_logistics_tile_dropdown_csm_domestic_incoterm_exw_duty_exemption_no()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement logisticsTileDropdown = driver.findElement(By.xpath("(//*[@id='headingTwo']/h5/button)[1]"));
		wait.until(ExpectedConditions.visibilityOf(logisticsTileDropdown));
		logisticsTileDropdown.click();
		Thread.sleep(3000);

		WebElement freightInvoiceNo = driver
				.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[21]"));
		wait.until(ExpectedConditions
				.visibilityOfElementLocated(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[21]")));
		freightInvoiceNo.sendKeys(UUID());

		WebElement typeOfImport = driver.findElement(By.xpath("(//app-form-select//div//select)[2]"));
		selectOptionByIndex(typeOfImport, 1);

		WebElement packageWeight = driver
				.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[22]"));
		packageWeight.sendKeys("100");

		WebElement vWeight = driver.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[23]"));
		vWeight.sendKeys("100");

		WebElement billingWeight = driver
				.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[24]"));
		billingWeight.sendKeys("100");

		WebElement basicFreight = driver.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[25]"));
		basicFreight.sendKeys("100");

		WebElement fuelSurcharge = driver
				.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[26]"));
		fuelSurcharge.sendKeys("100");

		WebElement otherSurcharge = driver
				.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[27]"));
		otherSurcharge.sendKeys("100");

		WebElement clearanceCharges = driver
				.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[28]"));
		clearanceCharges.sendKeys("100");

		WebElement freightGST = driver.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[29]"));
		freightGST.sendKeys("18");

		WebElement totalFreight = driver.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[30]"));
		if (totalFreight.isEnabled()) {
			System.out.println("Freight Field : Field is Enabled as Not Expected");
		} else {
			System.out.println("Freight Field : Field is Disabled as Expected");
			System.out.println("Total Freight Charges : " + totalFreight.getAttribute("Value"));
		}
		WebElement freightRemarks = driver
				.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[4]"));
		freightRemarks.sendKeys("NA");
	}

	@When("User enters the Freight fields in logistics tile dropdown - \\(PO Order - NPM - Domestic), \\(Incoterm - EXW, Duty Exemption - NO)")
	public void user_enters_the_freight_fields_in_logistics_tile_dropdown_po_order_npm_domestic_incoterm_exw_duty_exemption_no()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement logisticsTileDropdown = driver.findElement(By.xpath("(//*[@id='headingTwo']/h5/button)[1]"));
		wait.until(ExpectedConditions.visibilityOf(logisticsTileDropdown));
		logisticsTileDropdown.click();
		Thread.sleep(3000);

		WebElement freightInvoiceNo = driver
				.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[21]"));
		wait.until(ExpectedConditions
				.visibilityOfElementLocated(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[21]")));
		freightInvoiceNo.sendKeys(UUID());

		WebElement typeOfImport = driver.findElement(By.xpath("(//app-form-select//div//select)[2]"));
		selectOptionByIndex(typeOfImport, 1);

		WebElement packageWeight = driver
				.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[22]"));
		packageWeight.sendKeys("100");

		WebElement vWeight = driver.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[23]"));
		vWeight.sendKeys("100");

		WebElement billingWeight = driver
				.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[24]"));
		billingWeight.sendKeys("100");

		WebElement basicFreight = driver.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[25]"));
		basicFreight.sendKeys("100");

		WebElement fuelSurcharge = driver
				.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[26]"));
		fuelSurcharge.sendKeys("100");

		WebElement otherSurcharge = driver
				.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[27]"));
		otherSurcharge.sendKeys("100");

		WebElement clearanceCharges = driver
				.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[28]"));
		clearanceCharges.sendKeys("100");

		WebElement freightGST = driver.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[29]"));
		freightGST.sendKeys("18");

		WebElement totalFreight = driver.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[30]"));
		if (totalFreight.isEnabled()) {
			System.out.println("Freight Field : Field is Enabled as Not Expected");
		} else {
			System.out.println("Freight Field : Field is Disabled as Expected");
			System.out.println("Total Freight Charges : " + totalFreight.getAttribute("Value"));
		}
		WebElement freightRemarks = driver
				.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[5]"));
		freightRemarks.sendKeys("NA");
	}

	@When("User enters the Freight fields in logistics tile dropdown - \\(PO Order - RM - Domestic), \\(Incoterm - FOB, Duty Exemption - YES)")
	public void user_enters_the_freight_fields_in_logistics_tile_dropdown_po_order_rm_domestic_incoterm_fob_duty_exemption_yes()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement logisticsTileDropdown = driver.findElement(By.xpath("(//*[@id='headingTwo']/h5/button)[1]"));
		wait.until(ExpectedConditions.visibilityOf(logisticsTileDropdown));
		logisticsTileDropdown.click();
		Thread.sleep(3000);

		WebElement freightInvoiceNo = driver
				.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[24]"));
		wait.until(ExpectedConditions
				.visibilityOfElementLocated(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[24]")));
		freightInvoiceNo.sendKeys(UUID());

		WebElement typeOfImport = driver.findElement(By.xpath("(//app-form-select//div//select)[3]"));
		selectOptionByIndex(typeOfImport, 1);

		WebElement packageWeight = driver
				.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[25]"));
		packageWeight.sendKeys("100");

		WebElement vWeight = driver.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[26]"));
		vWeight.sendKeys("100");

		WebElement billingWeight = driver
				.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[27]"));
		billingWeight.sendKeys("100");

		WebElement basicFreight = driver.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[28]"));
		basicFreight.sendKeys("100");

		WebElement fuelSurcharge = driver
				.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[29]"));
		fuelSurcharge.sendKeys("100");

		WebElement otherSurcharge = driver
				.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[30]"));
		otherSurcharge.sendKeys("100");

		WebElement clearanceCharges = driver
				.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[31]"));
		clearanceCharges.sendKeys("100");

		WebElement freightGST = driver.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[32]"));
		freightGST.sendKeys("18");

		WebElement totalFreight = driver.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[33]"));
		if (totalFreight.isEnabled()) {
			System.out.println("Freight Field : Field is Enabled as Not Expected");
		} else {
			System.out.println("Freight Field : Field is Disabled as Expected");
			System.out.println("Total Freight Charges : " + totalFreight.getAttribute("Value"));
		}
		WebElement freightRemarks = driver
				.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[5]"));
		freightRemarks.sendKeys("NA");
	}

	@When("User enters the Freight fields in logistics tile dropdown - \\(PO Order - NPM - Domestic), \\(Incoterm - FOB, Duty Exemption - YES)")
	public void user_enters_the_freight_fields_in_logistics_tile_dropdown_po_order_npm_domestic_incoterm_fob_duty_exemption_yes()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement logisticsTileDropdown = driver.findElement(By.xpath("(//*[@id='headingTwo']/h5/button)[1]"));
		wait.until(ExpectedConditions.visibilityOf(logisticsTileDropdown));
		logisticsTileDropdown.click();
		Thread.sleep(3000);

		WebElement freightInvoiceNo = driver
				.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[24]"));
		wait.until(ExpectedConditions
				.visibilityOfElementLocated(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[24]")));
		freightInvoiceNo.sendKeys(UUID());

		WebElement typeOfImport = driver.findElement(By.xpath("(//app-form-select//div//select)[3]"));
		selectOptionByIndex(typeOfImport, 1);

		WebElement packageWeight = driver
				.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[25]"));
		packageWeight.sendKeys("100");

		WebElement vWeight = driver.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[26]"));
		vWeight.sendKeys("100");

		WebElement billingWeight = driver
				.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[27]"));
		billingWeight.sendKeys("100");

		WebElement basicFreight = driver.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[28]"));
		basicFreight.sendKeys("100");

		WebElement fuelSurcharge = driver
				.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[29]"));
		fuelSurcharge.sendKeys("100");

		WebElement otherSurcharge = driver
				.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[30]"));
		otherSurcharge.sendKeys("100");

		WebElement clearanceCharges = driver
				.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[31]"));
		clearanceCharges.sendKeys("100");

		WebElement freightGST = driver.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[32]"));
		freightGST.sendKeys("18");

		WebElement totalFreight = driver.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[33]"));
		if (totalFreight.isEnabled()) {
			System.out.println("Freight Field : Field is Enabled as Not Expected");
		} else {
			System.out.println("Freight Field : Field is Disabled as Expected");
			System.out.println("Total Freight Charges : " + totalFreight.getAttribute("Value"));
		}
		WebElement freightRemarks = driver
				.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[5]"));
		freightRemarks.sendKeys("NA");
	}

	@When("User enters the DTAP fields in logistics tile dropdown - \\(PO Order - RM - Domestic), \\(Incoterm - FOB, Duty Exemption - YES)")
	public void user_enters_the_dtap_fields_in_logistics_tile_dropdown_po_order_rm_domestic_incoterm_fob_duty_exemption_yes() {

		WebElement customsRequestNo = driver.findElement(By.xpath("(//app-form-text//div//input)[5]"));
		customsRequestNo.sendKeys("2");

		WebElement BOENo = driver.findElement(By.xpath("(//app-form-text//div//input)[6]"));
		BOENo.sendKeys("2");

		WebElement BOEDate = driver.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[1]"));
		String date = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
		BOEDate.sendKeys(date);
	}

	@When("User enters the DTAP fields in logistics tile dropdown - \\(PO Order - RM - Domestic), \\(Incoterm - DDU, Duty Exemption - YES)")
	public void user_enters_the_dtap_fields_in_logistics_tile_dropdown_po_order_rm_domestic_incoterm_ddu_duty_exemption_yes() {
		WebElement customsRequestNo = driver.findElement(By.xpath("(//app-form-text//div//input)[5]"));
		customsRequestNo.sendKeys("2");

		WebElement BOENo = driver.findElement(By.xpath("(//app-form-text//div//input)[6]"));
		BOENo.sendKeys("2");

		WebElement BOEDate = driver.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[1]"));
		String date = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
		BOEDate.sendKeys(date);
	}

	@When("User click on the cancel button")
	public void user_click_on_the_cancel_button() throws InterruptedException {
		WebElement cancelBtn = driver
				.findElement(By.xpath("//app-form//section//div//div//div[6]//button[2][contains (text(), 'Cancel')]"));
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].scrollIntoView(true);", cancelBtn);
		Thread.sleep(1000);
		cancelBtn.click();
		Thread.sleep(2000);
	}

	@Given("User enters the Logistics Team Head {string} and {string}")
	public void user_enters_the_logistics_team_head_and(String username, String password) {
		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
		WebElement loginID = driver.findElement(By.xpath("//input[@id='loginkey'][1]"));
		loginID.sendKeys(username);
		WebElement loginPassword = driver.findElement(By.xpath("//input[@id='password'][1]"));
		loginPassword.sendKeys(password);
		WebElement btnClick = driver.findElement(By.xpath("//input[@id='remembermeCheck'][1]"));
		btnClick.click();
		WebElement btnUnclick = driver.findElement(By.xpath("//input[@id='remembermeCheck'][1]"));
		btnUnclick.click();
		WebElement signInButton = driver.findElement(By.xpath("//button[@type='submit'][1]"));
		signInButton.click();
	}

	@When("User select the Logistics Completed status from the filter  - \\(PO Order - RM - Import)")
	public void user_select_the_logistics_completed_status_from_the_filter_po_order_rm_import()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 1);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 1);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 5);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(1000);
	}

	@When("User select the Logistics Completed status from the filter - \\(Testing & Services - Import)")
	public void user_select_the_logistics_completed_status_from_the_filter_testing_services_import()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 3);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 5);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(1000);
	}

	@When("User select the Logistics Completed status from the filter  - \\(WEB Order - RM - Import)")
	public void user_select_the_logistics_completed_status_from_the_filter_web_order_rm_import()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 1);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 2);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 5);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(1000);
	}

	@When("User select the Logistics Completed status from the filter  - \\(PO Order - FG - Import)")
	public void user_select_the_logistics_completed_status_from_the_filter_po_order_fg_import()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 2);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 1);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 5);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(1000);
	}

	@When("User select the Logistics Completed status from the filter  - \\(WEB Order - FG - Import)")
	public void user_select_the_logistics_completed_status_from_the_filter_web_order_fg_import()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 2);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 2);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 5);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(1000);
	}

	@When("User select the Logistics Completed status from the filter  - \\(PO Order - NPM - Import)")
	public void user_select_the_logistics_completed_status_from_the_filter_po_order_npm_import()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 3);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 1);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 5);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(1000);
	}

	@When("User select the Logistics Completed status from the filter  - \\(WEB Order - NPM - Import)")
	public void user_select_the_logistics_completed_status_from_the_filter_web_order_npm_import()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 3);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 2);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 5);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(1000);
	}

	@When("User select the Logistics Completed status from the filter - \\(PO Order - RM - Domestic)")
	public void user_select_the_logistics_completed_status_from_the_filter_po_order_rm_domestic()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 1);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 1);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 5);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(1000);
	}

	@When("User select the Logistics Completed status from the filter - \\(Testing & Services - Domestic)")
	public void user_select_the_logistics_completed_status_from_the_filter_testing_services_domestic()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 3);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 5);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(1000);
	}

	@When("User select the Logistics Completed status from the filter - \\(CSM - Domestic)")
	public void user_select_the_logistics_completed_status_from_the_filter_csm_domestic() throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 4);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 5);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(1000);
	}

	@When("User select the Logistics Completed status from the filter - \\(WEB Order - RM - Domestic)")
	public void user_select_the_logistics_completed_status_from_the_filter_web_order_rm_domestic()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 1);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 2);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 5);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(1000);
	}

	@When("User select the Logistics Completed status from the filter - \\(PO Order - FG - Domestic)")
	public void user_select_the_logistics_completed_status_from_the_filter_po_order_fg_domestic()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 2);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 1);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 5);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(1000);
	}

	@When("User select the Logistics Completed status from the filter - \\(WEB Order - FG - Domestic)")
	public void user_select_the_logistics_completed_status_from_the_filter_web_order_fg_domestic()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 2);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 2);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 5);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(1000);
	}

	@When("User select the Logistics Completed status from the filter - \\(PO Order - NPM - Domestic)")
	public void user_select_the_logistics_completed_status_from_the_filter_po_order_npm_domestic()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 3);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 1);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 5);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(1000);
	}

	@When("User select the Logistics Completed status from the filter - \\(WEB Order - NPM - Domestic)")
	public void user_select_the_logistics_completed_status_from_the_filter_web_order_npm_domestic()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 3);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 2);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 5);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(1000);
	}

	@When("User ensure the store fields are in disabled status")
	public void user_ensure_the_store_fields_are_in_disabled_status() throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement storeTileDropdown = driver.findElement(By.xpath("//*[@id='headingOne']/h5/button"));
		wait.until(ExpectedConditions.elementToBeClickable(storeTileDropdown));
		j.executeScript("arguments[0].click();", storeTileDropdown);
		Thread.sleep(1000);

		WebElement storeTile = driver.findElement(By.xpath("(//div[@id='collapseOne'])[1]//div"));
		if (storeTile.isEnabled()) {
			System.out.println("Field is Enabled as Not Expected");
		} else {
			System.out.println("Field is Disabled as Expected");
			System.out.println("Total Receipt Value : " + storeTile.getAttribute("value"));
		}
		Thread.sleep(1000);

	}

	@When("User edit the logistics fields in logistics tile dropdown  - \\(PO Order - RM - Import), \\(Incoterm - FCA, Duty Exemption - YES)")
	public void user_edit_the_logistics_fields_in_logistics_tile_dropdown_po_order_rm_import_incoterm_fca_duty_exemption_yes()
			throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;
		// For Incoterm: "FCA" & Duty Exemption : Yes
		WebElement incoterm = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]"));
		selectOptionByIndex(incoterm, 1);

		/* /For "Import"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("0: 1"));

		if (attribute2.equals("0: 1")) {

			WebElement dutyExemption = driver.findElement(By.xpath("(//app-form-select//div//select)[1]"));
			selectOptionByIndex(dutyExemption, 0);

			WebElement customsRequestNo = driver.findElement(By.xpath("(//app-form-text//div//input)[5]"));
			if (customsRequestNo.isEnabled()) {
				System.out.println("Customs Request No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Customs Request No Field : Field is Disabled as Expected");
				System.out.println("Request No : " + customsRequestNo.getAttribute("value"));
			}

			WebElement BOENo = driver.findElement(By.xpath("(//app-form-text//div//input)[6]"));
			if (BOENo.isEnabled()) {
				System.out.println("BOE No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Customs Request No Field : Field is Disabled as Expected");
				System.out.println("BOE No : " + BOENo.getAttribute("value"));
			}

			WebElement BOEDate = driver.findElement(By.xpath("(//app-form-text//div//input)[7]"));
			if (BOEDate.isEnabled()) {
				System.out.println("BOEDate No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Customs Request No Field : Field is Disabled as Expected");
				System.out.println("BOEDate No : " + BOEDate.getAttribute("value"));
			}

			WebElement trackingNo = driver.findElement(By.xpath("(//app-form-text//div//input)[8]"));
			if (trackingNo.isEnabled()) {
				System.out.println("Tracking No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Tracking No Field : Field is Disabled as Expected");
				System.out.println("Tracking No : " + trackingNo.getAttribute("value"));
			}

			WebElement noOfPackages = driver.findElement(By.xpath("(//app-form-text//div//input)[9]"));
			if (noOfPackages.isEnabled()) {
				System.out.println("No of Packages Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("No of Packages Field : Field is Disabled as Expected");
				System.out.println("No of Packages : " + noOfPackages.getAttribute("value"));
			}

			WebElement exchangeRate = driver.findElement(By.xpath("(//app-form-text//div//input)[10]"));
			if (exchangeRate.isEnabled()) {
				System.out.println("Exchange Rate Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("No of Packages Field : Field is Disabled as Expected");
				System.out.println("Exchange Rate : " + exchangeRate.getAttribute("value"));
			}

			WebElement logisticsTileDropdown = driver.findElement(By.xpath("(//*[@id='headingTwo']/h5/button)[1]"));
			logisticsTileDropdown.click();
			Thread.sleep(3000);

			WebElement slickGridScroll = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll);

			WebElement delayReason = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[3]"));
			delayReason.clear();
			delayReason.sendKeys("Editing For FCA");

//			WebElement pickupDate = driver
//					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[1]"));
//			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
//			pickupDate.sendKeys(date2);

			WebElement logisticsRemarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[4]"));
			logisticsRemarks.clear();
			logisticsRemarks.sendKeys("Editing For FCA");

			/* Yet to Freight Fields */

			WebElement freightInvoiceNo = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[24]"));
			j.executeScript("arguments[0].scrollIntoView(true);", freightInvoiceNo);
			freightInvoiceNo.clear();
			freightInvoiceNo.sendKeys(UUID());

			WebElement typeOfImport = driver.findElement(By.xpath("(//app-form-select[1]//div[1]//select)[2]"));
			selectOptionByIndex(typeOfImport, 2);

			WebElement packageWeight = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[25]"));
			packageWeight.clear();
			packageWeight.sendKeys("50");

			WebElement vWeight = driver.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[26]"));
			vWeight.clear();
			vWeight.sendKeys("50");

			WebElement billingWeight = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[27]"));
			billingWeight.clear();
			billingWeight.sendKeys("50");

			WebElement basicFreight = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[28]"));
			basicFreight.clear();
			basicFreight.sendKeys("50");

			WebElement fuelSurcharge = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[29]"));
			fuelSurcharge.clear();
			fuelSurcharge.sendKeys("50");

			WebElement otherSurcharge = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[30]"));
			otherSurcharge.clear();
			otherSurcharge.sendKeys("50");

			WebElement clearanceCharges = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[31]"));
			clearanceCharges.clear();
			clearanceCharges.sendKeys("50");

			WebElement freightGST = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[32]"));
			freightGST.clear();
			freightGST.sendKeys("28");

			WebElement totalFreight = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[33]"));
			if (totalFreight.isEnabled()) {
				System.out.println("Freight Field : Field is Enabled as Not Expected");
			} else {
				System.out.println("Freight Field : Field is Disabled as Expected");
				System.out.println("Total Freight Charges : " + totalFreight.getAttribute("Value"));
			}
			WebElement freightRemarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[5]"));
			freightRemarks.clear();
			freightRemarks.sendKeys("Edited for FCA");

			/* / FCA - Import - Grid Fields/ */

			int scrollAmount = 4000;
			WebElement slickGridScroll2 = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll2);
			Thread.sleep(1000);
			j.executeScript("arguments[0].scrollLeft += arguments[1];", slickGridScroll2, scrollAmount);
			Thread.sleep(1000);

			WebElement BOEDescription = driver.findElement(
					By.xpath(".//div[contains (@class,'slick-cell l30 r30')]"));
			j.executeScript("arguments[0].click();", BOEDescription);
			WebElement BOEDescription1 = driver.findElement(By.xpath(
					".//div[contains (@class,'slick-cell l30 r30')]//input"));
			BOEDescription1.sendKeys("Edited For FCA");

			WebElement unitPrice = driver.findElement(
					By.xpath(".//div[contains (@class,'slick-cell l33 r33')]"));
			j.executeScript("arguments[0].click();", unitPrice);
			WebElement unitPrice1 = driver.findElement(By.xpath(
					".//div[contains (@class,'slick-cell l33 r33')]//input"));
			unitPrice1.sendKeys("5");

			WebElement extendedValue = driver.findElement(
					By.xpath(".//div[contains (@class,'slick-cell l34 r34')]"));
			WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
			j.executeScript("arguments[0].click();", extendedValue);
			WebElement refreshedExtendedValue = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains (@class,'slick-cell l34 r34')]")));
			String extendedValueAttribute = refreshedExtendedValue.getText();

			WebElement assessableValue = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[18]"));
			assessableValue.clear();
			assessableValue.sendKeys(extendedValueAttribute);

			WebElement HSCode = driver.findElement(
					By.xpath(".//div[contains (@class,'slick-cell l35 r35')]"));
			j.executeScript("arguments[0].click();", HSCode);
			WebElement HSCode1 = driver.findElement(By.xpath(
					".//div[contains (@class,'slick-cell l35 r35')]//input"));
			HSCode1.sendKeys("54321");

			WebElement itemType = driver.findElement(
					By.xpath(".//div[contains (@class,'slick-cell l36 r36')]"));
			j.executeScript("arguments[0].click();", itemType);
			WebElement itemType1 = driver.findElement(By.xpath(
					".//div[contains (@class,'slick-cell l36 r36')]//select"));
			selectOptionByIndex(itemType1, 1);

			WebElement rateOfDuty = driver.findElement(
					By.xpath(".//div[contains (@class,'slick-cell l37 r37')]"));
			j.executeScript("arguments[0].click();", rateOfDuty);
			WebElement rateOfDuty1 = driver.findElement(By.xpath(
					".//div[contains (@class,'slick-cell l37 r37')]//select"));
			selectOptionByIndex(rateOfDuty1, 2);

			WebElement totalDutyAmt = driver.findElement(
					By.xpath(".//div[contains (@class,'slick-cell l41 r41')]"));
			j.executeScript("arguments[0].click();", totalDutyAmt);
			WebElement refreshedtotalDutyAmt = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains (@class,'slick-cell l41 r41')]")));
			String totalDutyAttribute = refreshedtotalDutyAmt.getText();

			WebElement totalDutyAmount = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[19]"));
			totalDutyAmount.clear();
			totalDutyAmount.sendKeys(totalDutyAttribute);
		} else {
			System.out.println("Purchase Category NOT MATCHING");
		}
	}

	@When("User edit the logistics fields in logistics tile dropdown - \\(Testing & Services - Import), \\(Incoterm - FCA, Duty Exemption - YES)")
	public void user_edit_the_logistics_fields_in_logistics_tile_dropdown_testing_services_import_incoterm_fca_duty_exemption_yes()
			throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;
		// For Incoterm: "FCA" & Duty Exemption : Yes
		WebElement incoterm = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]"));
		selectOptionByIndex(incoterm, 1);

		/* /For "Import"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("0: 1"));

		if (attribute2.equals("0: 1")) {

			WebElement dutyExemption = driver.findElement(By.xpath("(//app-form-select//div//select)[1]"));
			selectOptionByIndex(dutyExemption, 0);

			WebElement customsRequestNo = driver.findElement(By.xpath("(//app-form-text//div//input)[5]"));
			if (customsRequestNo.isEnabled()) {
				System.out.println("Customs Request No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Customs Request No Field : Field is Disabled as Expected");
				System.out.println("Request No : " + customsRequestNo.getAttribute("value"));
			}

			WebElement BOENo = driver.findElement(By.xpath("(//app-form-text//div//input)[6]"));
			if (BOENo.isEnabled()) {
				System.out.println("BOE No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Customs Request No Field : Field is Disabled as Expected");
				System.out.println("BOE No : " + BOENo.getAttribute("value"));
			}

			WebElement BOEDate = driver.findElement(By.xpath("(//app-form-text//div//input)[7]"));
			if (BOEDate.isEnabled()) {
				System.out.println("BOEDate No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Customs Request No Field : Field is Disabled as Expected");
				System.out.println("BOEDate No : " + BOEDate.getAttribute("value"));
			}

			WebElement trackingNo = driver.findElement(By.xpath("(//app-form-text//div//input)[8]"));
			if (trackingNo.isEnabled()) {
				System.out.println("Tracking No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Tracking No Field : Field is Disabled as Expected");
				System.out.println("Tracking No : " + trackingNo.getAttribute("value"));
			}

			WebElement noOfPackages = driver.findElement(By.xpath("(//app-form-text//div//input)[9]"));
			if (noOfPackages.isEnabled()) {
				System.out.println("No of Packages Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("No of Packages Field : Field is Disabled as Expected");
				System.out.println("No of Packages : " + noOfPackages.getAttribute("value"));
			}

			WebElement exchangeRate = driver.findElement(By.xpath("(//app-form-text//div//input)[10]"));
			if (exchangeRate.isEnabled()) {
				System.out.println("Exchange Rate Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("No of Packages Field : Field is Disabled as Expected");
				System.out.println("Exchange Rate : " + exchangeRate.getAttribute("value"));
			}

			WebElement logisticsTileDropdown = driver.findElement(By.xpath("(//*[@id='headingTwo']/h5/button)[1]"));
			logisticsTileDropdown.click();
			Thread.sleep(3000);

			WebElement slickGridScroll = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll);

			WebElement delayReason = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[3]"));
			delayReason.clear();
			delayReason.sendKeys("Editing For FCA");

//			WebElement pickupDate = driver
//					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[1]"));
//			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
//			pickupDate.sendKeys(date2);

			WebElement logisticsRemarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[4]"));
			logisticsRemarks.clear();
			logisticsRemarks.sendKeys("Editing For FCA");

			/* Freight Fields */

			WebElement freightInvoiceNo = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[24]"));
			j.executeScript("arguments[0].scrollIntoView(true);", freightInvoiceNo);
			freightInvoiceNo.clear();
			freightInvoiceNo.sendKeys(UUID());

			WebElement typeOfImport = driver.findElement(By.xpath("(//app-form-select[1]//div[1]//select)[2]"));
			selectOptionByIndex(typeOfImport, 2);

			WebElement packageWeight = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[25]"));
			packageWeight.clear();
			packageWeight.sendKeys("50");

			WebElement vWeight = driver.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[26]"));
			vWeight.clear();
			vWeight.sendKeys("50");

			WebElement billingWeight = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[27]"));
			billingWeight.clear();
			billingWeight.sendKeys("50");

			WebElement basicFreight = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[28]"));
			basicFreight.clear();
			basicFreight.sendKeys("50");

			WebElement fuelSurcharge = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[29]"));
			fuelSurcharge.clear();
			fuelSurcharge.sendKeys("50");

			WebElement otherSurcharge = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[30]"));
			otherSurcharge.clear();
			otherSurcharge.sendKeys("50");

			WebElement clearanceCharges = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[31]"));
			clearanceCharges.clear();
			clearanceCharges.sendKeys("50");

			WebElement freightGST = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[32]"));
			freightGST.clear();
			freightGST.sendKeys("28");

			WebElement totalFreight = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[33]"));
			if (totalFreight.isEnabled()) {
				System.out.println("Freight Field : Field is Enabled as Not Expected");
			} else {
				System.out.println("Freight Field : Field is Disabled as Expected");
				System.out.println("Total Freight Charges : " + totalFreight.getAttribute("Value"));
			}
			WebElement freightRemarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[5]"));
			freightRemarks.clear();
			freightRemarks.sendKeys("Edited for FCA");

			/* / FCA - Import - Grid Fields/ */

			int scrollAmount = 4000;
			WebElement slickGridScroll2 = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll2);
			Thread.sleep(1000);
			j.executeScript("arguments[0].scrollLeft += arguments[1];", slickGridScroll2, scrollAmount);
			Thread.sleep(1000);

			WebElement BOEDescription = driver.findElement(
					By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l28 r28']"));
			j.executeScript("arguments[0].click();", BOEDescription);
			WebElement BOEDescription1 = driver.findElement(By.xpath(
					"//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l28 r28 active editable selected']//input"));
			BOEDescription1.sendKeys("Edited For FCA");

			WebElement unitPrice = driver.findElement(
					By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l31 r31 selected']"));
			j.executeScript("arguments[0].click();", unitPrice);
			WebElement unitPrice1 = driver.findElement(By.xpath(
					"//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l31 r31 selected active editable']//input"));
			unitPrice1.sendKeys("5");

			WebElement extendedValue = driver.findElement(
					By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l32 r32 selected']"));
			WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
			j.executeScript("arguments[0].click();", extendedValue);
			WebElement refreshedExtendedValue = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					"//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l32 r32 selected active']")));
			String extendedValueAttribute = refreshedExtendedValue.getText();

			WebElement assessableValue = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[18]"));
			assessableValue.clear();
			assessableValue.sendKeys(extendedValueAttribute);

			WebElement HSCode = driver.findElement(
					By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l33 r33 selected']"));
			j.executeScript("arguments[0].click();", HSCode);
			WebElement HSCode1 = driver.findElement(By.xpath(
					"//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l33 r33 selected active editable']//input"));
			HSCode1.sendKeys("54321");

			WebElement itemType = driver.findElement(
					By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l34 r34 selected']"));
			j.executeScript("arguments[0].click();", itemType);
			WebElement itemType1 = driver.findElement(By.xpath(
					"//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l34 r34 selected active editable']//select"));
			selectOptionByIndex(itemType1, 1);

			WebElement rateOfDuty = driver.findElement(
					By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l35 r35 selected']"));
			j.executeScript("arguments[0].click();", rateOfDuty);
			WebElement rateOfDuty1 = driver.findElement(By.xpath(
					"//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l35 r35 selected active editable']//select"));
			selectOptionByIndex(rateOfDuty1, 2);

			WebElement totalDutyAmt = driver.findElement(
					By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l39 r39 selected']"));
			j.executeScript("arguments[0].click();", totalDutyAmt);
			WebElement refreshedtotalDutyAmt = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					"//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l39 r39 selected active']")));
			String totalDutyAttribute = refreshedtotalDutyAmt.getText();

			WebElement totalDutyAmount = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[19]"));
			totalDutyAmount.clear();
			totalDutyAmount.sendKeys(totalDutyAttribute);
		} else {
			System.out.println("Purchase Category NOT MATCHING");
		}
	}

	@When("User edit the logistics fields in logistics tile dropdown  - \\(PO Order - NPM - Import), \\(Incoterm - FCA, Duty Exemption - YES)")
	public void user_edit_the_logistics_fields_in_logistics_tile_dropdown_po_order_npm_import_incoterm_fca_duty_exemption_yes()
			throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;
		// For Incoterm: "FCA" & Duty Exemption : Yes
		WebElement incoterm = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]"));
		selectOptionByIndex(incoterm, 1);

		/* /For "Import"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("0: 1"));

		if (attribute2.equals("0: 1")) {

			WebElement dutyExemption = driver.findElement(By.xpath("(//app-form-select//div//select)[1]"));
			selectOptionByIndex(dutyExemption, 0);

			WebElement customsRequestNo = driver.findElement(By.xpath("(//app-form-text//div//input)[5]"));
			if (customsRequestNo.isEnabled()) {
				System.out.println("Customs Request No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Customs Request No Field : Field is Disabled as Expected");
				System.out.println("Request No : " + customsRequestNo.getAttribute("value"));
			}

			WebElement BOENo = driver.findElement(By.xpath("(//app-form-text//div//input)[6]"));
			if (BOENo.isEnabled()) {
				System.out.println("BOE No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Customs Request No Field : Field is Disabled as Expected");
				System.out.println("BOE No : " + BOENo.getAttribute("value"));
			}

			WebElement BOEDate = driver.findElement(By.xpath("(//app-form-text//div//input)[7]"));
			if (BOEDate.isEnabled()) {
				System.out.println("BOEDate No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Customs Request No Field : Field is Disabled as Expected");
				System.out.println("BOEDate No : " + BOEDate.getAttribute("value"));
			}

			WebElement trackingNo = driver.findElement(By.xpath("(//app-form-text//div//input)[8]"));
			if (trackingNo.isEnabled()) {
				System.out.println("Tracking No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Tracking No Field : Field is Disabled as Expected");
				System.out.println("Tracking No : " + trackingNo.getAttribute("value"));
			}

			WebElement noOfPackages = driver.findElement(By.xpath("(//app-form-text//div//input)[9]"));
			if (noOfPackages.isEnabled()) {
				System.out.println("No of Packages Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("No of Packages Field : Field is Disabled as Expected");
				System.out.println("No of Packages : " + noOfPackages.getAttribute("value"));
			}

			WebElement exchangeRate = driver.findElement(By.xpath("(//app-form-text//div//input)[10]"));
			if (exchangeRate.isEnabled()) {
				System.out.println("Exchange Rate Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("No of Packages Field : Field is Disabled as Expected");
				System.out.println("Exchange Rate : " + exchangeRate.getAttribute("value"));
			}

			WebElement logisticsTileDropdown = driver.findElement(By.xpath("(//*[@id='headingTwo']/h5/button)[1]"));
			logisticsTileDropdown.click();
			Thread.sleep(3000);

			WebElement slickGridScroll = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll);

			WebElement delayReason = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[3]"));
			delayReason.clear();
			delayReason.sendKeys("Editing For FCA");

//			WebElement pickupDate = driver
//					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[1]"));
//			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
//			pickupDate.sendKeys(date2);

			WebElement logisticsRemarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[4]"));
			logisticsRemarks.clear();
			logisticsRemarks.sendKeys("Editing For FCA");

			/* Yet to Freight Fields */

			WebElement freightInvoiceNo = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[24]"));
			j.executeScript("arguments[0].scrollIntoView(true);", freightInvoiceNo);
			freightInvoiceNo.clear();
			freightInvoiceNo.sendKeys(UUID());

			WebElement typeOfImport = driver.findElement(By.xpath("(//app-form-select[1]//div[1]//select)[2]"));
			selectOptionByIndex(typeOfImport, 2);

			WebElement packageWeight = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[25]"));
			packageWeight.clear();
			packageWeight.sendKeys("50");

			WebElement vWeight = driver.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[26]"));
			vWeight.clear();
			vWeight.sendKeys("50");

			WebElement billingWeight = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[27]"));
			billingWeight.clear();
			billingWeight.sendKeys("50");

			WebElement basicFreight = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[28]"));
			basicFreight.clear();
			basicFreight.sendKeys("50");

			WebElement fuelSurcharge = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[29]"));
			fuelSurcharge.clear();
			fuelSurcharge.sendKeys("50");

			WebElement otherSurcharge = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[30]"));
			otherSurcharge.clear();
			otherSurcharge.sendKeys("50");

			WebElement clearanceCharges = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[31]"));
			clearanceCharges.clear();
			clearanceCharges.sendKeys("50");

			WebElement freightGST = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[32]"));
			freightGST.clear();
			freightGST.sendKeys("28");

			WebElement totalFreight = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[33]"));
			if (totalFreight.isEnabled()) {
				System.out.println("Freight Field : Field is Enabled as Not Expected");
			} else {
				System.out.println("Freight Field : Field is Disabled as Expected");
				System.out.println("Total Freight Charges : " + totalFreight.getAttribute("Value"));
			}
			WebElement freightRemarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[5]"));
			freightRemarks.clear();
			freightRemarks.sendKeys("Edited for FCA");

			/* / FCA - Import - Grid Fields/ */

			int scrollAmount = 4000;
			WebElement slickGridScroll2 = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll2);
			Thread.sleep(1000);
			j.executeScript("arguments[0].scrollLeft += arguments[1];", slickGridScroll2, scrollAmount);
			Thread.sleep(1000);

			WebElement BOEDescription = driver.findElement(
					By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l27 r27']"));
			j.executeScript("arguments[0].click();", BOEDescription);
			WebElement BOEDescription1 = driver.findElement(By.xpath(
					"//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l27 r27 active editable selected']//input"));
			BOEDescription1.sendKeys("Edited For FCA");

			WebElement unitPrice = driver.findElement(
					By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l30 r30 selected']"));
			j.executeScript("arguments[0].click();", unitPrice);
			WebElement unitPrice1 = driver.findElement(By.xpath(
					"//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l30 r30 selected active editable']//input"));
			unitPrice1.sendKeys("5");

			WebElement extendedValue = driver.findElement(
					By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l31 r31 selected']"));
			WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
			j.executeScript("arguments[0].click();", extendedValue);
			WebElement refreshedExtendedValue = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					"//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l31 r31 selected active']")));
			String extendedValueAttribute = refreshedExtendedValue.getText();

			WebElement assessableValue = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[18]"));
			assessableValue.clear();
			assessableValue.sendKeys(extendedValueAttribute);

			WebElement HSCode = driver.findElement(
					By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l32 r32 selected']"));
			j.executeScript("arguments[0].click();", HSCode);
			WebElement HSCode1 = driver.findElement(By.xpath(
					"//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l32 r32 selected active editable']//input"));
			HSCode1.sendKeys("54321");

			WebElement itemType = driver.findElement(
					By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l33 r33 selected']"));
			j.executeScript("arguments[0].click();", itemType);
			WebElement itemType1 = driver.findElement(By.xpath(
					"//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l33 r33 selected active editable']//select"));
			selectOptionByIndex(itemType1, 1);

			WebElement rateOfDuty = driver.findElement(
					By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l34 r34 selected']"));
			j.executeScript("arguments[0].click();", rateOfDuty);
			WebElement rateOfDuty1 = driver.findElement(By.xpath(
					"//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l34 r34 selected active editable']//select"));
			selectOptionByIndex(rateOfDuty1, 2);

			WebElement totalDutyAmt = driver.findElement(
					By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l38 r38 selected']"));
			j.executeScript("arguments[0].click();", totalDutyAmt);
			WebElement refreshedtotalDutyAmt = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					"//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l38 r38 selected active']")));
			String totalDutyAttribute = refreshedtotalDutyAmt.getText();

			WebElement totalDutyAmount = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[19]"));
			totalDutyAmount.clear();
			totalDutyAmount.sendKeys(totalDutyAttribute);
		} else {
			System.out.println("Purchase Category NOT MATCHING");
		}
	}

	@When("User edit the logistics fields in logistics tile dropdown  - \\(PO Order - RM - Import), \\(Incoterm - EXW, Duty Exemption - YES)")
	public void user_edit_the_logistics_fields_in_logistics_tile_dropdown_po_order_rm_import_incoterm_exw_duty_exemption_yes()
			throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;
		// For Incoterm: "EXW" & Duty Exemption : Yes
		WebElement incoterm = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]"));
		selectOptionByIndex(incoterm, 0);

		/* /For "Import"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("0: 1"));

		if (attribute2.equals("0: 1")) {

			WebElement dutyExemption = driver.findElement(By.xpath("(//app-form-select//div//select)[1]"));
			selectOptionByIndex(dutyExemption, 0);

			WebElement customsRequestNo = driver.findElement(By.xpath("(//app-form-text//div//input)[5]"));
			if (customsRequestNo.isEnabled()) {
				System.out.println("Customs Request No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Customs Request No Field : Field is Disabled as Expected");
				System.out.println("Request No : " + customsRequestNo.getAttribute("value"));
			}

			WebElement BOENo = driver.findElement(By.xpath("(//app-form-text//div//input)[6]"));
			if (BOENo.isEnabled()) {
				System.out.println("BOE No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Customs Request No Field : Field is Disabled as Expected");
				System.out.println("BOE No : " + BOENo.getAttribute("value"));
			}

			WebElement BOEDate = driver.findElement(By.xpath("(//app-form-text//div//input)[7]"));
			if (BOEDate.isEnabled()) {
				System.out.println("BOEDate No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Customs Request No Field : Field is Disabled as Expected");
				System.out.println("BOEDate No : " + BOEDate.getAttribute("value"));
			}

			WebElement trackingNo = driver.findElement(By.xpath("(//app-form-text//div//input)[8]"));
			if (trackingNo.isEnabled()) {
				System.out.println("Tracking No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Tracking No Field : Field is Disabled as Expected");
				System.out.println("Tracking No : " + trackingNo.getAttribute("value"));
			}

			WebElement noOfPackages = driver.findElement(By.xpath("(//app-form-text//div//input)[9]"));
			if (noOfPackages.isEnabled()) {
				System.out.println("No of Packages Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("No of Packages Field : Field is Disabled as Expected");
				System.out.println("No of Packages : " + noOfPackages.getAttribute("value"));
			}

			WebElement exchangeRate = driver.findElement(By.xpath("(//app-form-text//div//input)[10]"));
			if (exchangeRate.isEnabled()) {
				System.out.println("Exchange Rate Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("No of Packages Field : Field is Disabled as Expected");
				System.out.println("Exchange Rate : " + exchangeRate.getAttribute("value"));
			}

			WebElement logisticsTileDropdown = driver.findElement(By.xpath("(//*[@id='headingTwo']/h5/button)[1]"));
			logisticsTileDropdown.click();
			Thread.sleep(3000);

			WebElement slickGridScroll = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll);

			WebElement delayReason = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[3]"));
			delayReason.clear();
			delayReason.sendKeys("Editing For EXW");

//			WebElement pickupDate = driver
//					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[1]"));
//			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
//			pickupDate.sendKeys(date2);

			WebElement logisticsRemarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[4]"));
			logisticsRemarks.clear();
			logisticsRemarks.sendKeys("Editing For EXW");

			WebElement CHACheckbox = driver.findElement(By.xpath("(//input[@type='checkbox'])"));
			j.executeScript("arguments[0].click();", CHACheckbox);

			/* Freight Fields */

			WebElement freightInvoiceNo = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[24]"));
			j.executeScript("arguments[0].scrollIntoView(true);", freightInvoiceNo);
			freightInvoiceNo.clear();
			freightInvoiceNo.sendKeys(UUID());

			WebElement typeOfImport = driver.findElement(By.xpath("(//app-form-select[1]//div[1]//select)[2]"));
			selectOptionByIndex(typeOfImport, 2);

			WebElement packageWeight = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[25]"));
			packageWeight.clear();
			packageWeight.sendKeys("50");

			WebElement vWeight = driver.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[26]"));
			vWeight.clear();
			vWeight.sendKeys("50");

			WebElement billingWeight = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[27]"));
			billingWeight.clear();
			billingWeight.sendKeys("50");

			WebElement basicFreight = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[28]"));
			basicFreight.clear();
			basicFreight.sendKeys("50");

			WebElement fuelSurcharge = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[29]"));
			fuelSurcharge.clear();
			fuelSurcharge.sendKeys("50");

			WebElement otherSurcharge = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[30]"));
			otherSurcharge.clear();
			otherSurcharge.sendKeys("50");

			WebElement clearanceCharges = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[31]"));
			clearanceCharges.clear();
			clearanceCharges.sendKeys("50");

			WebElement freightGST = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[32]"));
			freightGST.clear();
			freightGST.sendKeys("28");

			WebElement totalFreight = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[33]"));
			if (totalFreight.isEnabled()) {
				System.out.println("Freight Field : Field is Enabled as Not Expected");
			} else {
				System.out.println("Freight Field : Field is Disabled as Expected");
				System.out.println("Total Freight Charges : " + totalFreight.getAttribute("Value"));
			}
			WebElement freightRemarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[5]"));
			freightRemarks.clear();
			freightRemarks.sendKeys("Edited for EXW");

			/* / EXW - Import - Grid Fields/ */

			int scrollAmount = 4000;
			WebElement slickGridScroll2 = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll2);
			Thread.sleep(1000);
			j.executeScript("arguments[0].scrollLeft += arguments[1];", slickGridScroll2, scrollAmount);
			Thread.sleep(1000);

			WebElement BOEDescription = driver.findElement(
					By.xpath(".//div[contains (@class,'slick-cell l30 r30')]"));
			j.executeScript("arguments[0].click();", BOEDescription);
			WebElement BOEDescription1 = driver.findElement(By.xpath(
					".//div[contains (@class,'slick-cell l30 r30')]//input"));
			BOEDescription1.sendKeys("Edited For EXW");

			WebElement unitPrice = driver.findElement(
					By.xpath(".//div[contains (@class,'slick-cell l33 r33')]"));
			j.executeScript("arguments[0].click();", unitPrice);
			WebElement unitPrice1 = driver.findElement(By.xpath(
					".//div[contains (@class,'slick-cell l33 r33')]//input"));
			unitPrice1.sendKeys("5");

			WebElement extendedValue = driver.findElement(
					By.xpath(".//div[contains (@class,'slick-cell l34 r34')]"));
			WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
			j.executeScript("arguments[0].click();", extendedValue);
			WebElement refreshedExtendedValue = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains (@class,'slick-cell l34 r34')]")));
			String extendedValueAttribute = refreshedExtendedValue.getText();

			WebElement assessableValue = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[18]"));
			assessableValue.clear();
			assessableValue.sendKeys(extendedValueAttribute);

			WebElement HSCode = driver.findElement(
					By.xpath(".//div[contains (@class,'slick-cell l35 r35')]"));
			j.executeScript("arguments[0].click();", HSCode);
			WebElement HSCode1 = driver.findElement(By.xpath(
					".//div[contains (@class,'slick-cell l35 r35')]//input"));
			HSCode1.sendKeys("54321");

			WebElement itemType = driver.findElement(
					By.xpath(".//div[contains (@class,'slick-cell l36 r36')]"));
			j.executeScript("arguments[0].click();", itemType);
			WebElement itemType1 = driver.findElement(By.xpath(
					".//div[contains (@class,'slick-cell l36 r36')]//select"));
			selectOptionByIndex(itemType1, 1);

			WebElement rateOfDuty = driver.findElement(
					By.xpath(".//div[contains (@class,'slick-cell l37 r37')]"));
			j.executeScript("arguments[0].click();", rateOfDuty);
			WebElement rateOfDuty1 = driver.findElement(By.xpath(
					".//div[contains (@class,'slick-cell l37 r37')]//select"));
			selectOptionByIndex(rateOfDuty1, 2);

			WebElement totalDutyAmt = driver.findElement(
					By.xpath(".//div[contains (@class,'slick-cell l41 r41')]"));
			j.executeScript("arguments[0].click();", totalDutyAmt);
			WebElement refreshedtotalDutyAmt = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains (@class,'slick-cell l41 r41')]")));
			String totalDutyAttribute = refreshedtotalDutyAmt.getText();

			WebElement totalDutyAmount = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[19]"));
			totalDutyAmount.clear();
			totalDutyAmount.sendKeys(totalDutyAttribute);
		} else {
			System.out.println("Purchase Category NOT MATCHING");
		}
	}

	@When("User edit the logistics fields in logistics tile dropdown - \\(Testing & Services - Import), \\(Incoterm - EXW, Duty Exemption - YES)")
	public void user_edit_the_logistics_fields_in_logistics_tile_dropdown_testing_services_import_incoterm_exw_duty_exemption_yes()
			throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;
		// For Incoterm: "EXW" & Duty Exemption : Yes
		WebElement incoterm = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]"));
		selectOptionByIndex(incoterm, 0);

		/* /For "Import"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("0: 1"));

		if (attribute2.equals("0: 1")) {

			WebElement dutyExemption = driver.findElement(By.xpath("(//app-form-select//div//select)[1]"));
			selectOptionByIndex(dutyExemption, 0);

			WebElement customsRequestNo = driver.findElement(By.xpath("(//app-form-text//div//input)[5]"));
			if (customsRequestNo.isEnabled()) {
				System.out.println("Customs Request No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Customs Request No Field : Field is Disabled as Expected");
				System.out.println("Request No : " + customsRequestNo.getAttribute("value"));
			}

			WebElement BOENo = driver.findElement(By.xpath("(//app-form-text//div//input)[6]"));
			if (BOENo.isEnabled()) {
				System.out.println("BOE No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Customs Request No Field : Field is Disabled as Expected");
				System.out.println("BOE No : " + BOENo.getAttribute("value"));
			}

			WebElement BOEDate = driver.findElement(By.xpath("(//app-form-text//div//input)[7]"));
			if (BOEDate.isEnabled()) {
				System.out.println("BOEDate No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Customs Request No Field : Field is Disabled as Expected");
				System.out.println("BOEDate No : " + BOEDate.getAttribute("value"));
			}

			WebElement trackingNo = driver.findElement(By.xpath("(//app-form-text//div//input)[8]"));
			if (trackingNo.isEnabled()) {
				System.out.println("Tracking No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Tracking No Field : Field is Disabled as Expected");
				System.out.println("Tracking No : " + trackingNo.getAttribute("value"));
			}

			WebElement noOfPackages = driver.findElement(By.xpath("(//app-form-text//div//input)[9]"));
			if (noOfPackages.isEnabled()) {
				System.out.println("No of Packages Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("No of Packages Field : Field is Disabled as Expected");
				System.out.println("No of Packages : " + noOfPackages.getAttribute("value"));
			}

			WebElement exchangeRate = driver.findElement(By.xpath("(//app-form-text//div//input)[10]"));
			if (exchangeRate.isEnabled()) {
				System.out.println("Exchange Rate Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("No of Packages Field : Field is Disabled as Expected");
				System.out.println("Exchange Rate : " + exchangeRate.getAttribute("value"));
			}

			WebElement logisticsTileDropdown = driver.findElement(By.xpath("(//*[@id='headingTwo']/h5/button)[1]"));
			logisticsTileDropdown.click();
			Thread.sleep(3000);

			WebElement slickGridScroll = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll);

			WebElement delayReason = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[3]"));
			delayReason.clear();
			delayReason.sendKeys("Editing For EXW");

//			WebElement pickupDate = driver
//					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[1]"));
//			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
//			pickupDate.sendKeys(date2);

			WebElement logisticsRemarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[4]"));
			logisticsRemarks.clear();
			logisticsRemarks.sendKeys("Editing For EXW");

			WebElement CHACheckbox = driver.findElement(By.xpath("(//input[@type='checkbox'])"));
			j.executeScript("arguments[0].click();", CHACheckbox);

			/* Freight Fields */

			WebElement freightInvoiceNo = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[24]"));
			j.executeScript("arguments[0].scrollIntoView(true);", freightInvoiceNo);
			freightInvoiceNo.clear();
			freightInvoiceNo.sendKeys(UUID());

			WebElement typeOfImport = driver.findElement(By.xpath("(//app-form-select[1]//div[1]//select)[2]"));
			selectOptionByIndex(typeOfImport, 2);

			WebElement packageWeight = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[25]"));
			packageWeight.clear();
			packageWeight.sendKeys("50");

			WebElement vWeight = driver.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[26]"));
			vWeight.clear();
			vWeight.sendKeys("50");

			WebElement billingWeight = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[27]"));
			billingWeight.clear();
			billingWeight.sendKeys("50");

			WebElement basicFreight = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[28]"));
			basicFreight.clear();
			basicFreight.sendKeys("50");

			WebElement fuelSurcharge = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[29]"));
			fuelSurcharge.clear();
			fuelSurcharge.sendKeys("50");

			WebElement otherSurcharge = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[30]"));
			otherSurcharge.clear();
			otherSurcharge.sendKeys("50");

			WebElement clearanceCharges = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[31]"));
			clearanceCharges.clear();
			clearanceCharges.sendKeys("50");

			WebElement freightGST = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[32]"));
			freightGST.clear();
			freightGST.sendKeys("28");

			WebElement totalFreight = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[33]"));
			if (totalFreight.isEnabled()) {
				System.out.println("Freight Field : Field is Enabled as Not Expected");
			} else {
				System.out.println("Freight Field : Field is Disabled as Expected");
				System.out.println("Total Freight Charges : " + totalFreight.getAttribute("Value"));
			}
			WebElement freightRemarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[5]"));
			freightRemarks.clear();
			freightRemarks.sendKeys("Edited for EXW");

			/* / EXW - Import - Grid Fields/ */

			int scrollAmount = 4000;
			WebElement slickGridScroll2 = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll2);
			Thread.sleep(1000);
			j.executeScript("arguments[0].scrollLeft += arguments[1];", slickGridScroll2, scrollAmount);
			Thread.sleep(1000);

			WebElement BOEDescription = driver.findElement(
					By.xpath(".//div [contains (@class, 'slick-cell l28 r28')]"));
			j.executeScript("arguments[0].click();", BOEDescription);
			WebElement BOEDescription1 = driver.findElement(By.xpath(
					".//div [contains (@class, 'slick-cell l28 r28')]//input"));
			BOEDescription1.sendKeys("Edited For EXW");

			WebElement unitPrice = driver.findElement(
					By.xpath(".//div [contains (@class, 'slick-cell l31 r31')]"));
			j.executeScript("arguments[0].click();", unitPrice);
			WebElement unitPrice1 = driver.findElement(By.xpath(
					".//div [contains (@class, 'slick-cell l31 r31')]//input"));
			unitPrice1.sendKeys("5");

			WebElement extendedValue = driver.findElement(
					By.xpath(".//div [contains (@class, 'slick-cell l32 r32')]"));
			WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
			j.executeScript("arguments[0].click();", extendedValue);
			WebElement refreshedExtendedValue = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div [contains (@class, 'slick-cell l32 r32')]")));
			String extendedValueAttribute = refreshedExtendedValue.getText();

			WebElement assessableValue = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[18]"));
			assessableValue.clear();
			assessableValue.sendKeys(extendedValueAttribute);

			WebElement HSCode = driver.findElement(
					By.xpath(".//div [contains (@class, 'slick-cell l33 r33')]"));
			j.executeScript("arguments[0].click();", HSCode);
			WebElement HSCode1 = driver.findElement(By.xpath(
					".//div [contains (@class, 'slick-cell l33 r33')]//input"));
			HSCode1.sendKeys("54321");

			WebElement itemType = driver.findElement(
					By.xpath(".//div [contains (@class, 'slick-cell l34 r34')]"));
			j.executeScript("arguments[0].click();", itemType);
			WebElement itemType1 = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div [contains (@class, 'slick-cell l34 r34')]//select")));
			selectOptionByIndex(itemType1, 1);

			WebElement rateOfDuty = driver.findElement(
					By.xpath(".//div [contains (@class, 'slick-cell l35 r35')]"));
			j.executeScript("arguments[0].click();", rateOfDuty);
			WebElement rateOfDuty1 = driver.findElement(By.xpath(
					".//div [contains (@class, 'slick-cell l35 r35')]//select"));
			selectOptionByIndex(rateOfDuty1, 2);

			WebElement totalDutyAmt = driver.findElement(
					By.xpath(".//div [contains (@class, 'slick-cell l39 r39')]"));
			j.executeScript("arguments[0].click();", totalDutyAmt);
			WebElement refreshedtotalDutyAmt = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div [contains (@class, 'slick-cell l39 r39')]")));
			String totalDutyAttribute = refreshedtotalDutyAmt.getText();

			WebElement totalDutyAmount = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[19]"));
			totalDutyAmount.clear();
			totalDutyAmount.sendKeys(totalDutyAttribute);
		} else {
			System.out.println("Purchase Category NOT MATCHING");
		}
	}

	@When("User edit the logistics fields in logistics tile dropdown  - \\(PO Order - NPM - Import), \\(Incoterm - EXW, Duty Exemption - YES)")
	public void user_edit_the_logistics_fields_in_logistics_tile_dropdown_po_order_npm_import_incoterm_exw_duty_exemption_yes()
			throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;
		// For Incoterm: "EXW" & Duty Exemption : Yes
		WebElement incoterm = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]"));
		selectOptionByIndex(incoterm, 0);

		/* /For "Import"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("0: 1"));

		if (attribute2.equals("0: 1")) {

			WebElement dutyExemption = driver.findElement(By.xpath("(//app-form-select//div//select)[1]"));
			selectOptionByIndex(dutyExemption, 0);

			WebElement customsRequestNo = driver.findElement(By.xpath("(//app-form-text//div//input)[5]"));
			if (customsRequestNo.isEnabled()) {
				System.out.println("Customs Request No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Customs Request No Field : Field is Disabled as Expected");
				System.out.println("Request No : " + customsRequestNo.getAttribute("value"));
			}

			WebElement BOENo = driver.findElement(By.xpath("(//app-form-text//div//input)[6]"));
			if (BOENo.isEnabled()) {
				System.out.println("BOE No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Customs Request No Field : Field is Disabled as Expected");
				System.out.println("BOE No : " + BOENo.getAttribute("value"));
			}

			WebElement BOEDate = driver.findElement(By.xpath("(//app-form-text//div//input)[7]"));
			if (BOEDate.isEnabled()) {
				System.out.println("BOEDate No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Customs Request No Field : Field is Disabled as Expected");
				System.out.println("BOEDate No : " + BOEDate.getAttribute("value"));
			}

			WebElement trackingNo = driver.findElement(By.xpath("(//app-form-text//div//input)[8]"));
			if (trackingNo.isEnabled()) {
				System.out.println("Tracking No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Tracking No Field : Field is Disabled as Expected");
				System.out.println("Tracking No : " + trackingNo.getAttribute("value"));
			}

			WebElement noOfPackages = driver.findElement(By.xpath("(//app-form-text//div//input)[9]"));
			if (noOfPackages.isEnabled()) {
				System.out.println("No of Packages Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("No of Packages Field : Field is Disabled as Expected");
				System.out.println("No of Packages : " + noOfPackages.getAttribute("value"));
			}

			WebElement exchangeRate = driver.findElement(By.xpath("(//app-form-text//div//input)[10]"));
			if (exchangeRate.isEnabled()) {
				System.out.println("Exchange Rate Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("No of Packages Field : Field is Disabled as Expected");
				System.out.println("Exchange Rate : " + exchangeRate.getAttribute("value"));
			}

			WebElement logisticsTileDropdown = driver.findElement(By.xpath("(//*[@id='headingTwo']/h5/button)[1]"));
			logisticsTileDropdown.click();
			Thread.sleep(3000);

			WebElement slickGridScroll = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll);

			WebElement delayReason = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[3]"));
			delayReason.clear();
			delayReason.sendKeys("Editing For EXW");

//			WebElement pickupDate = driver
//					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[1]"));
//			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
//			pickupDate.sendKeys(date2);

			WebElement logisticsRemarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[4]"));
			logisticsRemarks.clear();
			logisticsRemarks.sendKeys("Editing For EXW");

			WebElement CHACheckbox = driver.findElement(By.xpath("(//input[@type='checkbox'])"));
			j.executeScript("arguments[0].click();", CHACheckbox);

			/* Freight Fields */

			WebElement freightInvoiceNo = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[24]"));
			j.executeScript("arguments[0].scrollIntoView(true);", freightInvoiceNo);
			freightInvoiceNo.clear();
			freightInvoiceNo.sendKeys(UUID());

			WebElement typeOfImport = driver.findElement(By.xpath("(//app-form-select[1]//div[1]//select)[2]"));
			selectOptionByIndex(typeOfImport, 2);

			WebElement packageWeight = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[25]"));
			packageWeight.clear();
			packageWeight.sendKeys("50");

			WebElement vWeight = driver.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[26]"));
			vWeight.clear();
			vWeight.sendKeys("50");

			WebElement billingWeight = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[27]"));
			billingWeight.clear();
			billingWeight.sendKeys("50");

			WebElement basicFreight = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[28]"));
			basicFreight.clear();
			basicFreight.sendKeys("50");

			WebElement fuelSurcharge = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[29]"));
			fuelSurcharge.clear();
			fuelSurcharge.sendKeys("50");

			WebElement otherSurcharge = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[30]"));
			otherSurcharge.clear();
			otherSurcharge.sendKeys("50");

			WebElement clearanceCharges = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[31]"));
			clearanceCharges.clear();
			clearanceCharges.sendKeys("50");

			WebElement freightGST = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[32]"));
			freightGST.clear();
			freightGST.sendKeys("28");

			WebElement totalFreight = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[33]"));
			if (totalFreight.isEnabled()) {
				System.out.println("Freight Field : Field is Enabled as Not Expected");
			} else {
				System.out.println("Freight Field : Field is Disabled as Expected");
				System.out.println("Total Freight Charges : " + totalFreight.getAttribute("Value"));
			}
			WebElement freightRemarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[5]"));
			freightRemarks.clear();
			freightRemarks.sendKeys("Edited for EXW");

			/* / EXW - Import - Grid Fields/ */

			int scrollAmount = 4000;
			WebElement slickGridScroll2 = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll2);
			Thread.sleep(1000);
			j.executeScript("arguments[0].scrollLeft += arguments[1];", slickGridScroll2, scrollAmount);
			Thread.sleep(1000);

			WebElement BOEDescription = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l27 r27')]"));
			j.executeScript("arguments[0].click();", BOEDescription);
			WebElement BOEDescription1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l27 r27')]//input"));
			BOEDescription1.sendKeys("Edited For EXW");

			WebElement unitPrice = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l30 r30')]"));
			j.executeScript("arguments[0].click();", unitPrice);
			WebElement unitPrice1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l30 r30')]//input"));
			unitPrice1.sendKeys("5");

			WebElement extendedValue = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l31 r31')]"));
			WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
			j.executeScript("arguments[0].click();", extendedValue);
			WebElement refreshedExtendedValue = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains (@class, 'slick-cell l31 r31')]")));
			String extendedValueAttribute = refreshedExtendedValue.getText();

			WebElement assessableValue = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[18]"));
			assessableValue.clear();
			assessableValue.sendKeys(extendedValueAttribute);

			WebElement HSCode = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l32 r32')]"));
			j.executeScript("arguments[0].click();", HSCode);
			WebElement HSCode1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l32 r32')]//input"));
			HSCode1.sendKeys("54321");

			WebElement itemType = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l33 r33')]"));
			j.executeScript("arguments[0].click();", itemType);
			WebElement itemType1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l33 r33')]//select"));
			selectOptionByIndex(itemType1, 1);

			WebElement rateOfDuty = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l34 r34')]"));
			j.executeScript("arguments[0].click();", rateOfDuty);
			WebElement rateOfDuty1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l34 r34')]//select"));
			selectOptionByIndex(rateOfDuty1, 2);

			WebElement totalDutyAmt = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l38 r38')]"));
			j.executeScript("arguments[0].click();", totalDutyAmt);
			WebElement refreshedtotalDutyAmt = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains (@class, 'slick-cell l38 r38')]")));
			String totalDutyAttribute = refreshedtotalDutyAmt.getText();

			WebElement totalDutyAmount = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[19]"));
			totalDutyAmount.clear();
			totalDutyAmount.sendKeys(totalDutyAttribute);
		} else {
			System.out.println("Purchase Category NOT MATCHING");
		}
	}

	@When("User edit the logistics fields in logistics tile dropdown  - \\(PO Order - RM - Domestic), \\(Incoterm - FCA, Duty Exemption - YES)")
	public void user_edit_the_logistics_fields_in_logistics_tile_dropdown_po_order_rm_domestic_incoterm_fca_duty_exemption_yes()
			throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;
		// For Incoterm: "FCA" & Duty Exemption : "YES"
		WebElement incoterm = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]"));
		selectOptionByIndex(incoterm, 1);

		/* /For "Domestic"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("1: 2"));

		if (attribute2.equals("1: 2")) {

			WebElement dutyExemption = driver.findElement(By.xpath("(//app-form-select//div//select)[1]"));
			selectOptionByIndex(dutyExemption, 0);

			WebElement DTAP_Applicable = driver.findElement(By.xpath("(//app-form-select//div//select)[2]"));
			selectOptionByIndex(DTAP_Applicable, 0);

			WebElement customsRequestNo = driver.findElement(By.xpath("(//app-form-text//div//input)[5]"));
			customsRequestNo.clear();
			customsRequestNo.sendKeys("1");

			WebElement BOENo = driver.findElement(By.xpath("(//app-form-text//div//input)[6]"));
			BOENo.clear();
			BOENo.sendKeys("2");

			WebElement BOEDate = driver.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[1]"));
			String date = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			BOEDate.sendKeys(date);

			WebElement trackingNo = driver.findElement(By.xpath("(//app-form-text//div//input)[7]"));
			if (trackingNo.isEnabled()) {
				System.out.println("Tracking No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Tracking No Field : Field is Disabled as Expected");
				System.out.println("Tracking No : " + trackingNo.getAttribute("value"));
			}

			WebElement noOfPackages = driver.findElement(By.xpath("(//app-form-text//div//input)[8]"));
			if (noOfPackages.isEnabled()) {
				System.out.println("No of Packages Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("No of Packages Field : Field is Disabled as Expected");
				System.out.println("No of Packages : " + noOfPackages.getAttribute("value"));
			}

			WebElement logisticsTileDropdown = driver.findElement(By.xpath("(//*[@id='headingTwo']/h5/button)[1]"));
			logisticsTileDropdown.click();
			Thread.sleep(3000);

			WebElement slickGridScroll = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll);

			WebElement customDuty = driver.findElement(By.xpath("(//app-form-text//div//input)[18]"));
			if (customDuty.isEnabled()) {
				System.out.println("Custom Duty Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Custom Duty Field : Field is Disabled as Expected");
				System.out.println("Custom Duty : " + customDuty.getAttribute("value"));
			}

			WebElement dutyInvoiceNo = driver.findElement(By.xpath("(//app-form-text//div//input)[19]"));
			if (dutyInvoiceNo.isEnabled()) {
				System.out.println("Duty Invoice No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Duty Invoice No Field : Field is Disabled as Expected");
				System.out.println("Duty Invoice No : " + dutyInvoiceNo.getAttribute("value"));
			}

			WebElement dutyInvoiceDate = driver.findElement(By.xpath("(//app-form-text//div//input)[20]"));
			if (dutyInvoiceDate.isEnabled()) {
				System.out.println("Duty Invoice Date Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Duty Invoice Date Field : Field is Disabled as Expected");
				System.out.println("Duty Invoice Date : " + dutyInvoiceDate.getAttribute("value"));
			}

			WebElement aging = driver.findElement(By.xpath("(//app-form-text//div//input)[21]"));
			if (aging.isEnabled()) {
				System.out.println("Aging Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Aging Field : Field is Disabled as Expected");
				System.out.println("Aging : " + aging.getAttribute("value"));
			}

			WebElement delayReason = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[3]"));
			delayReason.clear();
			delayReason.sendKeys("Editing For FCA");

//			WebElement pickupDate = driver
//					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[2]"));
//			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
//			pickupDate.sendKeys(date2);

			WebElement logisticsRemarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[4]"));
			logisticsRemarks.clear();
			logisticsRemarks.sendKeys("Editing For FCA");

			/* Freight Fields */

			WebElement freightInvoiceNo = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[22]"));
			j.executeScript("arguments[0].scrollIntoView(true);", freightInvoiceNo);
			freightInvoiceNo.clear();
			freightInvoiceNo.sendKeys(UUID());

			WebElement typeOfImport = driver.findElement(By.xpath("(//app-form-select//div//select)[3]"));
			selectOptionByIndex(typeOfImport, 2);

			WebElement packageWeight = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[23]"));
			packageWeight.clear();
			packageWeight.sendKeys("50");

			WebElement vWeight = driver.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[24]"));
			vWeight.clear();
			vWeight.sendKeys("50");

			WebElement billingWeight = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[25]"));
			billingWeight.clear();
			billingWeight.sendKeys("50");

			WebElement basicFreight = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[26]"));
			basicFreight.clear();
			basicFreight.sendKeys("50");

			WebElement fuelSurcharge = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[27]"));
			fuelSurcharge.clear();
			fuelSurcharge.sendKeys("50");

			WebElement otherSurcharge = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[28]"));
			otherSurcharge.clear();
			otherSurcharge.sendKeys("50");

			WebElement clearanceCharges = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[29]"));
			clearanceCharges.clear();
			clearanceCharges.sendKeys("50");

			WebElement freightGST = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[30]"));
			freightGST.clear();
			freightGST.sendKeys("28");

			WebElement totalFreight = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[31]"));
			if (totalFreight.isEnabled()) {
				System.out.println("Total Freight Field : Field is Enabled as Not Expected");
			} else {
				System.out.println("Total Freight Field : Field is Disabled as Expected");
				System.out.println("Total Freight Charges : " + totalFreight.getAttribute("Value"));
			}
			WebElement freightRemarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[5]"));
			freightRemarks.clear();
			freightRemarks.sendKeys("Edited for FCA");

			/* / FCA - Domestic - Grid Fields/ */

			int scrollAmount = 4000;
			WebElement slickGridScroll2 = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll2);
			Thread.sleep(1000);
			j.executeScript("arguments[0].scrollLeft += arguments[1];", slickGridScroll2, scrollAmount);
			Thread.sleep(1000);

			WebElement BOEDescription = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l30 r30')]"));
			j.executeScript("arguments[0].click();", BOEDescription);
			WebElement BOEDescription1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l30 r30')]//input"));
			BOEDescription1.sendKeys("Edited For FCA");

			WebElement extendedValue = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l34 r34')]"));
			WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
			j.executeScript("arguments[0].click();", extendedValue);
			WebElement refreshedExtendedValue = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains (@class, 'slick-cell l34 r34')]")));
			String extendedValueAttribute = refreshedExtendedValue.getText();

			WebElement assessableValue = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[16]"));
			assessableValue.clear();
			assessableValue.sendKeys(extendedValueAttribute);

			WebElement HSCode = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l35 r35')]"));
			j.executeScript("arguments[0].click();", HSCode);
			WebElement HSCode1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l35 r35')]//input"));
			HSCode1.sendKeys("54321");

			WebElement itemType = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l36 r36')]"));
			j.executeScript("arguments[0].click();", itemType);
			WebElement itemType1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l36 r36')]//select"));
			selectOptionByIndex(itemType1, 1);

			WebElement rateOfDuty = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l37 r37')]"));
			j.executeScript("arguments[0].click();", rateOfDuty);
			WebElement rateOfDuty1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l37 r37')]//select"));
			selectOptionByIndex(rateOfDuty1, 2);

			WebElement totalDutyAmt = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l39 r39')]"));
			j.executeScript("arguments[0].click();", totalDutyAmt);
			WebElement refreshedtotalDutyAmt = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains (@class, 'slick-cell l39 r39')]")));
			String totalDutyAttribute = refreshedtotalDutyAmt.getText();

			WebElement totalDutyAmount = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[17]"));
			totalDutyAmount.clear();
			totalDutyAmount.sendKeys(totalDutyAttribute);
		} else {
			System.out.println("Purchase Category NOT MATCHING");
		}
	}

	@When("User edit the logistics fields in logistics tile dropdown - \\(Testing & Services - Domestic), \\(Incoterm - FCA, Duty Exemption - YES)")
	public void user_edit_the_logistics_fields_in_logistics_tile_dropdown_testing_services_domestic_incoterm_fca_duty_exemption_yes()
			throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;
		// For Incoterm: "FCA" & Duty Exemption : "YES"
		WebElement incoterm = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]"));
		selectOptionByIndex(incoterm, 1);

		/* /For "Domestic"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("1: 2"));

		if (attribute2.equals("1: 2")) {

			WebElement dutyExemption = driver.findElement(By.xpath("(//app-form-select//div//select)[1]"));
			selectOptionByIndex(dutyExemption, 0);

			WebElement DTAP_Applicable = driver.findElement(By.xpath("(//app-form-select//div//select)[2]"));
			selectOptionByIndex(DTAP_Applicable, 0);

			WebElement customsRequestNo = driver.findElement(By.xpath("(//app-form-text//div//input)[5]"));
			customsRequestNo.clear();
			customsRequestNo.sendKeys("1");

			WebElement BOENo = driver.findElement(By.xpath("(//app-form-text//div//input)[6]"));
			BOENo.clear();
			BOENo.sendKeys("2");

			WebElement BOEDate = driver.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[1]"));
			String date = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			BOEDate.sendKeys(date);

			WebElement trackingNo = driver.findElement(By.xpath("(//app-form-text//div//input)[7]"));
			if (trackingNo.isEnabled()) {
				System.out.println("Tracking No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Tracking No Field : Field is Disabled as Expected");
				System.out.println("Tracking No : " + trackingNo.getAttribute("value"));
			}

			WebElement noOfPackages = driver.findElement(By.xpath("(//app-form-text//div//input)[8]"));
			if (noOfPackages.isEnabled()) {
				System.out.println("No of Packages Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("No of Packages Field : Field is Disabled as Expected");
				System.out.println("No of Packages : " + noOfPackages.getAttribute("value"));
			}

			WebElement logisticsTileDropdown = driver.findElement(By.xpath("(//*[@id='headingTwo']/h5/button)[1]"));
			logisticsTileDropdown.click();
			Thread.sleep(3000);

			WebElement slickGridScroll = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll);

			WebElement customDuty = driver.findElement(By.xpath("(//app-form-text//div//input)[18]"));
			if (customDuty.isEnabled()) {
				System.out.println("Custom Duty Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Custom Duty Field : Field is Disabled as Expected");
				System.out.println("Custom Duty : " + customDuty.getAttribute("value"));
			}

			WebElement dutyInvoiceNo = driver.findElement(By.xpath("(//app-form-text//div//input)[19]"));
			if (dutyInvoiceNo.isEnabled()) {
				System.out.println("Duty Invoice No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Duty Invoice No Field : Field is Disabled as Expected");
				System.out.println("Duty Invoice No : " + dutyInvoiceNo.getAttribute("value"));
			}

			WebElement dutyInvoiceDate = driver.findElement(By.xpath("(//app-form-text//div//input)[20]"));
			if (dutyInvoiceDate.isEnabled()) {
				System.out.println("Duty Invoice Date Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Duty Invoice Date Field : Field is Disabled as Expected");
				System.out.println("Duty Invoice Date : " + dutyInvoiceDate.getAttribute("value"));
			}

			WebElement aging = driver.findElement(By.xpath("(//app-form-text//div//input)[21]"));
			if (aging.isEnabled()) {
				System.out.println("Aging Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Aging Field : Field is Disabled as Expected");
				System.out.println("Aging : " + aging.getAttribute("value"));
			}

			WebElement delayReason = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[3]"));
			delayReason.clear();
			delayReason.sendKeys("Editing For FCA");

//			WebElement pickupDate = driver
//					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[2]"));
//			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
//			pickupDate.sendKeys(date2);

			WebElement logisticsRemarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[4]"));
			logisticsRemarks.clear();
			logisticsRemarks.sendKeys("Editing For FCA");

			/* Freight Fields */

			WebElement freightInvoiceNo = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[22]"));
			j.executeScript("arguments[0].scrollIntoView(true);", freightInvoiceNo);
			freightInvoiceNo.clear();
			freightInvoiceNo.sendKeys(UUID());

			WebElement typeOfImport = driver.findElement(By.xpath("(//app-form-select//div//select)[3]"));
			selectOptionByIndex(typeOfImport, 2);

			WebElement packageWeight = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[23]"));
			packageWeight.clear();
			packageWeight.sendKeys("50");

			WebElement vWeight = driver.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[24]"));
			vWeight.clear();
			vWeight.sendKeys("50");

			WebElement billingWeight = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[25]"));
			billingWeight.clear();
			billingWeight.sendKeys("50");

			WebElement basicFreight = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[26]"));
			basicFreight.clear();
			basicFreight.sendKeys("50");

			WebElement fuelSurcharge = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[27]"));
			fuelSurcharge.clear();
			fuelSurcharge.sendKeys("50");

			WebElement otherSurcharge = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[28]"));
			otherSurcharge.clear();
			otherSurcharge.sendKeys("50");

			WebElement clearanceCharges = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[29]"));
			clearanceCharges.clear();
			clearanceCharges.sendKeys("50");

			WebElement freightGST = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[30]"));
			freightGST.clear();
			freightGST.sendKeys("28");

			WebElement totalFreight = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[31]"));
			if (totalFreight.isEnabled()) {
				System.out.println("Total Freight Field : Field is Enabled as Not Expected");
			} else {
				System.out.println("Total Freight Field : Field is Disabled as Expected");
				System.out.println("Total Freight Charges : " + totalFreight.getAttribute("Value"));
			}
			WebElement freightRemarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[5]"));
			freightRemarks.clear();
			freightRemarks.sendKeys("Edited for FCA");

			/* / FCA - Domestic - Grid Fields/ */

			int scrollAmount = 4000;
			WebElement slickGridScroll2 = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll2);
			Thread.sleep(1000);
			j.executeScript("arguments[0].scrollLeft += arguments[1];", slickGridScroll2, scrollAmount);
			Thread.sleep(1000);

			WebElement BOEDescription = driver.findElement(
					By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l28 r28']"));
			j.executeScript("arguments[0].click();", BOEDescription);
			WebElement BOEDescription1 = driver.findElement(By.xpath(
					"//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l28 r28 active editable selected']//input"));
			BOEDescription1.sendKeys("Edited For FCA");

			WebElement extendedValue = driver.findElement(
					By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l32 r32 selected']"));
			WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
			j.executeScript("arguments[0].click();", extendedValue);
			WebElement refreshedExtendedValue = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					"//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l32 r32 selected active']")));
			String extendedValueAttribute = refreshedExtendedValue.getText();

			WebElement assessableValue = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[16]"));
			assessableValue.clear();
			assessableValue.sendKeys(extendedValueAttribute);

			WebElement HSCode = driver.findElement(
					By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l33 r33 selected']"));
			j.executeScript("arguments[0].click();", HSCode);
			WebElement HSCode1 = driver.findElement(By.xpath(
					"//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l33 r33 selected active editable']//input"));
			HSCode1.sendKeys("54321");

			WebElement itemType = driver.findElement(
					By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l34 r34 selected']"));
			j.executeScript("arguments[0].click();", itemType);
			WebElement itemType1 = driver.findElement(By.xpath(
					"//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l34 r34 selected active editable']//select"));
			selectOptionByIndex(itemType1, 1);

			WebElement rateOfDuty = driver.findElement(
					By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l35 r35 selected']"));
			j.executeScript("arguments[0].click();", rateOfDuty);
			WebElement rateOfDuty1 = driver.findElement(By.xpath(
					"//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l35 r35 selected active editable']//select"));
			selectOptionByIndex(rateOfDuty1, 2);

			WebElement totalDutyAmt = driver.findElement(
					By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l37 r37 selected']"));
			j.executeScript("arguments[0].click();", totalDutyAmt);
			WebElement refreshedtotalDutyAmt = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					"//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l37 r37 selected active']")));
			String totalDutyAttribute = refreshedtotalDutyAmt.getText();

			WebElement totalDutyAmount = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[17]"));
			totalDutyAmount.clear();
			totalDutyAmount.sendKeys(totalDutyAttribute);
		} else {
			System.out.println("Purchase Category NOT MATCHING");
		}
	}

	@When("User edit the logistics fields in logistics tile dropdown - \\(CSM - Domestic), \\(Incoterm - FCA, Duty Exemption - YES)")
	public void user_edit_the_logistics_fields_in_logistics_tile_dropdown_csm_domestic_incoterm_fca_duty_exemption_yes()
			throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;
		// For Incoterm: "FCA" & Duty Exemption : "YES"
		WebElement incoterm = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]"));
		selectOptionByIndex(incoterm, 1);

		/* /For "Domestic"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("1: 2"));

		if (attribute2.equals("1: 2")) {

			WebElement dutyExemption = driver.findElement(By.xpath("(//app-form-select//div//select)[1]"));
			selectOptionByIndex(dutyExemption, 0);

			WebElement DTAP_Applicable = driver.findElement(By.xpath("(//app-form-select//div//select)[2]"));
			selectOptionByIndex(DTAP_Applicable, 0);

			WebElement customsRequestNo = driver.findElement(By.xpath("(//app-form-text//div//input)[5]"));
			customsRequestNo.clear();
			customsRequestNo.sendKeys("1");

			WebElement BOENo = driver.findElement(By.xpath("(//app-form-text//div//input)[6]"));
			BOENo.clear();
			BOENo.sendKeys("2");

			WebElement BOEDate = driver.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[1]"));
			String date = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			BOEDate.sendKeys(date);

			WebElement trackingNo = driver.findElement(By.xpath("(//app-form-text//div//input)[7]"));
			if (trackingNo.isEnabled()) {
				System.out.println("Tracking No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Tracking No Field : Field is Disabled as Expected");
				System.out.println("Tracking No : " + trackingNo.getAttribute("value"));
			}

			WebElement noOfPackages = driver.findElement(By.xpath("(//app-form-text//div//input)[8]"));
			if (noOfPackages.isEnabled()) {
				System.out.println("No of Packages Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("No of Packages Field : Field is Disabled as Expected");
				System.out.println("No of Packages : " + noOfPackages.getAttribute("value"));
			}

			WebElement logisticsTileDropdown = driver.findElement(By.xpath("(//*[@id='headingTwo']/h5/button)[1]"));
			logisticsTileDropdown.click();
			Thread.sleep(3000);

			WebElement slickGridScroll = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll);

			WebElement customDuty = driver.findElement(By.xpath("(//app-form-text//div//input)[18]"));
			if (customDuty.isEnabled()) {
				System.out.println("Custom Duty Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Custom Duty Field : Field is Disabled as Expected");
				System.out.println("Custom Duty : " + customDuty.getAttribute("value"));
			}

			WebElement dutyInvoiceNo = driver.findElement(By.xpath("(//app-form-text//div//input)[19]"));
			if (dutyInvoiceNo.isEnabled()) {
				System.out.println("Duty Invoice No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Duty Invoice No Field : Field is Disabled as Expected");
				System.out.println("Duty Invoice No : " + dutyInvoiceNo.getAttribute("value"));
			}

			WebElement dutyInvoiceDate = driver.findElement(By.xpath("(//app-form-text//div//input)[20]"));
			if (dutyInvoiceDate.isEnabled()) {
				System.out.println("Duty Invoice Date Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Duty Invoice Date Field : Field is Disabled as Expected");
				System.out.println("Duty Invoice Date : " + dutyInvoiceDate.getAttribute("value"));
			}

			WebElement aging = driver.findElement(By.xpath("(//app-form-text//div//input)[21]"));
			if (aging.isEnabled()) {
				System.out.println("Aging Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Aging Field : Field is Disabled as Expected");
				System.out.println("Aging : " + aging.getAttribute("value"));
			}

			WebElement delayReason = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[2]"));
			delayReason.clear();
			delayReason.sendKeys("Editing For FCA");

//			WebElement pickupDate = driver
//					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[2]"));
//			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
//			pickupDate.sendKeys(date2);

			WebElement logisticsRemarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[3]"));
			logisticsRemarks.clear();
			logisticsRemarks.sendKeys("Editing For FCA");

			/* Freight Fields */

			WebElement freightInvoiceNo = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[22]"));
			j.executeScript("arguments[0].scrollIntoView(true);", freightInvoiceNo);
			freightInvoiceNo.clear();
			freightInvoiceNo.sendKeys(UUID());

			WebElement typeOfImport = driver.findElement(By.xpath("(//app-form-select//div//select)[3]"));
			selectOptionByIndex(typeOfImport, 2);

			WebElement packageWeight = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[23]"));
			packageWeight.clear();
			packageWeight.sendKeys("50");

			WebElement vWeight = driver.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[24]"));
			vWeight.clear();
			vWeight.sendKeys("50");

			WebElement billingWeight = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[25]"));
			billingWeight.clear();
			billingWeight.sendKeys("50");

			WebElement basicFreight = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[26]"));
			basicFreight.clear();
			basicFreight.sendKeys("50");

			WebElement fuelSurcharge = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[27]"));
			fuelSurcharge.clear();
			fuelSurcharge.sendKeys("50");

			WebElement otherSurcharge = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[28]"));
			otherSurcharge.clear();
			otherSurcharge.sendKeys("50");

			WebElement clearanceCharges = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[29]"));
			clearanceCharges.clear();
			clearanceCharges.sendKeys("50");

			WebElement freightGST = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[30]"));
			freightGST.clear();
			freightGST.sendKeys("28");

			WebElement totalFreight = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[31]"));
			if (totalFreight.isEnabled()) {
				System.out.println("Total Freight Field : Field is Enabled as Not Expected");
			} else {
				System.out.println("Total Freight Field : Field is Disabled as Expected");
				System.out.println("Total Freight Charges : " + totalFreight.getAttribute("Value"));
			}
			WebElement freightRemarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[4]"));
			freightRemarks.clear();
			freightRemarks.sendKeys("Edited for FCA");

			/* / FCA - Domestic - Grid Fields/ */

			int scrollAmount = 4000;
			WebElement slickGridScroll2 = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll2);
			Thread.sleep(1000);
			j.executeScript("arguments[0].scrollLeft += arguments[1];", slickGridScroll2, scrollAmount);
			Thread.sleep(1000);

			WebElement BOEDescription = driver.findElement(
					By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l25 r25']"));
			j.executeScript("arguments[0].click();", BOEDescription);
			WebElement BOEDescription1 = driver.findElement(By.xpath(
					"//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l25 r25 active editable selected']//input"));
			BOEDescription1.sendKeys("Edited For FCA");

			WebElement extendedValue = driver.findElement(
					By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l29 r29 selected']"));
			WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
			j.executeScript("arguments[0].click();", extendedValue);
			WebElement refreshedExtendedValue = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					"//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l29 r29 active selected']")));
			String extendedValueAttribute = refreshedExtendedValue.getText();

			WebElement assessableValue = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[16]"));
			assessableValue.clear();
			assessableValue.sendKeys(extendedValueAttribute);

			WebElement HSCode = driver.findElement(
					By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l30 r30 selected']"));
			j.executeScript("arguments[0].click();", HSCode);
			WebElement HSCode1 = driver.findElement(By.xpath(
					"//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l30 r30 selected active editable']//input"));
			HSCode1.sendKeys("54321");

			WebElement itemType = driver.findElement(
					By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l31 r31 selected']"));
			j.executeScript("arguments[0].click();", itemType);
			Thread.sleep(500);
			try {
				itemType = driver.findElement(By.xpath(
						"//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l31 r31 active selected']"));
				j.executeScript("arguments[0].click();", itemType);
			} catch (StaleElementReferenceException e) {
				j.executeScript("arguments[0].click();", itemType);
			}
			WebElement itemType1 = driver.findElement(By.xpath(
					"//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l31 r31 selected active editable']//select"));
			selectOptionByIndex(itemType1, 1);

			WebElement rateOfDuty = driver.findElement(
					By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l32 r32 selected']"));
			j.executeScript("arguments[0].click();", rateOfDuty);
			Thread.sleep(500);
			try {
				rateOfDuty = driver.findElement(By.xpath(
						"//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l32 r32 active selected']"));
				j.executeScript("arguments[0].click();", rateOfDuty);
			} catch (StaleElementReferenceException e) {
				j.executeScript("arguments[0].click();", rateOfDuty);
			}
			WebElement rateOfDuty1 = driver.findElement(By.xpath(
					"//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l32 r32 selected active editable']//select"));
			selectOptionByIndex(rateOfDuty1, 2);

			WebElement totalDutyAmt = driver.findElement(
					By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l34 r34 selected']"));
			j.executeScript("arguments[0].click();", totalDutyAmt);
			WebElement refreshedtotalDutyAmt = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					"//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l34 r34 active selected']")));
			String totalDutyAttribute = refreshedtotalDutyAmt.getText();

			WebElement totalDutyAmount = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[17]"));
			totalDutyAmount.clear();
			totalDutyAmount.sendKeys(totalDutyAttribute);
		} else {
			System.out.println("Purchase Category NOT MATCHING");
		}
	}

	@When("User edit the logistics fields in logistics tile dropdown  - \\(PO Order - NPM - Domestic), \\(Incoterm - FCA, Duty Exemption - YES)")
	public void user_edit_the_logistics_fields_in_logistics_tile_dropdown_po_order_npm_domestic_incoterm_fca_duty_exemption_yes()
			throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;
		// For Incoterm: "FCA" & Duty Exemption : "YES"
		WebElement incoterm = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]"));
		selectOptionByIndex(incoterm, 1);

		/* /For "Domestic"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("1: 2"));

		if (attribute2.equals("1: 2")) {

			WebElement dutyExemption = driver.findElement(By.xpath("(//app-form-select//div//select)[1]"));
			selectOptionByIndex(dutyExemption, 0);

			WebElement DTAP_Applicable = driver.findElement(By.xpath("(//app-form-select//div//select)[2]"));
			selectOptionByIndex(DTAP_Applicable, 0);

			WebElement customsRequestNo = driver.findElement(By.xpath("(//app-form-text//div//input)[5]"));
			customsRequestNo.clear();
			customsRequestNo.sendKeys("1");

			WebElement BOENo = driver.findElement(By.xpath("(//app-form-text//div//input)[6]"));
			BOENo.clear();
			BOENo.sendKeys("2");

			WebElement BOEDate = driver.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[1]"));
			String date = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			BOEDate.sendKeys(date);

			WebElement trackingNo = driver.findElement(By.xpath("(//app-form-text//div//input)[7]"));
			if (trackingNo.isEnabled()) {
				System.out.println("Tracking No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Tracking No Field : Field is Disabled as Expected");
				System.out.println("Tracking No : " + trackingNo.getAttribute("value"));
			}

			WebElement noOfPackages = driver.findElement(By.xpath("(//app-form-text//div//input)[8]"));
			if (noOfPackages.isEnabled()) {
				System.out.println("No of Packages Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("No of Packages Field : Field is Disabled as Expected");
				System.out.println("No of Packages : " + noOfPackages.getAttribute("value"));
			}

			WebElement logisticsTileDropdown = driver.findElement(By.xpath("(//*[@id='headingTwo']/h5/button)[1]"));
			logisticsTileDropdown.click();
			Thread.sleep(3000);

			WebElement slickGridScroll = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll);

			WebElement customDuty = driver.findElement(By.xpath("(//app-form-text//div//input)[18]"));
			if (customDuty.isEnabled()) {
				System.out.println("Custom Duty Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Custom Duty Field : Field is Disabled as Expected");
				System.out.println("Custom Duty : " + customDuty.getAttribute("value"));
			}

			WebElement dutyInvoiceNo = driver.findElement(By.xpath("(//app-form-text//div//input)[19]"));
			if (dutyInvoiceNo.isEnabled()) {
				System.out.println("Duty Invoice No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Duty Invoice No Field : Field is Disabled as Expected");
				System.out.println("Duty Invoice No : " + dutyInvoiceNo.getAttribute("value"));
			}

			WebElement dutyInvoiceDate = driver.findElement(By.xpath("(//app-form-text//div//input)[20]"));
			if (dutyInvoiceDate.isEnabled()) {
				System.out.println("Duty Invoice Date Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Duty Invoice Date Field : Field is Disabled as Expected");
				System.out.println("Duty Invoice Date : " + dutyInvoiceDate.getAttribute("value"));
			}

			WebElement aging = driver.findElement(By.xpath("(//app-form-text//div//input)[21]"));
			if (aging.isEnabled()) {
				System.out.println("Aging Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Aging Field : Field is Disabled as Expected");
				System.out.println("Aging : " + aging.getAttribute("value"));
			}

			WebElement delayReason = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[3]"));
			delayReason.clear();
			delayReason.sendKeys("Editing For FCA");

//			WebElement pickupDate = driver
//					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[2]"));
//			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
//			pickupDate.sendKeys(date2);

			WebElement logisticsRemarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[4]"));
			logisticsRemarks.clear();
			logisticsRemarks.sendKeys("Editing For FCA");

			/* Freight Fields */

			WebElement freightInvoiceNo = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[22]"));
			j.executeScript("arguments[0].scrollIntoView(true);", freightInvoiceNo);
			freightInvoiceNo.clear();
			freightInvoiceNo.sendKeys(UUID());

			WebElement typeOfImport = driver.findElement(By.xpath("(//app-form-select//div//select)[3]"));
			selectOptionByIndex(typeOfImport, 2);

			WebElement packageWeight = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[23]"));
			packageWeight.clear();
			packageWeight.sendKeys("50");

			WebElement vWeight = driver.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[24]"));
			vWeight.clear();
			vWeight.sendKeys("50");

			WebElement billingWeight = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[25]"));
			billingWeight.clear();
			billingWeight.sendKeys("50");

			WebElement basicFreight = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[26]"));
			basicFreight.clear();
			basicFreight.sendKeys("50");

			WebElement fuelSurcharge = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[27]"));
			fuelSurcharge.clear();
			fuelSurcharge.sendKeys("50");

			WebElement otherSurcharge = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[28]"));
			otherSurcharge.clear();
			otherSurcharge.sendKeys("50");

			WebElement clearanceCharges = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[29]"));
			clearanceCharges.clear();
			clearanceCharges.sendKeys("50");

			WebElement freightGST = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[30]"));
			freightGST.clear();
			freightGST.sendKeys("28");

			WebElement totalFreight = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[31]"));
			if (totalFreight.isEnabled()) {
				System.out.println("Total Freight Field : Field is Enabled as Not Expected");
			} else {
				System.out.println("Total Freight Field : Field is Disabled as Expected");
				System.out.println("Total Freight Charges : " + totalFreight.getAttribute("Value"));
			}
			WebElement freightRemarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[5]"));
			freightRemarks.clear();
			freightRemarks.sendKeys("Edited for FCA");

			/* / FCA - Domestic - Grid Fields/ */

			int scrollAmount = 4000;
			WebElement slickGridScroll2 = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll2);
			Thread.sleep(1000);
			j.executeScript("arguments[0].scrollLeft += arguments[1];", slickGridScroll2, scrollAmount);
			Thread.sleep(1000);

			WebElement BOEDescription = driver.findElement(
					By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l27 r27']"));
			j.executeScript("arguments[0].click();", BOEDescription);
			WebElement BOEDescription1 = driver.findElement(By.xpath(
					"//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l27 r27 active editable selected']//input"));
			BOEDescription1.sendKeys("Edited For FCA");

			WebElement extendedValue = driver.findElement(
					By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l31 r31 selected']"));
			WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
			j.executeScript("arguments[0].click();", extendedValue);
			WebElement refreshedExtendedValue = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					"//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l31 r31 selected active']")));
			String extendedValueAttribute = refreshedExtendedValue.getText();

			WebElement assessableValue = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[16]"));
			assessableValue.clear();
			assessableValue.sendKeys(extendedValueAttribute);

			WebElement HSCode = driver.findElement(
					By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l32 r32 selected']"));
			j.executeScript("arguments[0].click();", HSCode);
			WebElement HSCode1 = driver.findElement(By.xpath(
					"//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l32 r32 selected active editable']//input"));
			HSCode1.sendKeys("54321");

			WebElement itemType = driver.findElement(
					By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l33 r33 selected']"));
			j.executeScript("arguments[0].click();", itemType);
			WebElement itemType1 = driver.findElement(By.xpath(
					"//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l33 r33 selected active editable']//select"));
			selectOptionByIndex(itemType1, 1);

			WebElement rateOfDuty = driver.findElement(
					By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l34 r34 selected']"));
			j.executeScript("arguments[0].click();", rateOfDuty);
			WebElement rateOfDuty1 = driver.findElement(By.xpath(
					"//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l34 r34 selected active editable']//select"));
			selectOptionByIndex(rateOfDuty1, 2);

			WebElement totalDutyAmt = driver.findElement(
					By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l36 r36 selected']"));
			j.executeScript("arguments[0].click();", totalDutyAmt);
			WebElement refreshedtotalDutyAmt = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					"//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l36 r36 selected active']")));
			String totalDutyAttribute = refreshedtotalDutyAmt.getText();

			WebElement totalDutyAmount = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[17]"));
			totalDutyAmount.clear();
			totalDutyAmount.sendKeys(totalDutyAttribute);
		} else {
			System.out.println("Purchase Category NOT MATCHING");
		}
	}

	@When("User edit the logistics fields in logistics tile dropdown  - \\(PO Order - RM - Domestic), \\(Incoterm - DDU, Duty Exemption - YES)")
	public void user_edit_the_logistics_fields_in_logistics_tile_dropdown_po_order_rm_domestic_incoterm_ddu_duty_exemption_yes()
			throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;
		// For Incoterm: "DDU" & Duty Exemption : "YES"
		WebElement incoterm = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]"));
		selectOptionByIndex(incoterm, 6);

		/* /For "Domestic"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("1: 2"));

		if (attribute2.equals("1: 2")) {

			WebElement dutyExemption = driver.findElement(By.xpath("(//app-form-select//div//select)[1]"));
			selectOptionByIndex(dutyExemption, 0);

			WebElement DTAP_Applicable = driver.findElement(By.xpath("(//app-form-select//div//select)[2]"));
			selectOptionByIndex(DTAP_Applicable, 0);

			WebElement customsRequestNo = driver.findElement(By.xpath("(//app-form-text//div//input)[5]"));
			customsRequestNo.clear();
			customsRequestNo.sendKeys("1");

			WebElement BOENo = driver.findElement(By.xpath("(//app-form-text//div//input)[6]"));
			BOENo.clear();
			BOENo.sendKeys("2");

			WebElement BOEDate = driver.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[1]"));
			String date = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			BOEDate.sendKeys(date);

			WebElement trackingNo = driver.findElement(By.xpath("(//app-form-text//div//input)[7]"));
			if (trackingNo.isEnabled()) {
				System.out.println("Tracking No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Tracking No Field : Field is Disabled as Expected");
				System.out.println("Tracking No : " + trackingNo.getAttribute("value"));
			}

			WebElement noOfPackages = driver.findElement(By.xpath("(//app-form-text//div//input)[8]"));
			if (noOfPackages.isEnabled()) {
				System.out.println("No of Packages Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("No of Packages Field : Field is Disabled as Expected");
				System.out.println("No of Packages : " + noOfPackages.getAttribute("value"));
			}

			WebElement logisticsTileDropdown = driver.findElement(By.xpath("(//*[@id='headingTwo']/h5/button)[1]"));
			logisticsTileDropdown.click();
			Thread.sleep(3000);

			WebElement slickGridScroll = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll);

			WebElement customDuty = driver.findElement(By.xpath("(//app-form-text//div//input)[21]"));
			if (customDuty.isEnabled()) {
				System.out.println("Custom Duty Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Custom Duty Field : Field is Disabled as Expected");
				System.out.println("Custom Duty : " + customDuty.getAttribute("value"));
			}

			WebElement dutyInvoiceNo = driver.findElement(By.xpath("(//app-form-text//div//input)[22]"));
			if (dutyInvoiceNo.isEnabled()) {
				System.out.println("Duty Invoice No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Duty Invoice No Field : Field is Disabled as Expected");
				System.out.println("Duty Invoice No : " + dutyInvoiceNo.getAttribute("value"));
			}

			WebElement dutyInvoiceDate = driver.findElement(By.xpath("(//app-form-text//div//input)[23]"));
			if (dutyInvoiceDate.isEnabled()) {
				System.out.println("Duty Invoice Date Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Duty Invoice Date Field : Field is Disabled as Expected");
				System.out.println("Duty Invoice Date : " + dutyInvoiceDate.getAttribute("value"));
			}

			WebElement aging = driver.findElement(By.xpath("(//app-form-text//div//input)[24]"));
			if (aging.isEnabled()) {
				System.out.println("Aging Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Aging Field : Field is Disabled as Expected");
				System.out.println("Aging : " + aging.getAttribute("value"));
			}

			WebElement delayReason = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[3]"));
			delayReason.clear();
			delayReason.sendKeys("Editing For DDU");

//			WebElement pickupDate = driver
//					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[2]"));
//			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
//			pickupDate.sendKeys(date2);

			WebElement logisticsRemarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[4]"));
			logisticsRemarks.clear();
			logisticsRemarks.sendKeys("Editing For DDU");

			/* / DDU - Domestic - Grid Fields/ */
			int scrollAmount = 4000;
			WebElement slickGridScroll2 = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll2);
			Thread.sleep(1000);
			j.executeScript("arguments[0].scrollLeft += arguments[1];", slickGridScroll2, scrollAmount);
			Thread.sleep(1000);

			WebElement BOEDescription = driver.findElement(
					By.xpath(".//div[contains (@class,'slick-cell l27 r27')]"));
			j.executeScript("arguments[0].click();", BOEDescription);
			WebElement BOEDescription1 = driver.findElement(By.xpath(
					".//div[contains (@class,'slick-cell l27 r27')]//input"));
			BOEDescription1.sendKeys("Edited For DDU");

			WebElement extendedValue = driver.findElement(
					By.xpath(".//div[contains (@class,'slick-cell l31 r31')]"));
			WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
			j.executeScript("arguments[0].click();", extendedValue);
			WebElement refreshedExtendedValue = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains (@class,'slick-cell l31 r31')]")));
			String extendedValueAttribute = refreshedExtendedValue.getText();

			WebElement assessableValue = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[19]"));
			assessableValue.clear();
			assessableValue.sendKeys(extendedValueAttribute);

			WebElement HSCode = driver.findElement(
					By.xpath(".//div[contains (@class,'slick-cell l32 r32')]"));
			j.executeScript("arguments[0].click();", HSCode);
			WebElement HSCode1 = driver.findElement(By.xpath(
					".//div[contains (@class,'slick-cell l32 r32')]//input"));
			HSCode1.sendKeys("54321");

			WebElement itemType = driver.findElement(
					By.xpath(".//div[contains (@class,'slick-cell l33 r33')]"));
			j.executeScript("arguments[0].click();", itemType);
			WebElement itemType1 = driver.findElement(By.xpath(
					".//div[contains (@class,'slick-cell l33 r33')]//select"));
			selectOptionByIndex(itemType1, 1);

			WebElement rateOfDuty = driver.findElement(
					By.xpath(".//div[contains (@class,'slick-cell l34 r34')]"));
			j.executeScript("arguments[0].click();", rateOfDuty);
			WebElement rateOfDuty1 = driver.findElement(By.xpath(
					".//div[contains (@class,'slick-cell l34 r34')]//select"));
			selectOptionByIndex(rateOfDuty1, 2);

			WebElement totalDutyAmt = driver.findElement(
					By.xpath(".//div[contains (@class,'slick-cell l36 r36')]"));
			j.executeScript("arguments[0].click();", totalDutyAmt);
			WebElement refreshedtotalDutyAmt = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains (@class,'slick-cell l36 r36')]")));
			String totalDutyAttribute = refreshedtotalDutyAmt.getText();

			WebElement totalDutyAmount = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[20]"));
			totalDutyAmount.clear();
			totalDutyAmount.sendKeys(totalDutyAttribute);
		} else {
			System.out.println("Purchase Category NOT MATCHING");
		}
	}

	@When("User edit the logistics fields in logistics tile dropdown - \\(Testing & Services - Domestic), \\(Incoterm - DDU, Duty Exemption - YES)")
	public void user_edit_the_logistics_fields_in_logistics_tile_dropdown_testing_services_domestic_incoterm_ddu_duty_exemption_yes()
			throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;
		// For Incoterm: "DDU" & Duty Exemption : "YES"
		WebElement incoterm = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]"));
		selectOptionByIndex(incoterm, 6);

		/* /For "Domestic"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("1: 2"));

		if (attribute2.equals("1: 2")) {

			WebElement dutyExemption = driver.findElement(By.xpath("(//app-form-select//div//select)[1]"));
			selectOptionByIndex(dutyExemption, 0);

			WebElement DTAP_Applicable = driver.findElement(By.xpath("(//app-form-select//div//select)[2]"));
			selectOptionByIndex(DTAP_Applicable, 0);

			WebElement customsRequestNo = driver.findElement(By.xpath("(//app-form-text//div//input)[5]"));
			customsRequestNo.clear();
			customsRequestNo.sendKeys("1");

			WebElement BOENo = driver.findElement(By.xpath("(//app-form-text//div//input)[6]"));
			BOENo.clear();
			BOENo.sendKeys("2");

			WebElement BOEDate = driver.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[1]"));
			String date = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			BOEDate.sendKeys(date);

			WebElement trackingNo = driver.findElement(By.xpath("(//app-form-text//div//input)[7]"));
			if (trackingNo.isEnabled()) {
				System.out.println("Tracking No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Tracking No Field : Field is Disabled as Expected");
				System.out.println("Tracking No : " + trackingNo.getAttribute("value"));
			}

			WebElement noOfPackages = driver.findElement(By.xpath("(//app-form-text//div//input)[8]"));
			if (noOfPackages.isEnabled()) {
				System.out.println("No of Packages Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("No of Packages Field : Field is Disabled as Expected");
				System.out.println("No of Packages : " + noOfPackages.getAttribute("value"));
			}

			WebElement logisticsTileDropdown = driver.findElement(By.xpath("(//*[@id='headingTwo']/h5/button)[1]"));
			logisticsTileDropdown.click();
			Thread.sleep(3000);

			WebElement slickGridScroll = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll);

			WebElement customDuty = driver.findElement(By.xpath("(//app-form-text//div//input)[21]"));
			if (customDuty.isEnabled()) {
				System.out.println("Custom Duty Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Custom Duty Field : Field is Disabled as Expected");
				System.out.println("Custom Duty : " + customDuty.getAttribute("value"));
			}

			WebElement dutyInvoiceNo = driver.findElement(By.xpath("(//app-form-text//div//input)[22]"));
			if (dutyInvoiceNo.isEnabled()) {
				System.out.println("Duty Invoice No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Duty Invoice No Field : Field is Disabled as Expected");
				System.out.println("Duty Invoice No : " + dutyInvoiceNo.getAttribute("value"));
			}

			WebElement dutyInvoiceDate = driver.findElement(By.xpath("(//app-form-text//div//input)[23]"));
			if (dutyInvoiceDate.isEnabled()) {
				System.out.println("Duty Invoice Date Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Duty Invoice Date Field : Field is Disabled as Expected");
				System.out.println("Duty Invoice Date : " + dutyInvoiceDate.getAttribute("value"));
			}

			WebElement aging = driver.findElement(By.xpath("(//app-form-text//div//input)[24]"));
			if (aging.isEnabled()) {
				System.out.println("Aging Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Aging Field : Field is Disabled as Expected");
				System.out.println("Aging : " + aging.getAttribute("value"));
			}

			WebElement delayReason = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[3]"));
			delayReason.clear();
			delayReason.sendKeys("Editing For DDU");

//			WebElement pickupDate = driver
//					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[2]"));
//			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
//			pickupDate.sendKeys(date2);

			WebElement logisticsRemarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[4]"));
			logisticsRemarks.clear();
			logisticsRemarks.sendKeys("Editing For DDU");

			/* / DDU - Domestic - Grid Fields/ */
			int scrollAmount = 4000;
			WebElement slickGridScroll2 = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll2);
			Thread.sleep(1000);
			j.executeScript("arguments[0].scrollLeft += arguments[1];", slickGridScroll2, scrollAmount);
			Thread.sleep(1000);

			WebElement BOEDescription = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l25 r25')]"));
			j.executeScript("arguments[0].click();", BOEDescription);
			WebElement BOEDescription1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l25 r25')]//input"));
			BOEDescription1.sendKeys("Edited For DDU");

			WebElement extendedValue = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l29 r29')]"));
			WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
			j.executeScript("arguments[0].click();", extendedValue);
			WebElement refreshedExtendedValue = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains (@class, 'slick-cell l29 r29')]")));
			String extendedValueAttribute = refreshedExtendedValue.getText();

			WebElement assessableValue = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[19]"));
			assessableValue.clear();
			assessableValue.sendKeys(extendedValueAttribute);

			WebElement HSCode = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l30 r30')]"));
			j.executeScript("arguments[0].click();", HSCode);
			WebElement HSCode1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l30 r30')]//input"));
			HSCode1.sendKeys("54321");

			WebElement itemType = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l31 r31')]"));
			j.executeScript("arguments[0].click();", itemType);
			WebElement itemType1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l31 r31')]//select"));
			selectOptionByIndex(itemType1, 1);

			WebElement rateOfDuty = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l32 r32')]"));
			j.executeScript("arguments[0].click();", rateOfDuty);
			WebElement rateOfDuty1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l32 r32')]//select"));
			selectOptionByIndex(rateOfDuty1, 2);

			WebElement totalDutyAmt = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l34 r34')]"));
			j.executeScript("arguments[0].click();", totalDutyAmt);
			WebElement refreshedtotalDutyAmt = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains (@class, 'slick-cell l34 r34')]")));
			String totalDutyAttribute = refreshedtotalDutyAmt.getText();

			WebElement totalDutyAmount = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[20]"));
			totalDutyAmount.clear();
			totalDutyAmount.sendKeys(totalDutyAttribute);
		} else {
			System.out.println("Purchase Category NOT MATCHING");
		}
	}

	@When("User edit the logistics fields in logistics tile dropdown  - \\(PO Order - FG - Domestic), \\(Incoterm - DDU, Duty Exemption - YES)")
	public void user_edit_the_logistics_fields_in_logistics_tile_dropdown_po_order_fg_domestic_incoterm_ddu_duty_exemption_yes()
			throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;
		// For Incoterm: "DDU" & Duty Exemption : "YES"
		WebElement incoterm = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]"));
		selectOptionByIndex(incoterm, 6);

		/* /For "Domestic"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("1: 2"));

		if (attribute2.equals("1: 2")) {

			WebElement dutyExemption = driver.findElement(By.xpath("(//app-form-select//div//select)[1]"));
			selectOptionByIndex(dutyExemption, 0);

			WebElement DTAP_Applicable = driver.findElement(By.xpath("(//app-form-select//div//select)[2]"));
			selectOptionByIndex(DTAP_Applicable, 0);

			WebElement customsRequestNo = driver.findElement(By.xpath("(//app-form-text//div//input)[5]"));
			customsRequestNo.clear();
			customsRequestNo.sendKeys("1");

			WebElement BOENo = driver.findElement(By.xpath("(//app-form-text//div//input)[6]"));
			BOENo.clear();
			BOENo.sendKeys("2");

			WebElement BOEDate = driver.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[1]"));
			String date = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			BOEDate.sendKeys(date);

			WebElement trackingNo = driver.findElement(By.xpath("(//app-form-text//div//input)[7]"));
			if (trackingNo.isEnabled()) {
				System.out.println("Tracking No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Tracking No Field : Field is Disabled as Expected");
				System.out.println("Tracking No : " + trackingNo.getAttribute("value"));
			}

			WebElement noOfPackages = driver.findElement(By.xpath("(//app-form-text//div//input)[8]"));
			if (noOfPackages.isEnabled()) {
				System.out.println("No of Packages Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("No of Packages Field : Field is Disabled as Expected");
				System.out.println("No of Packages : " + noOfPackages.getAttribute("value"));
			}

			WebElement logisticsTileDropdown = driver.findElement(By.xpath("(//*[@id='headingTwo']/h5/button)[1]"));
			logisticsTileDropdown.click();
			Thread.sleep(3000);

			WebElement slickGridScroll = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll);

			WebElement customDuty = driver.findElement(By.xpath("(//app-form-text//div//input)[21]"));
			if (customDuty.isEnabled()) {
				System.out.println("Custom Duty Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Custom Duty Field : Field is Disabled as Expected");
				System.out.println("Custom Duty : " + customDuty.getAttribute("value"));
			}

			WebElement dutyInvoiceNo = driver.findElement(By.xpath("(//app-form-text//div//input)[22]"));
			if (dutyInvoiceNo.isEnabled()) {
				System.out.println("Duty Invoice No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Duty Invoice No Field : Field is Disabled as Expected");
				System.out.println("Duty Invoice No : " + dutyInvoiceNo.getAttribute("value"));
			}

			WebElement dutyInvoiceDate = driver.findElement(By.xpath("(//app-form-text//div//input)[23]"));
			if (dutyInvoiceDate.isEnabled()) {
				System.out.println("Duty Invoice Date Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Duty Invoice Date Field : Field is Disabled as Expected");
				System.out.println("Duty Invoice Date : " + dutyInvoiceDate.getAttribute("value"));
			}

			WebElement aging = driver.findElement(By.xpath("(//app-form-text//div//input)[24]"));
			if (aging.isEnabled()) {
				System.out.println("Aging Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Aging Field : Field is Disabled as Expected");
				System.out.println("Aging : " + aging.getAttribute("value"));
			}

			WebElement delayReason = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[3]"));
			delayReason.clear();
			delayReason.sendKeys("Editing For DDU");

//			WebElement pickupDate = driver
//					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[2]"));
//			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
//			pickupDate.sendKeys(date2);

			WebElement logisticsRemarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[4]"));
			logisticsRemarks.clear();
			logisticsRemarks.sendKeys("Editing For DDU");

			/* / DDU - Domestic - Grid Fields/ */
			int scrollAmount = 4000;
			WebElement slickGridScroll2 = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll2);
			Thread.sleep(1000);
			j.executeScript("arguments[0].scrollLeft += arguments[1];", slickGridScroll2, scrollAmount);
			Thread.sleep(1000);

			WebElement BOEDescription = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l27 r27')]"));
			j.executeScript("arguments[0].click();", BOEDescription);
			WebElement BOEDescription1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l27 r27')]//input"));
			BOEDescription1.sendKeys("Edited For DDU");

			WebElement extendedValue = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l31 r31')]"));
			WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
			j.executeScript("arguments[0].click();", extendedValue);
			WebElement refreshedExtendedValue = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains (@class, 'slick-cell l31 r31')]")));
			String extendedValueAttribute = refreshedExtendedValue.getText();

			WebElement assessableValue = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[19]"));
			assessableValue.clear();
			assessableValue.sendKeys(extendedValueAttribute);

			WebElement HSCode = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l32 r32')]"));
			j.executeScript("arguments[0].click();", HSCode);
			WebElement HSCode1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l32 r32')]//input"));
			HSCode1.sendKeys("54321");

			WebElement itemType = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l33 r33')]"));
			j.executeScript("arguments[0].click();", itemType);
			WebElement itemType1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l33 r33')]//select"));
			selectOptionByIndex(itemType1, 1);

			WebElement rateOfDuty = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l34 r34')]"));
			j.executeScript("arguments[0].click();", rateOfDuty);
			WebElement rateOfDuty1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l34 r34')]//select"));
			selectOptionByIndex(rateOfDuty1, 2);

			WebElement totalDutyAmt = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l36 r36')]"));
			j.executeScript("arguments[0].click();", totalDutyAmt);
			WebElement refreshedtotalDutyAmt = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains (@class, 'slick-cell l36 r36')]")));
			String totalDutyAttribute = refreshedtotalDutyAmt.getText();

			WebElement totalDutyAmount = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[20]"));
			totalDutyAmount.clear();
			totalDutyAmount.sendKeys(totalDutyAttribute);
		} else {
			System.out.println("Purchase Category NOT MATCHING");
		}
	}

	@When("User edit the logistics fields in logistics tile dropdown  - \\(PO Order - NPM - Domestic), \\(Incoterm - DDU, Duty Exemption - YES)")
	public void user_edit_the_logistics_fields_in_logistics_tile_dropdown_po_order_npm_domestic_incoterm_ddu_duty_exemption_yes()
			throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;
		// For Incoterm: "DDU" & Duty Exemption : "YES"
		WebElement incoterm = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]"));
		selectOptionByIndex(incoterm, 6);

		/* /For "Domestic"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("1: 2"));

		if (attribute2.equals("1: 2")) {

			WebElement dutyExemption = driver.findElement(By.xpath("(//app-form-select//div//select)[1]"));
			selectOptionByIndex(dutyExemption, 0);

			WebElement DTAP_Applicable = driver.findElement(By.xpath("(//app-form-select//div//select)[2]"));
			selectOptionByIndex(DTAP_Applicable, 0);

			WebElement customsRequestNo = driver.findElement(By.xpath("(//app-form-text//div//input)[5]"));
			customsRequestNo.clear();
			customsRequestNo.sendKeys("1");

			WebElement BOENo = driver.findElement(By.xpath("(//app-form-text//div//input)[6]"));
			BOENo.clear();
			BOENo.sendKeys("2");

			WebElement BOEDate = driver.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[1]"));
			String date = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			BOEDate.sendKeys(date);

			WebElement trackingNo = driver.findElement(By.xpath("(//app-form-text//div//input)[7]"));
			if (trackingNo.isEnabled()) {
				System.out.println("Tracking No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Tracking No Field : Field is Disabled as Expected");
				System.out.println("Tracking No : " + trackingNo.getAttribute("value"));
			}

			WebElement noOfPackages = driver.findElement(By.xpath("(//app-form-text//div//input)[8]"));
			if (noOfPackages.isEnabled()) {
				System.out.println("No of Packages Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("No of Packages Field : Field is Disabled as Expected");
				System.out.println("No of Packages : " + noOfPackages.getAttribute("value"));
			}

			WebElement logisticsTileDropdown = driver.findElement(By.xpath("(//*[@id='headingTwo']/h5/button)[1]"));
			logisticsTileDropdown.click();
			Thread.sleep(3000);

			WebElement slickGridScroll = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll);

			WebElement customDuty = driver.findElement(By.xpath("(//app-form-text//div//input)[21]"));
			if (customDuty.isEnabled()) {
				System.out.println("Custom Duty Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Custom Duty Field : Field is Disabled as Expected");
				System.out.println("Custom Duty : " + customDuty.getAttribute("value"));
			}

			WebElement dutyInvoiceNo = driver.findElement(By.xpath("(//app-form-text//div//input)[22]"));
			if (dutyInvoiceNo.isEnabled()) {
				System.out.println("Duty Invoice No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Duty Invoice No Field : Field is Disabled as Expected");
				System.out.println("Duty Invoice No : " + dutyInvoiceNo.getAttribute("value"));
			}

			WebElement dutyInvoiceDate = driver.findElement(By.xpath("(//app-form-text//div//input)[23]"));
			if (dutyInvoiceDate.isEnabled()) {
				System.out.println("Duty Invoice Date Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Duty Invoice Date Field : Field is Disabled as Expected");
				System.out.println("Duty Invoice Date : " + dutyInvoiceDate.getAttribute("value"));
			}

			WebElement aging = driver.findElement(By.xpath("(//app-form-text//div//input)[24]"));
			if (aging.isEnabled()) {
				System.out.println("Aging Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Aging Field : Field is Disabled as Expected");
				System.out.println("Aging : " + aging.getAttribute("value"));
			}

			WebElement delayReason = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[3]"));
			delayReason.clear();
			delayReason.sendKeys("Editing For DDU");

//			WebElement pickupDate = driver
//					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[2]"));
//			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
//			pickupDate.sendKeys(date2);

			WebElement logisticsRemarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[4]"));
			logisticsRemarks.clear();
			logisticsRemarks.sendKeys("Editing For DDU");

			/* / DDU - Domestic - Grid Fields/ */
			int scrollAmount = 4000;
			WebElement slickGridScroll2 = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll2);
			Thread.sleep(1000);
			j.executeScript("arguments[0].scrollLeft += arguments[1];", slickGridScroll2, scrollAmount);
			Thread.sleep(1000);

			WebElement BOEDescription = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l24 r24')]"));
			j.executeScript("arguments[0].click();", BOEDescription);
			WebElement BOEDescription1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l24 r24')]//input"));
			BOEDescription1.sendKeys("Edited For DDU");

			WebElement extendedValue = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l28 r28')]"));
			WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
			j.executeScript("arguments[0].click();", extendedValue);
			WebElement refreshedExtendedValue = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains (@class, 'slick-cell l28 r28')]")));
			String extendedValueAttribute = refreshedExtendedValue.getText();

			WebElement assessableValue = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[19]"));
			assessableValue.clear();
			assessableValue.sendKeys(extendedValueAttribute);

			WebElement HSCode = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l29 r29')]"));
			j.executeScript("arguments[0].click();", HSCode);
			WebElement HSCode1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l29 r29')]//input"));
			HSCode1.sendKeys("54321");

			WebElement itemType = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l30 r30')]"));
			j.executeScript("arguments[0].click();", itemType);
			WebElement itemType1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l30 r30')]//select"));
			selectOptionByIndex(itemType1, 1);

			WebElement rateOfDuty = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l31 r31')]"));
			j.executeScript("arguments[0].click();", rateOfDuty);
			WebElement rateOfDuty1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l31 r31')]//select"));
			selectOptionByIndex(rateOfDuty1, 2);

			WebElement totalDutyAmt = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l33 r33')]"));
			j.executeScript("arguments[0].click();", totalDutyAmt);
			WebElement refreshedtotalDutyAmt = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains (@class, 'slick-cell l33 r33')]")));
			String totalDutyAttribute = refreshedtotalDutyAmt.getText();

			WebElement totalDutyAmount = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[20]"));
			totalDutyAmount.clear();
			totalDutyAmount.sendKeys(totalDutyAttribute);
		} else {
			System.out.println("Purchase Category NOT MATCHING");
		}
	}

	@When("User edit the logistics fields in logistics tile dropdown - \\(PO Order - RM - Domestic), \\(Incoterm - EXW, Duty Exemption - NO)")
	public void user_edit_the_logistics_fields_in_logistics_tile_dropdown_po_order_rm_domestic_incoterm_exw_duty_exemption_no()
			throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;
		// For Incoterm: "EXW" & Duty Exemption : "NO"
		WebElement incoterm = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]"));
		selectOptionByIndex(incoterm, 0);

		/* /For "Domestic"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("1: 2"));

		if (attribute2.equals("1: 2")) {

			WebElement dutyExemption = driver.findElement(By.xpath("(//app-form-select//div//select)[1]"));
			selectOptionByIndex(dutyExemption, 1);

//			WebElement DTAP_Applicable = driver.findElement(By.xpath("(//app-form-select//div//select)[2]"));
//			selectOptionByIndex(DTAP_Applicable, 0);

			WebElement trackingNo = driver.findElement(By.xpath("(//app-form-text//div//input)[5]"));
			if (trackingNo.isEnabled()) {
				System.out.println("Tracking No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Tracking No Field : Field is Disabled as Expected");
				System.out.println("Tracking No : " + trackingNo.getAttribute("value"));
			}

			WebElement noOfPackages = driver.findElement(By.xpath("(//app-form-text//div//input)[6]"));
			if (noOfPackages.isEnabled()) {
				System.out.println("No of Packages Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("No of Packages Field : Field is Disabled as Expected");
				System.out.println("No of Packages : " + noOfPackages.getAttribute("value"));
			}

			WebElement logisticsTileDropdown = driver.findElement(By.xpath("(//*[@id='headingTwo']/h5/button)[1]"));
			logisticsTileDropdown.click();
			Thread.sleep(3000);

			WebElement slickGridScroll = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll);

			WebElement customDuty = driver.findElement(By.xpath("(//app-form-text//div//input)[16]"));
			if (customDuty.isEnabled()) {
				System.out.println("Custom Duty Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Custom Duty Field : Field is Disabled as Expected");
				System.out.println("Custom Duty : " + customDuty.getAttribute("value"));
			}

			WebElement dutyInvoiceNo = driver.findElement(By.xpath("(//app-form-text//div//input)[17]"));
			if (dutyInvoiceNo.isEnabled()) {
				System.out.println("Duty Invoice No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Duty Invoice No Field : Field is Disabled as Expected");
				System.out.println("Duty Invoice No : " + dutyInvoiceNo.getAttribute("value"));
			}

			WebElement dutyInvoiceDate = driver.findElement(By.xpath("(//app-form-text//div//input)[18]"));
			if (dutyInvoiceDate.isEnabled()) {
				System.out.println("Duty Invoice Date Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Duty Invoice Date Field : Field is Disabled as Expected");
				System.out.println("Duty Invoice Date : " + dutyInvoiceDate.getAttribute("value"));
			}

			WebElement aging = driver.findElement(By.xpath("(//app-form-text//div//input)[19]"));
			if (aging.isEnabled()) {
				System.out.println("Aging Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Aging Field : Field is Disabled as Expected");
				System.out.println("Aging : " + aging.getAttribute("value"));
			}

			WebElement delayReason = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[3]"));
			delayReason.clear();
			delayReason.sendKeys("Editing For EXW");

//			WebElement pickupDate = driver
//					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[1]"));
//			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
//			pickupDate.sendKeys(date2);

			WebElement logisticsRemarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[4]"));
			logisticsRemarks.clear();
			logisticsRemarks.sendKeys("Editing For EXW");

			/* Freight Fields */

			WebElement freightInvoiceNo = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[20]"));
			j.executeScript("arguments[0].scrollIntoView(true);", freightInvoiceNo);
			freightInvoiceNo.clear();
			freightInvoiceNo.sendKeys(UUID());

			WebElement typeOfImport = driver.findElement(By.xpath("(//app-form-select//div//select)[2]"));
			selectOptionByIndex(typeOfImport, 2);

			WebElement packageWeight = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[21]"));
			packageWeight.clear();
			packageWeight.sendKeys("50");

			WebElement vWeight = driver.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[22]"));
			vWeight.clear();
			vWeight.sendKeys("50");

			WebElement billingWeight = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[23]"));
			billingWeight.clear();
			billingWeight.sendKeys("50");

			WebElement basicFreight = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[24]"));
			basicFreight.clear();
			basicFreight.sendKeys("50");

			WebElement fuelSurcharge = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[25]"));
			fuelSurcharge.clear();
			fuelSurcharge.sendKeys("50");

			WebElement otherSurcharge = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[26]"));
			otherSurcharge.clear();
			otherSurcharge.sendKeys("50");

			WebElement clearanceCharges = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[27]"));
			clearanceCharges.clear();
			clearanceCharges.sendKeys("50");

			WebElement freightGST = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[28]"));
			freightGST.clear();
			freightGST.sendKeys("28");

			WebElement totalFreight = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[29]"));
			if (totalFreight.isEnabled()) {
				System.out.println("Total Freight Field : Field is Enabled as Not Expected");
			} else {
				System.out.println("Total Freight Field : Field is Disabled as Expected");
				System.out.println("Total Freight Charges : " + totalFreight.getAttribute("Value"));
			}
			WebElement freightRemarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[5]"));
			freightRemarks.clear();
			freightRemarks.sendKeys("Edited for EXW");

			/* / CHA Fields/ */
			WebElement CHAName = driver.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[30]"));
			CHAName.clear();
			CHAName.sendKeys("Edited Freight");

			WebElement CHAInvoiceNo = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[31]"));
			CHAInvoiceNo.clear();
			CHAInvoiceNo.sendKeys("56789");

			WebElement CHAInvoiceDate = driver
					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[2]"));
			String date = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			CHAInvoiceDate.clear();
			CHAInvoiceDate.sendKeys(date);

			WebElement CHAInvoiceValue = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[32]"));
			CHAInvoiceValue.clear();
			CHAInvoiceValue.sendKeys("50");

			/* / EXW - Domestic - Grid Fields/ */

			int scrollAmount = 4000;
			WebElement slickGridScroll2 = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll2);
			Thread.sleep(1000);
			j.executeScript("arguments[0].scrollLeft += arguments[1];", slickGridScroll2, scrollAmount);
			Thread.sleep(1000);

			WebElement BOEDescription = driver.findElement(
					By.xpath(".//div[contains(@class,'slick-cell l30 r30')]"));
			j.executeScript("arguments[0].click();", BOEDescription);
			WebElement BOEDescription1 = driver.findElement(By.xpath(
					".//div[contains(@class,'slick-cell l30 r30')]//input"));
			BOEDescription1.sendKeys("Edited For EXW");

			WebElement extendedValue = driver.findElement(
					By.xpath(".//div[contains(@class,'slick-cell l34 r34')]"));
			WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
			j.executeScript("arguments[0].click();", extendedValue);
			WebElement refreshedExtendedValue = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains(@class,'slick-cell l34 r34')]")));
			String extendedValueAttribute = refreshedExtendedValue.getText();

			WebElement assessableValue = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[14]"));
			assessableValue.clear();
			assessableValue.sendKeys(extendedValueAttribute);

			WebElement HSCode = driver.findElement(
					By.xpath(".//div[contains(@class,'slick-cell l35 r35')]"));
			j.executeScript("arguments[0].click();", HSCode);
			WebElement HSCode1 = driver.findElement(By.xpath(
					".//div[contains(@class,'slick-cell l35 r35')]//input"));
			HSCode1.sendKeys("54321");

			WebElement itemType = driver.findElement(
					By.xpath(".//div[contains(@class,'slick-cell l36 r36')]"));
			j.executeScript("arguments[0].click();", itemType);
			WebElement itemType1 = driver.findElement(By.xpath(
					".//div[contains(@class,'slick-cell l36 r36')]//select"));
			selectOptionByIndex(itemType1, 1);

			WebElement rateOfDuty = driver.findElement(
					By.xpath(".//div[contains(@class,'slick-cell l37 r37')]"));
			j.executeScript("arguments[0].click();", rateOfDuty);
			WebElement rateOfDuty1 = driver.findElement(By.xpath(
					".//div[contains(@class,'slick-cell l37 r37')]//select"));
			selectOptionByIndex(rateOfDuty1, 2);

			WebElement totalDutyAmt = driver.findElement(
					By.xpath(".//div[contains(@class,'slick-cell l39 r39')]"));
			j.executeScript("arguments[0].click();", totalDutyAmt);
			WebElement refreshedtotalDutyAmt = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains(@class,'slick-cell l39 r39')]")));
			String totalDutyAttribute = refreshedtotalDutyAmt.getText();

			WebElement totalDutyAmount = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[15]"));
			totalDutyAmount.clear();
			totalDutyAmount.sendKeys(totalDutyAttribute);
		} else {
			System.out.println("Purchase Category NOT MATCHING");
		}
	}

	@When("User edit the logistics fields in logistics tile dropdown - \\(Testing & Services - Domestic), \\(Incoterm - EXW, Duty Exemption - NO)")
	public void user_edit_the_logistics_fields_in_logistics_tile_dropdown_testing_services_domestic_incoterm_exw_duty_exemption_no()
			throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;
		// For Incoterm: "EXW" & Duty Exemption : "NO"
		WebElement incoterm = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]"));
		selectOptionByIndex(incoterm, 0);

		/* /For "Domestic"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("1: 2"));

		if (attribute2.equals("1: 2")) {

			WebElement dutyExemption = driver.findElement(By.xpath("(//app-form-select//div//select)[1]"));
			selectOptionByIndex(dutyExemption, 1);

			WebElement trackingNo = driver.findElement(By.xpath("(//app-form-text//div//input)[5]"));
			if (trackingNo.isEnabled()) {
				System.out.println("Tracking No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Tracking No Field : Field is Disabled as Expected");
				System.out.println("Tracking No : " + trackingNo.getAttribute("value"));
			}

			WebElement noOfPackages = driver.findElement(By.xpath("(//app-form-text//div//input)[6]"));
			if (noOfPackages.isEnabled()) {
				System.out.println("No of Packages Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("No of Packages Field : Field is Disabled as Expected");
				System.out.println("No of Packages : " + noOfPackages.getAttribute("value"));
			}

			WebElement logisticsTileDropdown = driver.findElement(By.xpath("(//*[@id='headingTwo']/h5/button)[1]"));
			logisticsTileDropdown.click();
			Thread.sleep(3000);

			WebElement slickGridScroll = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll);

			WebElement customDuty = driver.findElement(By.xpath("(//app-form-text//div//input)[16]"));
			if (customDuty.isEnabled()) {
				System.out.println("Custom Duty Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Custom Duty Field : Field is Disabled as Expected");
				System.out.println("Custom Duty : " + customDuty.getAttribute("value"));
			}

			WebElement dutyInvoiceNo = driver.findElement(By.xpath("(//app-form-text//div//input)[17]"));
			if (dutyInvoiceNo.isEnabled()) {
				System.out.println("Duty Invoice No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Duty Invoice No Field : Field is Disabled as Expected");
				System.out.println("Duty Invoice No : " + dutyInvoiceNo.getAttribute("value"));
			}

			WebElement dutyInvoiceDate = driver.findElement(By.xpath("(//app-form-text//div//input)[18]"));
			if (dutyInvoiceDate.isEnabled()) {
				System.out.println("Duty Invoice Date Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Duty Invoice Date Field : Field is Disabled as Expected");
				System.out.println("Duty Invoice Date : " + dutyInvoiceDate.getAttribute("value"));
			}

			WebElement aging = driver.findElement(By.xpath("(//app-form-text//div//input)[19]"));
			if (aging.isEnabled()) {
				System.out.println("Aging Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Aging Field : Field is Disabled as Expected");
				System.out.println("Aging : " + aging.getAttribute("value"));
			}

			WebElement delayReason = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[3]"));
			delayReason.clear();
			delayReason.sendKeys("Editing For EXW");

//			WebElement pickupDate = driver
//					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[1]"));
//			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
//			pickupDate.sendKeys(date2);

			WebElement logisticsRemarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[4]"));
			logisticsRemarks.clear();
			logisticsRemarks.sendKeys("Editing For EXW");

			/* Freight Fields */

			WebElement freightInvoiceNo = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[20]"));
			j.executeScript("arguments[0].scrollIntoView(true);", freightInvoiceNo);
			freightInvoiceNo.clear();
			freightInvoiceNo.sendKeys(UUID());

			WebElement typeOfImport = driver.findElement(By.xpath("(//app-form-select//div//select)[2]"));
			selectOptionByIndex(typeOfImport, 2);

			WebElement packageWeight = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[21]"));
			packageWeight.clear();
			packageWeight.sendKeys("50");

			WebElement vWeight = driver.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[22]"));
			vWeight.clear();
			vWeight.sendKeys("50");

			WebElement billingWeight = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[23]"));
			billingWeight.clear();
			billingWeight.sendKeys("50");

			WebElement basicFreight = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[24]"));
			basicFreight.clear();
			basicFreight.sendKeys("50");

			WebElement fuelSurcharge = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[25]"));
			fuelSurcharge.clear();
			fuelSurcharge.sendKeys("50");

			WebElement otherSurcharge = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[26]"));
			otherSurcharge.clear();
			otherSurcharge.sendKeys("50");

			WebElement clearanceCharges = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[27]"));
			clearanceCharges.clear();
			clearanceCharges.sendKeys("50");

			WebElement freightGST = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[28]"));
			freightGST.clear();
			freightGST.sendKeys("28");

			WebElement totalFreight = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[29]"));
			if (totalFreight.isEnabled()) {
				System.out.println("Total Freight Field : Field is Enabled as Not Expected");
			} else {
				System.out.println("Total Freight Field : Field is Disabled as Expected");
				System.out.println("Total Freight Charges : " + totalFreight.getAttribute("Value"));
			}
			WebElement freightRemarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[5]"));
			freightRemarks.clear();
			freightRemarks.sendKeys("Edited for EXW");

			/* / CHA Fields/ */
			WebElement CHAName = driver.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[30]"));
			CHAName.clear();
			CHAName.sendKeys("Edited Freight");

			WebElement CHAInvoiceNo = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[31]"));
			CHAInvoiceNo.clear();
			CHAInvoiceNo.sendKeys("56789");

			WebElement CHAInvoiceDate = driver
					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[2]"));
			String date = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			CHAInvoiceDate.clear();
			CHAInvoiceDate.sendKeys(date);

			WebElement CHAInvoiceValue = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[32]"));
			CHAInvoiceValue.clear();
			CHAInvoiceValue.sendKeys("50");

			/* / EXW - Domestic - Grid Fields/ */

			int scrollAmount = 4000;
			WebElement slickGridScroll2 = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll2);
			Thread.sleep(1000);
			j.executeScript("arguments[0].scrollLeft += arguments[1];", slickGridScroll2, scrollAmount);
			Thread.sleep(1000);

			WebElement BOEDescription = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l28 r28')]"));
			j.executeScript("arguments[0].click();", BOEDescription);
			WebElement BOEDescription1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l28 r28')]//input"));
			BOEDescription1.sendKeys("Edited For EXW");

			WebElement extendedValue = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l32 r32')]"));
			WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
			j.executeScript("arguments[0].click();", extendedValue);
			WebElement refreshedExtendedValue = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains (@class, 'slick-cell l32 r32')]")));
			String extendedValueAttribute = refreshedExtendedValue.getText();

			WebElement assessableValue = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[14]"));
			assessableValue.clear();
			assessableValue.sendKeys(extendedValueAttribute);

			WebElement HSCode = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l33 r33')]"));
			j.executeScript("arguments[0].click();", HSCode);
			WebElement HSCode1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l33 r33')]//input"));
			HSCode1.sendKeys("54321");

			WebElement itemType = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l34 r34')]"));
			j.executeScript("arguments[0].click();", itemType);
			WebElement itemType1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l34 r34')]//select"));
			selectOptionByIndex(itemType1, 1);

			WebElement rateOfDuty = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l35 r35')]"));
			j.executeScript("arguments[0].click();", rateOfDuty);
			WebElement rateOfDuty1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l35 r35')]//select"));
			selectOptionByIndex(rateOfDuty1, 2);

			WebElement totalDutyAmt = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l37 r37')]"));
			j.executeScript("arguments[0].click();", totalDutyAmt);
			WebElement refreshedtotalDutyAmt = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains (@class, 'slick-cell l37 r37')]")));
			String totalDutyAttribute = refreshedtotalDutyAmt.getText();

			WebElement totalDutyAmount = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[15]"));
			totalDutyAmount.clear();
			totalDutyAmount.sendKeys(totalDutyAttribute);
		} else {
			System.out.println("Purchase Category NOT MATCHING");
		}
	}

	@When("User edit the logistics fields in logistics tile dropdown - \\(PO Order - NPM - Domestic), \\(Incoterm - EXW, Duty Exemption - NO)")
	public void user_edit_the_logistics_fields_in_logistics_tile_dropdown_po_order_npm_domestic_incoterm_exw_duty_exemption_no()
			throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;
		// For Incoterm: "EXW" & Duty Exemption : "NO"
		WebElement incoterm = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]"));
		selectOptionByIndex(incoterm, 0);

		/* /For "Domestic"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("1: 2"));

		if (attribute2.equals("1: 2")) {

			WebElement dutyExemption = driver.findElement(By.xpath("(//app-form-select//div//select)[1]"));
			selectOptionByIndex(dutyExemption, 1);

			WebElement trackingNo = driver.findElement(By.xpath("(//app-form-text//div//input)[5]"));
			if (trackingNo.isEnabled()) {
				System.out.println("Tracking No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Tracking No Field : Field is Disabled as Expected");
				System.out.println("Tracking No : " + trackingNo.getAttribute("value"));
			}

			WebElement noOfPackages = driver.findElement(By.xpath("(//app-form-text//div//input)[6]"));
			if (noOfPackages.isEnabled()) {
				System.out.println("No of Packages Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("No of Packages Field : Field is Disabled as Expected");
				System.out.println("No of Packages : " + noOfPackages.getAttribute("value"));
			}

			WebElement logisticsTileDropdown = driver.findElement(By.xpath("(//*[@id='headingTwo']/h5/button)[1]"));
			logisticsTileDropdown.click();
			Thread.sleep(3000);

			WebElement slickGridScroll = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll);

			WebElement customDuty = driver.findElement(By.xpath("(//app-form-text//div//input)[16]"));
			if (customDuty.isEnabled()) {
				System.out.println("Custom Duty Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Custom Duty Field : Field is Disabled as Expected");
				System.out.println("Custom Duty : " + customDuty.getAttribute("value"));
			}

			WebElement dutyInvoiceNo = driver.findElement(By.xpath("(//app-form-text//div//input)[17]"));
			if (dutyInvoiceNo.isEnabled()) {
				System.out.println("Duty Invoice No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Duty Invoice No Field : Field is Disabled as Expected");
				System.out.println("Duty Invoice No : " + dutyInvoiceNo.getAttribute("value"));
			}

			WebElement dutyInvoiceDate = driver.findElement(By.xpath("(//app-form-text//div//input)[18]"));
			if (dutyInvoiceDate.isEnabled()) {
				System.out.println("Duty Invoice Date Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Duty Invoice Date Field : Field is Disabled as Expected");
				System.out.println("Duty Invoice Date : " + dutyInvoiceDate.getAttribute("value"));
			}

			WebElement aging = driver.findElement(By.xpath("(//app-form-text//div//input)[19]"));
			if (aging.isEnabled()) {
				System.out.println("Aging Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Aging Field : Field is Disabled as Expected");
				System.out.println("Aging : " + aging.getAttribute("value"));
			}

			WebElement delayReason = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[3]"));
			delayReason.clear();
			delayReason.sendKeys("Editing For EXW");

//			WebElement pickupDate = driver
//					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[1]"));
//			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
//			pickupDate.sendKeys(date2);

			WebElement logisticsRemarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[4]"));
			logisticsRemarks.clear();
			logisticsRemarks.sendKeys("Editing For EXW");

			/* Freight Fields */

			WebElement freightInvoiceNo = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[20]"));
			j.executeScript("arguments[0].scrollIntoView(true);", freightInvoiceNo);
			freightInvoiceNo.clear();
			freightInvoiceNo.sendKeys(UUID());

			WebElement typeOfImport = driver.findElement(By.xpath("(//app-form-select//div//select)[2]"));
			selectOptionByIndex(typeOfImport, 2);

			WebElement packageWeight = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[21]"));
			packageWeight.clear();
			packageWeight.sendKeys("50");

			WebElement vWeight = driver.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[22]"));
			vWeight.clear();
			vWeight.sendKeys("50");

			WebElement billingWeight = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[23]"));
			billingWeight.clear();
			billingWeight.sendKeys("50");

			WebElement basicFreight = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[24]"));
			basicFreight.clear();
			basicFreight.sendKeys("50");

			WebElement fuelSurcharge = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[25]"));
			fuelSurcharge.clear();
			fuelSurcharge.sendKeys("50");

			WebElement otherSurcharge = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[26]"));
			otherSurcharge.clear();
			otherSurcharge.sendKeys("50");

			WebElement clearanceCharges = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[27]"));
			clearanceCharges.clear();
			clearanceCharges.sendKeys("50");

			WebElement freightGST = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[28]"));
			freightGST.clear();
			freightGST.sendKeys("28");

			WebElement totalFreight = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[29]"));
			if (totalFreight.isEnabled()) {
				System.out.println("Total Freight Field : Field is Enabled as Not Expected");
			} else {
				System.out.println("Total Freight Field : Field is Disabled as Expected");
				System.out.println("Total Freight Charges : " + totalFreight.getAttribute("Value"));
			}
			WebElement freightRemarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[5]"));
			freightRemarks.clear();
			freightRemarks.sendKeys("Edited for EXW");

			/* / CHA Fields/ */
			WebElement CHAName = driver.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[30]"));
			CHAName.clear();
			CHAName.sendKeys("Edited Freight");

			WebElement CHAInvoiceNo = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[31]"));
			CHAInvoiceNo.clear();
			CHAInvoiceNo.sendKeys("56789");

			WebElement CHAInvoiceDate = driver
					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[2]"));
			String date = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			CHAInvoiceDate.clear();
			CHAInvoiceDate.sendKeys(date);

			WebElement CHAInvoiceValue = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[32]"));
			CHAInvoiceValue.clear();
			CHAInvoiceValue.sendKeys("50");

			/* / EXW - Domestic - Grid Fields/ */

			int scrollAmount = 4000;
			WebElement slickGridScroll2 = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll2);
			Thread.sleep(1000);
			j.executeScript("arguments[0].scrollLeft += arguments[1];", slickGridScroll2, scrollAmount);
			Thread.sleep(1000);

			WebElement BOEDescription = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l27 r27')]"));
			j.executeScript("arguments[0].click();", BOEDescription);
			WebElement BOEDescription1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l27 r27')]//input"));
			BOEDescription1.sendKeys("Edited For EXW");

			WebElement extendedValue = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l31 r31')]"));
			WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
			j.executeScript("arguments[0].click();", extendedValue);
			WebElement refreshedExtendedValue = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains (@class, 'slick-cell l31 r31')]")));
			String extendedValueAttribute = refreshedExtendedValue.getText();

			WebElement assessableValue = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[14]"));
			assessableValue.clear();
			assessableValue.sendKeys(extendedValueAttribute);

			WebElement HSCode = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l32 r32')]"));
			j.executeScript("arguments[0].click();", HSCode);
			WebElement HSCode1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l32 r32')]//input"));
			HSCode1.sendKeys("54321");

			WebElement itemType = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l33 r33')]"));
			j.executeScript("arguments[0].click();", itemType);
			WebElement itemType1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l33 r33')]//select"));
			selectOptionByIndex(itemType1, 1);

			WebElement rateOfDuty = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l34 r34')]"));
			j.executeScript("arguments[0].click();", rateOfDuty);
			WebElement rateOfDuty1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l34 r34')]//select"));
			selectOptionByIndex(rateOfDuty1, 2);

			WebElement totalDutyAmt = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l36 r36')]"));
			j.executeScript("arguments[0].click();", totalDutyAmt);
			WebElement refreshedtotalDutyAmt = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains (@class, 'slick-cell l36 r36')]")));
			String totalDutyAttribute = refreshedtotalDutyAmt.getText();

			WebElement totalDutyAmount = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[15]"));
			totalDutyAmount.clear();
			totalDutyAmount.sendKeys(totalDutyAttribute);
		} else {
			System.out.println("Purchase Category NOT MATCHING");
		}
	}

	@When("User edit the logistics fields in logistics tile dropdown  - \\(PO Order - RM - Domestic), \\(Incoterm - DAP, Duty Exemption - NO)")
	public void user_edit_the_logistics_fields_in_logistics_tile_dropdown_po_order_rm_domestic_incoterm_dap_duty_exemption_no()
			throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;
		// For Incoterm: "DAP" & Duty Exemption : "NO"
		WebElement incoterm = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]"));
		selectOptionByIndex(incoterm, 4);

		/* /For "Domestic"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("1: 2"));

		if (attribute2.equals("1: 2")) {

			WebElement dutyExemption = driver.findElement(By.xpath("(//app-form-select//div//select)[1]"));
			selectOptionByIndex(dutyExemption, 1);

			WebElement trackingNo = driver.findElement(By.xpath("(//app-form-text//div//input)[5]"));
			if (trackingNo.isEnabled()) {
				System.out.println("Tracking No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Tracking No Field : Field is Disabled as Expected");
				System.out.println("Tracking No : " + trackingNo.getAttribute("value"));
			}

			WebElement noOfPackages = driver.findElement(By.xpath("(//app-form-text//div//input)[6]"));
			if (noOfPackages.isEnabled()) {
				System.out.println("No of Packages Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("No of Packages Field : Field is Disabled as Expected");
				System.out.println("No of Packages : " + noOfPackages.getAttribute("value"));
			}

			WebElement logisticsTileDropdown = driver.findElement(By.xpath("(//*[@id='headingTwo']/h5/button)[1]"));
			logisticsTileDropdown.click();
			Thread.sleep(3000);

			WebElement slickGridScroll = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll);

			WebElement customDuty = driver.findElement(By.xpath("(//app-form-text//div//input)[19]"));
			if (customDuty.isEnabled()) {
				System.out.println("Custom Duty Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Custom Duty Field : Field is Disabled as Expected");
				System.out.println("Custom Duty : " + customDuty.getAttribute("value"));
			}

			WebElement dutyInvoiceNo = driver.findElement(By.xpath("(//app-form-text//div//input)[20]"));
			if (dutyInvoiceNo.isEnabled()) {
				System.out.println("Duty Invoice No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Duty Invoice No Field : Field is Disabled as Expected");
				System.out.println("Duty Invoice No : " + dutyInvoiceNo.getAttribute("value"));
			}

			WebElement dutyInvoiceDate = driver.findElement(By.xpath("(//app-form-text//div//input)[21]"));
			if (dutyInvoiceDate.isEnabled()) {
				System.out.println("Duty Invoice Date Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Duty Invoice Date Field : Field is Disabled as Expected");
				System.out.println("Duty Invoice Date : " + dutyInvoiceDate.getAttribute("value"));
			}

			WebElement aging = driver.findElement(By.xpath("(//app-form-text//div//input)[22]"));
			if (aging.isEnabled()) {
				System.out.println("Aging Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Aging Field : Field is Disabled as Expected");
				System.out.println("Aging : " + aging.getAttribute("value"));
			}

			WebElement delayReason = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[3]"));
			delayReason.clear();
			delayReason.sendKeys("Editing For DAP");

//			WebElement pickupDate = driver
//					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[1]"));
//			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
//			pickupDate.sendKeys(date2);

			WebElement logisticsRemarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[4]"));
			logisticsRemarks.clear();
			logisticsRemarks.sendKeys("Editing For DAP");

			/* / CHA Fields/ */
			WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
			WebElement CHAName = driver.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[33]"));
			wait.until(ExpectedConditions.visibilityOf(CHAName));
			CHAName.clear();
			CHAName.sendKeys("Freight");

			WebElement CHAInvoiceNo = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[34]"));
			CHAInvoiceNo.clear();
			CHAInvoiceNo.sendKeys("98765");

			WebElement CHAInvoiceDate = driver
					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[2]"));
			String date = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			CHAInvoiceDate.clear();
			CHAInvoiceDate.sendKeys(date);

			WebElement CHAInvoiceValue = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[35]"));
			CHAInvoiceValue.clear();
			CHAInvoiceValue.sendKeys("100");

			/* / DAP - Domestic - Grid Fields/ */
			int scrollAmount = 4000;
			WebElement slickGridScroll2 = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll2);
			Thread.sleep(1000);
			j.executeScript("arguments[0].scrollLeft += arguments[1];", slickGridScroll2, scrollAmount);
			Thread.sleep(1000);

			WebElement BOEDescription = driver.findElement(
					By.xpath(".//div[contains (@class,'slick-cell l27 r27')]"));
			j.executeScript("arguments[0].click();", BOEDescription);
			WebElement BOEDescription1 = driver.findElement(By.xpath(
					".//div[contains (@class,'slick-cell l27 r27')]//input"));
			BOEDescription1.sendKeys("Edited For DAP");

			WebElement extendedValue = driver.findElement(
					By.xpath(".//div[contains (@class,'slick-cell l31 r31')]"));
			WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
			j.executeScript("arguments[0].click();", extendedValue);
			WebElement refreshedExtendedValue = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains (@class,'slick-cell l31 r31')]")));
			String extendedValueAttribute = refreshedExtendedValue.getText();

			WebElement assessableValue = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[17]"));
			assessableValue.clear();
			assessableValue.sendKeys(extendedValueAttribute);

			WebElement HSCode = driver.findElement(
					By.xpath(".//div[contains (@class,'slick-cell l32 r32')]"));
			j.executeScript("arguments[0].click();", HSCode);
			WebElement HSCode1 = driver.findElement(By.xpath(
					".//div[contains (@class,'slick-cell l32 r32')]//input"));
			HSCode1.sendKeys("54321");

			WebElement itemType = driver.findElement(
					By.xpath(".//div[contains (@class,'slick-cell l33 r33')]"));
			j.executeScript("arguments[0].click();", itemType);
			WebElement itemType1 = driver.findElement(By.xpath(
					".//div[contains (@class,'slick-cell l33 r33')]//select"));
			selectOptionByIndex(itemType1, 1);

			WebElement rateOfDuty = driver.findElement(
					By.xpath(".//div[contains (@class,'slick-cell l34 r34')]"));
			j.executeScript("arguments[0].click();", rateOfDuty);
			WebElement rateOfDuty1 = driver.findElement(By.xpath(
					".//div[contains (@class,'slick-cell l34 r34')]//select"));
			selectOptionByIndex(rateOfDuty1, 2);

			WebElement totalDutyAmt = driver.findElement(
					By.xpath(".//div[contains (@class,'slick-cell l36 r36')]"));
			j.executeScript("arguments[0].click();", totalDutyAmt);
			WebElement refreshedtotalDutyAmt = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains (@class,'slick-cell l36 r36')]")));
			String totalDutyAttribute = refreshedtotalDutyAmt.getText();

			WebElement totalDutyAmount = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[18]"));
			totalDutyAmount.clear();
			totalDutyAmount.sendKeys(totalDutyAttribute);
		} else {
			System.out.println("Purchase Category NOT MATCHING");
		}
	}

	@When("User edit the logistics fields in logistics tile dropdown - \\(Testing & Services - Domestic), \\(Incoterm - DAP, Duty Exemption - NO)")
	public void user_edit_the_logistics_fields_in_logistics_tile_dropdown_testing_services_domestic_incoterm_dap_duty_exemption_no()
			throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;
		// For Incoterm: "DAP" & Duty Exemption : "NO"
		WebElement incoterm = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]"));
		selectOptionByIndex(incoterm, 4);

		/* /For "Domestic"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("1: 2"));

		if (attribute2.equals("1: 2")) {

			WebElement dutyExemption = driver.findElement(By.xpath("(//app-form-select//div//select)[1]"));
			selectOptionByIndex(dutyExemption, 1);

			WebElement trackingNo = driver.findElement(By.xpath("(//app-form-text//div//input)[5]"));
			if (trackingNo.isEnabled()) {
				System.out.println("Tracking No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Tracking No Field : Field is Disabled as Expected");
				System.out.println("Tracking No : " + trackingNo.getAttribute("value"));
			}

			WebElement noOfPackages = driver.findElement(By.xpath("(//app-form-text//div//input)[6]"));
			if (noOfPackages.isEnabled()) {
				System.out.println("No of Packages Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("No of Packages Field : Field is Disabled as Expected");
				System.out.println("No of Packages : " + noOfPackages.getAttribute("value"));
			}

			WebElement logisticsTileDropdown = driver.findElement(By.xpath("(//*[@id='headingTwo']/h5/button)[1]"));
			logisticsTileDropdown.click();
			Thread.sleep(3000);

			WebElement slickGridScroll = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll);

			WebElement customDuty = driver.findElement(By.xpath("(//app-form-text//div//input)[19]"));
			if (customDuty.isEnabled()) {
				System.out.println("Custom Duty Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Custom Duty Field : Field is Disabled as Expected");
				System.out.println("Custom Duty : " + customDuty.getAttribute("value"));
			}

			WebElement dutyInvoiceNo = driver.findElement(By.xpath("(//app-form-text//div//input)[20]"));
			if (dutyInvoiceNo.isEnabled()) {
				System.out.println("Duty Invoice No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Duty Invoice No Field : Field is Disabled as Expected");
				System.out.println("Duty Invoice No : " + dutyInvoiceNo.getAttribute("value"));
			}

			WebElement dutyInvoiceDate = driver.findElement(By.xpath("(//app-form-text//div//input)[21]"));
			if (dutyInvoiceDate.isEnabled()) {
				System.out.println("Duty Invoice Date Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Duty Invoice Date Field : Field is Disabled as Expected");
				System.out.println("Duty Invoice Date : " + dutyInvoiceDate.getAttribute("value"));
			}

			WebElement aging = driver.findElement(By.xpath("(//app-form-text//div//input)[22]"));
			if (aging.isEnabled()) {
				System.out.println("Aging Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Aging Field : Field is Disabled as Expected");
				System.out.println("Aging : " + aging.getAttribute("value"));
			}

			WebElement delayReason = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[3]"));
			delayReason.clear();
			delayReason.sendKeys("Editing For DAP");

//			WebElement pickupDate = driver
//					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[1]"));
//			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
//			pickupDate.sendKeys(date2);

			WebElement logisticsRemarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[4]"));
			logisticsRemarks.clear();
			logisticsRemarks.sendKeys("Editing For DAP");

			/* / CHA Fields/ */
			WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
			WebElement CHAName = driver.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[33]"));
			wait.until(ExpectedConditions.visibilityOf(CHAName));
			CHAName.clear();
			CHAName.sendKeys("Freight");

			WebElement CHAInvoiceNo = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[34]"));
			CHAInvoiceNo.clear();
			CHAInvoiceNo.sendKeys("98765");

			WebElement CHAInvoiceDate = driver
					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[2]"));
			String date = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			CHAInvoiceDate.clear();
			CHAInvoiceDate.sendKeys(date);

			WebElement CHAInvoiceValue = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[35]"));
			CHAInvoiceValue.clear();
			CHAInvoiceValue.sendKeys("100");

			/* / DAP - Domestic - Grid Fields/ */
			int scrollAmount = 4000;
			WebElement slickGridScroll2 = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll2);
			Thread.sleep(1000);
			j.executeScript("arguments[0].scrollLeft += arguments[1];", slickGridScroll2, scrollAmount);
			Thread.sleep(1000);

			WebElement BOEDescription = driver.findElement(
					By.xpath(".//div[contains(@class, 'slick-cell l25 r25')]"));
			j.executeScript("arguments[0].click();", BOEDescription);
			WebElement BOEDescription1 = driver.findElement(By.xpath(
					".//div[contains(@class, 'slick-cell l25 r25')]//input"));
			BOEDescription1.sendKeys("Edited For DAP");

			WebElement extendedValue = driver.findElement(
					By.xpath(".//div[contains(@class, 'slick-cell l29 r29')]"));
			WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
			j.executeScript("arguments[0].click();", extendedValue);
			WebElement refreshedExtendedValue = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains(@class, 'slick-cell l29 r29')]")));
			String extendedValueAttribute = refreshedExtendedValue.getText();

			WebElement assessableValue = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[17]"));
			assessableValue.clear();
			assessableValue.sendKeys(extendedValueAttribute);

			WebElement HSCode = driver.findElement(
					By.xpath(".//div[contains(@class, 'slick-cell l30 r30')]"));
			j.executeScript("arguments[0].click();", HSCode);
			WebElement HSCode1 = driver.findElement(By.xpath(
					".//div[contains(@class, 'slick-cell l30 r30')]//input"));
			HSCode1.sendKeys("54321");

			WebElement itemType = driver.findElement(
					By.xpath(".//div[contains(@class, 'slick-cell l31 r31')]"));
			j.executeScript("arguments[0].click();", itemType);
			WebElement itemType1 = driver.findElement(By.xpath(
					".//div[contains(@class, 'slick-cell l31 r31')]//select"));
			selectOptionByIndex(itemType1, 1);

			WebElement rateOfDuty = driver.findElement(
					By.xpath(".//div[contains(@class, 'slick-cell l32 r32')]"));
			j.executeScript("arguments[0].click();", rateOfDuty);
			WebElement rateOfDuty1 = driver.findElement(By.xpath(
					".//div[contains(@class, 'slick-cell l32 r32')]//select"));
			selectOptionByIndex(rateOfDuty1, 2);

			WebElement totalDutyAmt = driver.findElement(
					By.xpath(".//div[contains(@class, 'slick-cell l34 r34')]"));
			j.executeScript("arguments[0].click();", totalDutyAmt);
			WebElement refreshedtotalDutyAmt = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains(@class, 'slick-cell l34 r34')]")));
			String totalDutyAttribute = refreshedtotalDutyAmt.getText();

			WebElement totalDutyAmount = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[18]"));
			totalDutyAmount.clear();
			totalDutyAmount.sendKeys(totalDutyAttribute);
		} else {
			System.out.println("Purchase Category NOT MATCHING");
		}
	}

	@When("User edit the logistics fields in logistics tile dropdown  - \\(PO Order - NPM - Domestic), \\(Incoterm - DAP, Duty Exemption - NO)")
	public void user_edit_the_logistics_fields_in_logistics_tile_dropdown_po_order_npm_domestic_incoterm_dap_duty_exemption_no()
			throws InterruptedException {
		JavascriptExecutor j = (JavascriptExecutor) driver;
		// For Incoterm: "DAP" & Duty Exemption : "NO"
		WebElement incoterm = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[2]"));
		selectOptionByIndex(incoterm, 4);

		/* /For "Domestic"/ */
		WebElement purchaseCategoryDomestic = driver.findElement(By.xpath("(//app-form-dyna-select//div//select)[3]"));
		String attribute2 = purchaseCategoryDomestic.getAttribute("value");
		System.out.println(attribute2);
		System.out.println(attribute2.equals("1: 2"));

		if (attribute2.equals("1: 2")) {

			WebElement dutyExemption = driver.findElement(By.xpath("(//app-form-select//div//select)[1]"));
			selectOptionByIndex(dutyExemption, 1);

			WebElement trackingNo = driver.findElement(By.xpath("(//app-form-text//div//input)[5]"));
			if (trackingNo.isEnabled()) {
				System.out.println("Tracking No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Tracking No Field : Field is Disabled as Expected");
				System.out.println("Tracking No : " + trackingNo.getAttribute("value"));
			}

			WebElement noOfPackages = driver.findElement(By.xpath("(//app-form-text//div//input)[6]"));
			if (noOfPackages.isEnabled()) {
				System.out.println("No of Packages Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("No of Packages Field : Field is Disabled as Expected");
				System.out.println("No of Packages : " + noOfPackages.getAttribute("value"));
			}

			WebElement logisticsTileDropdown = driver.findElement(By.xpath("(//*[@id='headingTwo']/h5/button)[1]"));
			logisticsTileDropdown.click();
			Thread.sleep(3000);

			WebElement slickGridScroll = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll);

			WebElement customDuty = driver.findElement(By.xpath("(//app-form-text//div//input)[19]"));
			if (customDuty.isEnabled()) {
				System.out.println("Custom Duty Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Custom Duty Field : Field is Disabled as Expected");
				System.out.println("Custom Duty : " + customDuty.getAttribute("value"));
			}

			WebElement dutyInvoiceNo = driver.findElement(By.xpath("(//app-form-text//div//input)[20]"));
			if (dutyInvoiceNo.isEnabled()) {
				System.out.println("Duty Invoice No Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Duty Invoice No Field : Field is Disabled as Expected");
				System.out.println("Duty Invoice No : " + dutyInvoiceNo.getAttribute("value"));
			}

			WebElement dutyInvoiceDate = driver.findElement(By.xpath("(//app-form-text//div//input)[21]"));
			if (dutyInvoiceDate.isEnabled()) {
				System.out.println("Duty Invoice Date Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Duty Invoice Date Field : Field is Disabled as Expected");
				System.out.println("Duty Invoice Date : " + dutyInvoiceDate.getAttribute("value"));
			}

			WebElement aging = driver.findElement(By.xpath("(//app-form-text//div//input)[22]"));
			if (aging.isEnabled()) {
				System.out.println("Aging Field : Field is Enabled as Not Expected");
				System.out.println("Case Failed");
				driver.quit();
			} else {
				System.out.println("Aging Field : Field is Disabled as Expected");
				System.out.println("Aging : " + aging.getAttribute("value"));
			}

			WebElement delayReason = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[3]"));
			delayReason.clear();
			delayReason.sendKeys("Editing For DAP");

//			WebElement pickupDate = driver
//					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[1]"));
//			String date2 = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
//			pickupDate.sendKeys(date2);

			WebElement logisticsRemarks = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//textarea[@type='textarea'])[4]"));
			logisticsRemarks.clear();
			logisticsRemarks.sendKeys("Editing For DAP");

			/* / CHA Fields/ */
			WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
			WebElement CHAName = driver.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[33]"));
			wait.until(ExpectedConditions.visibilityOf(CHAName));
			CHAName.clear();
			CHAName.sendKeys("Freight");

			WebElement CHAInvoiceNo = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[34]"));
			CHAInvoiceNo.clear();
			CHAInvoiceNo.sendKeys("98765");

			WebElement CHAInvoiceDate = driver
					.findElement(By.xpath("(//app-form-date[1]//div[1]//input[@type='date'])[2]"));
			String date = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
			CHAInvoiceDate.clear();
			CHAInvoiceDate.sendKeys(date);

			WebElement CHAInvoiceValue = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[35]"));
			CHAInvoiceValue.clear();
			CHAInvoiceValue.sendKeys("100");

			/* / DAP - Domestic - Grid Fields/ */
			int scrollAmount = 4000;
			WebElement slickGridScroll2 = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
			j.executeScript("arguments[0].scrollIntoView(true);", slickGridScroll2);
			Thread.sleep(1000);
			j.executeScript("arguments[0].scrollLeft += arguments[1];", slickGridScroll2, scrollAmount);
			Thread.sleep(1000);

			WebElement BOEDescription = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l24 r24')]"));
			j.executeScript("arguments[0].click();", BOEDescription);
			WebElement BOEDescription1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l24 r24')]//input"));
			BOEDescription1.sendKeys("Edited For DAP");

			WebElement extendedValue = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l28 r28')]"));
			WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
			j.executeScript("arguments[0].click();", extendedValue);
			WebElement refreshedExtendedValue = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains (@class, 'slick-cell l28 r28')]")));
			String extendedValueAttribute = refreshedExtendedValue.getText();

			WebElement assessableValue = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[17]"));
			assessableValue.clear();
			assessableValue.sendKeys(extendedValueAttribute);

			WebElement HSCode = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l29 r29')]"));
			j.executeScript("arguments[0].click();", HSCode);
			WebElement HSCode1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l29 r29')]//input"));
			HSCode1.sendKeys("54321");

			WebElement itemType = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l30 r30')]"));
			j.executeScript("arguments[0].click();", itemType);
			WebElement itemType1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l30 r30')]//select"));
			selectOptionByIndex(itemType1, 1);

			WebElement rateOfDuty = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l31 r31')]"));
			j.executeScript("arguments[0].click();", rateOfDuty);
			WebElement rateOfDuty1 = driver.findElement(By.xpath(
					".//div[contains (@class, 'slick-cell l31 r31')]//select"));
			selectOptionByIndex(rateOfDuty1, 2);

			WebElement totalDutyAmt = driver.findElement(
					By.xpath(".//div[contains (@class, 'slick-cell l33 r33')]"));
			j.executeScript("arguments[0].click();", totalDutyAmt);
			WebElement refreshedtotalDutyAmt = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(
					".//div[contains (@class, 'slick-cell l33 r33')]")));
			String totalDutyAttribute = refreshedtotalDutyAmt.getText();

			WebElement totalDutyAmount = driver
					.findElement(By.xpath("(//app-form-text[1]//div[1]//input[@type='text'])[18]"));
			totalDutyAmount.clear();
			totalDutyAmount.sendKeys(totalDutyAttribute);
		} else {
			System.out.println("Purchase Category NOT MATCHING");
		}
	}

	@When("User select the Under Inspection status from the filter  - \\(PO Order - RM - Import)")
	public void user_select_the_under_inspection_status_from_the_filter_po_order_rm_import()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 1);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 1);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 5);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
	}

	@When("User select the Under Inspection status from the filter - \\(Testing & Services - Import)")
	public void user_select_the_under_inspection_status_from_the_filter_testing_services_import()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 3);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 5);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
	}

	@When("User select the Under Inspection status from the filter  - \\(WEB Order - RM - Import)")
	public void user_select_the_under_inspection_status_from_the_filter_web_order_rm_import()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 1);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 2);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 5);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
	}

	@When("User select the Under Inspection status from the filter  - \\(PO Order - FG - Import)")
	public void user_select_the_under_inspection_status_from_the_filter_po_order_fg_import()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 2);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 1);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 5);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
	}

	@When("User select the Under Inspection status from the filter  - \\(WEB Order - FG - Import)")
	public void user_select_the_under_inspection_status_from_the_filter_web_order_fg_import()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 2);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 2);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 5);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
	}

	@When("User select the Under Inspection status from the filter  - \\(PO Order - NPM - Import)")
	public void user_select_the_under_inspection_status_from_the_filter_po_order_npm_import()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 3);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 1);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 5);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
	}

	@When("User select the Under Inspection status from the filter  - \\(WEB Order - NPM - Import)")
	public void user_select_the_under_inspection_status_from_the_filter_web_order_npm_import()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 3);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 2);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 5);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
	}

	@When("User select the Under Inspection status from the filter - \\(PO Order - RM - Domestic)")
	public void user_select_the_under_inspection_status_from_the_filter_po_order_rm_domestic()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 1);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 1);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 5);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
	}

	@When("User select the Under Inspection status from the filter - \\(Testing & Services - Domestic)")
	public void user_select_the_under_inspection_status_from_the_filter_testing_services_domestic()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 3);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 5);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
	}

	@When("User select the Under Inspection status from the filter - \\(CSM - Domestic)")
	public void user_select_the_under_inspection_status_from_the_filter_csm_domestic() throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 4);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 5);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
	}

	@When("User select the Under Inspection status from the filter - \\(WEB Order - RM - Domestic)")
	public void user_select_the_under_inspection_status_from_the_filter_web_order_rm_domestic()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 1);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 2);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 5);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
	}

	@When("User select the Under Inspection status from the filter - \\(PO Order - FG - Domestic)")
	public void user_select_the_under_inspection_status_from_the_filter_po_order_fg_domestic()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 2);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 1);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 5);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
	}

	@When("User select the Under Inspection status from the filter - \\(WEB Order - FG - Domestic)")
	public void user_select_the_under_inspection_status_from_the_filter_web_order_fg_domestic()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 2);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 2);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 5);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
	}

	@When("User select the Under Inspection status from the filter - \\(PO Order - NPM - Domestic)")
	public void user_select_the_under_inspection_status_from_the_filter_po_order_npm_domestic()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 3);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 1);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 5);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
	}

	@When("User select the Under Inspection status from the filter - \\(WEB Order - NPM - Domestic)")
	public void user_select_the_under_inspection_status_from_the_filter_web_order_npm_domestic()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 3);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 2);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 5);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
	}

	@When("User click on the Download and Cancel button")
	public void user_click_on_the_Download_and_Cancel_button() throws InterruptedException {

		WebElement pdfButton = driver.findElement(By.xpath("//div//button[2]//i"));
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		wait.until(ExpectedConditions.elementToBeClickable(pdfButton));
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", pdfButton);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		wait1.until(ExpectedConditions.visibilityOfElementLocated(
				By.xpath("//app-form//section//div//div//div[6]//button[2][contains (text(), 'Cancel')]")));

		WebElement cancelBtn = driver
				.findElement(By.xpath("//app-form//section//div//div//div[6]//button[2][contains (text(), 'Cancel')]"));
		JavascriptExecutor js1 = (JavascriptExecutor) driver;
		js1.executeScript("arguments[0].scrollIntoView(true);", cancelBtn);
		WebDriverWait wait2 = new WebDriverWait(driver, Duration.ofSeconds(10));
		wait2.until(ExpectedConditions.elementToBeClickable(cancelBtn));
		js1.executeScript("arguments[0].click();", cancelBtn);
		Thread.sleep(2000);
	}

	@Then("User click on the signout button")
	public void user_click_on_the_signout_button() throws InterruptedException {
		WebElement profileClick = driver.findElement(By.xpath("(//app-header//div//div//span[@class = 'd-block'])[1]"));
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollTo(0,0);", profileClick);
		Thread.sleep(1000);
		profileClick.click();
		WebElement signOutBtn = driver.findElement(
				By.xpath("//h3[contains (@class, 'dropdown-item-title') and contains (text(), 'Sign out ')][1]"));
		signOutBtn.click();
		driver.quit();
		Thread.sleep(1000);
	}

	@Given("User enters the IQC Team Member {string} and {string}")
	public void user_enters_the_iqc_team_member_and(String username, String password) {
		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
		WebElement loginID = driver.findElement(By.xpath("//input[@id='loginkey'][1]"));
		loginID.sendKeys(username);
		WebElement loginPassword = driver.findElement(By.xpath("//input[@id='password'][1]"));
		loginPassword.sendKeys(password);
		WebElement btnClick = driver.findElement(By.xpath("//input[@id='remembermeCheck'][1]"));
		btnClick.click();
		WebElement btnUnclick = driver.findElement(By.xpath("//input[@id='remembermeCheck'][1]"));
		btnUnclick.click();
		WebElement signInButton = driver.findElement(By.xpath("//button[@type='submit'][1]"));
		signInButton.click();
	}

	@When("User enters the Accepted qty, Date code in the grid")
	public void user_enters_the_accepted_qty_date_code_in_the_grid() throws InterruptedException {
		WebElement IqcAcceptQty = driver
				.findElement(By.xpath(".//div[contains (@class, 'slick-cell l11 r11')]"));
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", IqcAcceptQty);
		Alert a = driver.switchTo().alert();
		a.accept();
		a.sendKeys("98");
		a.accept();
		Thread.sleep(1000);

		int scrollAmount = 2000;
		WebElement slickGridScroll = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].scrollLeft += arguments[1];", slickGridScroll, scrollAmount);
		Thread.sleep(1000);

		WebElement dateCode = driver.findElement(By.xpath(".//div[contains (@class, 'slick-cell l28 r28')]"));
		JavascriptExecutor js1 = (JavascriptExecutor) driver;
		js1.executeScript("arguments[0].click();", dateCode);
		a.sendKeys("08-20");
		a.accept();
		Thread.sleep(1000);
	}

	@When("User enters the Accepted qty, Date code in the grid - \\(CSM - Domestic)")
	public void user_enters_the_accepted_qty_date_code_in_the_grid_csm_domestic() throws InterruptedException {
		WebElement IqcAcceptQty = driver
				.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div[1]/div[8]"));
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", IqcAcceptQty);
		Alert a = driver.switchTo().alert();
		a.accept();
		a.sendKeys("98");
		a.accept();
		Thread.sleep(1000);

		int scrollAmount = 2000;
		WebElement slickGridScroll = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].scrollLeft += arguments[1];", slickGridScroll, scrollAmount);
		Thread.sleep(1000);

		WebElement dateCode = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[22]"));
		JavascriptExecutor js1 = (JavascriptExecutor) driver;
		js1.executeScript("arguments[0].click();", dateCode);
		a.sendKeys("08-20");
		a.accept();
		Thread.sleep(1000);
	}

	@When("User enters the Accepted qty, Date code in the grid - \\(PO Order - NPM - Domestic)")
	public void user_enters_the_accepted_qty_date_code_in_the_grid_po_order_npm_domestic() throws InterruptedException {
		WebElement IqcAcceptQty = driver
				.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div[1]/div[11]"));
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", IqcAcceptQty);
		Alert a = driver.switchTo().alert();
		a.accept();
		a.sendKeys("98");
		a.accept();
		Thread.sleep(1000);

		int scrollAmount = 2000;
		WebElement slickGridScroll = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].scrollLeft += arguments[1];", slickGridScroll, scrollAmount);
		Thread.sleep(1000);

		WebElement dateCode = driver.findElement(
				By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l25 r25 selected']"));
		JavascriptExecutor js1 = (JavascriptExecutor) driver;
		js1.executeScript("arguments[0].click();", dateCode);
		a.sendKeys("08-20");
		a.accept();
		Thread.sleep(1000);
	}

	@When("User enters the Accepted qty, Date code in the grid - \\(Partially Received)")
	public void user_enters_the_accepted_qty_date_code_in_the_grid_partially_received() throws InterruptedException {
		WebElement IqcAcceptQty = driver
				.findElement(By.xpath(".//div[contains (@class, 'slick-cell l11 r11')]"));
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", IqcAcceptQty);
		Alert a = driver.switchTo().alert();
		a.accept();
		a.sendKeys("48");
		a.accept();
		Thread.sleep(1000);

		int scrollAmount = 2000;
		WebElement slickGridScroll = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].scrollLeft += arguments[1];", slickGridScroll, scrollAmount);
		Thread.sleep(1000);

		WebElement dateCode = driver.findElement(By.xpath(".//div[contains (@class, 'slick-cell l28 r28')]"));
		JavascriptExecutor js1 = (JavascriptExecutor) driver;
		js1.executeScript("arguments[0].click();", dateCode);
		a.sendKeys("08-20");
		a.accept();
		Thread.sleep(1000);
	}

	@When("User enters the Accepted qty, Date code in the grid - \\(Partially Received) \\(PO Order - NPM - Domestic)")
	public void user_enters_the_accepted_qty_date_code_in_the_grid_partially_received_po_order_npm_domestic()
			throws InterruptedException {
		WebElement IqcAcceptQty = driver
				.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div[1]/div[11]"));
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", IqcAcceptQty);
		Alert a = driver.switchTo().alert();
		a.accept();
		a.sendKeys("48");
		a.accept();
		Thread.sleep(1000);

		int scrollAmount = 2000;
		WebElement slickGridScroll = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].scrollLeft += arguments[1];", slickGridScroll, scrollAmount);
		Thread.sleep(1000);

		WebElement dateCode = driver.findElement(
				By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l25 r25 selected']"));
		JavascriptExecutor js1 = (JavascriptExecutor) driver;
		js1.executeScript("arguments[0].click();", dateCode);
		a.sendKeys("08-20");
		a.accept();
		Thread.sleep(1000);
	}

	@When("User select the Under Quarantine status from the filter  - \\(PO Order - RM - Import)")
	public void user_select_the_under_quarantine_status_from_the_filter_po_order_rm_import()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
//		WebElement staleElementRefClick = driver.findElement(By.xpath("(//div//button//i)[2]"));
//		j.executeScript("arguments[0].click();", staleElementRefClick);
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 1);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 1);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 6);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(1000);
	}

	@When("User select the Under Quarantine status from the filter - \\(Testing & Services - Import)")
	public void user_select_the_under_quarantine_status_from_the_filter_testing_services_import()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
//		WebElement staleElementRefClick = driver.findElement(By.xpath("(//div//button//i)[2]"));
//		j.executeScript("arguments[0].click();", staleElementRefClick);
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 3);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 6);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(1000);
	}

	@When("User select the Under Quarantine status from the filter  - \\(WEB Order - RM - Import)")
	public void user_select_the_under_quarantine_status_from_the_filter_web_order_rm_import()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
//		WebElement staleElementRefClick = driver.findElement(By.xpath("(//div//button//i)[2]"));
//		j.executeScript("arguments[0].click();", staleElementRefClick);
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 1);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 2);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 6);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(1000);
	}

	@When("User select the Under Quarantine status from the filter  - \\(PO Order - FG - Import)")
	public void user_select_the_under_quarantine_status_from_the_filter_po_order_fg_import()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 2);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 1);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 6);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(1000);
	}

	@When("User select the Under Quarantine status from the filter  - \\(WEB Order - FG - Import)")
	public void user_select_the_under_quarantine_status_from_the_filter_web_order_fg_import()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 2);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 2);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 6);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(1000);
	}

	@When("User select the Under Quarantine status from the filter  - \\(PO Order - NPM - Import)")
	public void user_select_the_under_quarantine_status_from_the_filter_po_order_npm_import()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 3);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 1);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 6);
		Thread.sleep(2500);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(1000);
	}

	@When("User select the Under Quarantine status from the filter  - \\(WEB Order - NPM - Import)")
	public void user_select_the_under_quarantine_status_from_the_filter_web_order_npm_import()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 3);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 2);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 6);
		Thread.sleep(2500);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(1000);
	}

	@When("User select the Under Quarantine status from the filter - \\(PO Order - RM - Domestic)")
	public void user_select_the_under_quarantine_status_from_the_filter_po_order_rm_domestic()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 1);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 1);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 6);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(1000);
	}

	@When("User select the Under Quarantine status from the filter - \\(Testing & Services - Domestic)")
	public void user_select_the_under_quarantine_status_from_the_filter_testing_services_domestic()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 3);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 6);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(1000);
	}

	@When("User select the Under Quarantine status from the filter - \\(CSM - Domestic)")
	public void user_select_the_under_quarantine_status_from_the_filter_csm_domestic() throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 4);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 6);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(1000);
	}

	@When("User select the Under Quarantine status from the filter - \\(WEB Order - RM - Domestic)")
	public void user_select_the_under_quarantine_status_from_the_filter_web_order_rm_domestic()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 1);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 2);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 6);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(1000);
	}

	@When("User select the Under Quarantine status from the filter - \\(PO Order - FG - Domestic)")
	public void user_select_the_under_quarantine_status_from_the_filter_po_order_fg_domestic()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 2);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 1);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 6);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(1000);
	}

	@When("User select the Under Quarantine status from the filter - \\(WEB Order - FG - Domestic)")
	public void user_select_the_under_quarantine_status_from_the_filter_web_order_fg_domestic()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 2);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 2);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 6);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(1000);
	}

	@When("User select the Under Quarantine status from the filter - \\(PO Order - NPM - Domestic)")
	public void user_select_the_under_quarantine_status_from_the_filter_po_order_npm_domestic()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 3);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 1);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 6);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(1000);
	}

	@When("User select the Under Quarantine status from the filter - \\(WEB Order - NPM - Domestic)")
	public void user_select_the_under_quarantine_status_from_the_filter_web_order_npm_domestic()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 3);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 2);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 6);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(1000);
	}

	@When("User select the Yet to Instore status from the filter  - \\(PO Order - RM - Import)")
	public void user_select_the_yet_to_instore_status_from_the_filter_po_order_rm_import() throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement Status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(Status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 1);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 1);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 3);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(1000);
	}

	@When("User select the Yet to Instore status from the filter - \\(Testing & Services - Import)")
	public void user_select_the_yet_to_instore_status_from_the_filter_testing_services_import()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement Status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(Status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 3);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 3);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(1000);
	}

	@When("User select the Yet to Instore status from the filter  - \\(WEB Order - RM - Import)")
	public void user_select_the_yet_to_instore_status_from_the_filter_web_order_rm_import()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement Status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(Status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 1);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 2);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 3);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(1000);
	}

	@When("User select the Yet to Instore status from the filter  - \\(PO Order - FG - Import)")
	public void user_select_the_yet_to_instore_status_from_the_filter_po_order_fg_import() throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 2);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 1);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 3);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(1000);
	}

	@When("User select the Yet to Instore status from the filter  - \\(WEB Order - FG - Import)")
	public void user_select_the_yet_to_instore_status_from_the_filter_web_order_fg_import()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 2);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 2);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 3);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(1000);
	}

	@When("User select the Yet to Instore status from the filter  - \\(PO Order - NPM - Import)")
	public void user_select_the_yet_to_instore_status_from_the_filter_po_order_npm_import()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 3);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 1);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 3);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(1000);
	}

	@When("User select the Yet to Instore status from the filter  - \\(WEB Order - NPM - Import)")
	public void user_select_the_yet_to_instore_status_from_the_filter_web_order_npm_import()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 3);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 2);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 3);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(1000);
	}

	@When("User select the Yet to Instore status from the filter - \\(PO Order - RM - Domestic)")
	public void user_select_the_yet_to_instore_status_from_the_filter_po_order_rm_domestic()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 1);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 1);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 3);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(1000);
	}

	@When("User select the Yet to Instore status from the filter - \\(Testing & Services - Domestic)")
	public void user_select_the_yet_to_instore_status_from_the_filter_testing_services_domestic()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 3);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 3);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(1000);
	}

	@When("User select the Yet to Instore status from the filter - \\(CSM - Domestic)")
	public void user_select_the_yet_to_instore_status_from_the_filter_csm_domestic() throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 4);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 3);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(1000);
	}

	@When("User select the Yet to Instore status from the filter - \\(WEB Order - RM - Domestic)")
	public void user_select_the_yet_to_instore_status_from_the_filter_web_order_rm_domestic()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 1);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 2);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 3);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(1000);
	}

	@When("User select the Yet to Instore status from the filter - \\(PO Order - FG - Domestic)")
	public void user_select_the_yet_to_instore_status_from_the_filter_po_order_fg_domestic()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 2);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 1);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 3);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(1000);
	}

	@When("User select the Yet to Instore status from the filter - \\(WEB Order - FG - Domestic)")
	public void user_select_the_yet_to_instore_status_from_the_filter_web_order_fg_domestic()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 2);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 2);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 3);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(1000);
	}

	@When("User select the Yet to Instore status from the filter - \\(PO Order - NPM - Domestic)")
	public void user_select_the_yet_to_instore_status_from_the_filter_po_order_npm_domestic()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 3);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 1);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 3);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(1000);
	}

	@When("User select the Yet to Instore status from the filter - \\(WEB Order - NPM - Domestic)")
	public void user_select_the_yet_to_instore_status_from_the_filter_web_order_npm_domestic()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 3);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 2);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 3);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(1000);
	}

	@When("User select the Yet to MRA\\/Short Closure status from the filter - \\(PO Order - RM - Import)")
	public void user_select_the_yet_to_mra_short_closure_status_from_the_filter_po_order_rm_import()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 1);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 1);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 8);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(1000);
	}

	@When("User select the Yet to MRA\\/Short Closure status from the filter - \\(Testing & Services - Import)")
	public void user_select_the_yet_to_mra_short_closure_status_from_the_filter_testing_services_import()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 3);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 8);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(1000);
	}

	@When("User select the Yet to MRA\\/Short Closure status from the filter - \\(WEB Order - RM - Import)")
	public void user_select_the_yet_to_mra_short_closure_status_from_the_filter_web_order_rm_import()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 1);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 2);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 8);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(1000);
	}

	@When("User select the Yet to MRA\\/Short Closure status from the filter - \\(PO Order - FG - Import)")
	public void user_select_the_yet_to_mra_short_closure_status_from_the_filter_po_order_fg_import()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 2);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 1);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 8);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(1000);
	}

	@When("User select the Yet to MRA\\/Short Closure status from the filter - \\(WEB Order - FG - Import)")
	public void user_select_the_yet_to_mra_short_closure_status_from_the_filter_web_order_fg_import()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 2);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 2);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 8);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(1000);
	}

	@When("User select the Yet to MRA\\/Short Closure status from the filter - \\(PO Order - NPM - Import)")
	public void user_select_the_yet_to_mra_short_closure_status_from_the_filter_po_order_npm_import()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 3);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 1);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 8);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(1000);
	}

	@When("User select the Yet to MRA\\/Short Closure status from the filter - \\(WEB Order - NPM - Import)")
	public void user_select_the_yet_to_mra_short_closure_status_from_the_filter_web_order_npm_import()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 3);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 2);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 8);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(1000);
	}

	@When("User select the Yet to MRA\\/Short Closure status from the filter - \\(PO Order - RM - Domestic)")
	public void user_select_the_yet_to_mra_short_closure_status_from_the_filter_po_order_rm_domestic()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 1);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 1);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 8);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(1000);
	}

	@When("User select the Yet to MRA\\/Short Closure status from the filter - \\(Testing & Services - Domestic)")
	public void user_select_the_yet_to_mra_short_closure_status_from_the_filter_testing_services_domestic()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 3);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 8);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(1000);
	}

	@When("User select the Yet to MRA\\/Short Closure status from the filter - \\(CSM - Domestic)")
	public void user_select_the_yet_to_mra_short_closure_status_from_the_filter_csm_domestic()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement Status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(Status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 4);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 8);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(1000);
	}

	@When("User select the Yet to MRA\\/Short Closure status from the filter - \\(WEB Order - RM - Domestic)")
	public void user_select_the_yet_to_mra_short_closure_status_from_the_filter_web_order_rm_domestic()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 1);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 2);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 8);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(1000);
	}

	@When("User select the Yet to MRA\\/Short Closure status from the filter - \\(PO Order - FG - Domestic)")
	public void user_select_the_yet_to_mra_short_closure_status_from_the_filter_po_order_fg_domestic()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 2);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 1);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 8);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(1000);
	}

	@When("User select the Yet to MRA\\/Short Closure status from the filter - \\(WEB Order - FG - Domestic)")
	public void user_select_the_yet_to_mra_short_closure_status_from_the_filter_web_order_fg_domestic()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 2);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 2);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 8);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(1000);
	}

	@When("User select the Yet to MRA\\/Short Closure status from the filter - \\(PO Order - NPM - Domestic)")
	public void user_select_the_yet_to_mra_short_closure_status_from_the_filter_po_order_npm_domestic()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 3);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 1);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 8);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(1000);
	}

	@When("User select the Yet to MRA\\/Short Closure status from the filter - \\(WEB Order - NPM - Domestic)")
	public void user_select_the_yet_to_mra_short_closure_status_from_the_filter_web_order_npm_domestic()
			throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 3);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 2);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 8);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(1000);
	}

	@When("User select the Instore status from the filter  - \\(PO Order - RM - Import)")
	public void user_select_the_instore_status_from_the_filter_po_order_rm_import() throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement Status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(Status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 1);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 1);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 10);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		WebElement grnStatus = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]"));
		System.out.println("GRN Status : " + grnStatus.getText());

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(1000);
	}

	@When("User select the Instore status from the filter - \\(Testing & Services - Import)")
	public void user_select_the_instore_status_from_the_filter_testing_services_import() throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement Status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(Status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 3);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 10);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		WebElement grnStatus = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]"));
		System.out.println("GRN Status : " + grnStatus.getText());

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(1000);
	}

	@When("User select the Instore status from the filter  - \\(WEB Order - RM - Import)")
	public void user_select_the_instore_status_from_the_filter_web_order_rm_import() throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement Status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(Status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 1);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 2);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 10);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		WebElement grnStatus = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]"));
		System.out.println("GRN Status : " + grnStatus.getText());

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(1000);
	}

	@When("User select the Instore status from the filter  - \\(PO Order - FG - Import)")
	public void user_select_the_instore_status_from_the_filter_po_order_fg_import() throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 2);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 1);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 10);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		WebElement grnStatus = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]"));
		System.out.println("GRN Status : " + grnStatus.getText());

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(1000);
	}

	@When("User select the Instore status from the filter  - \\(WEB Order - FG - Import)")
	public void user_select_the_instore_status_from_the_filter_web_order_fg_import() throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 2);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 2);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 10);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		WebElement grnStatus = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]"));
		System.out.println("GRN Status : " + grnStatus.getText());

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(1000);
	}

	@When("User select the Instore status from the filter  - \\(PO Order - NPM - Import)")
	public void user_select_the_instore_status_from_the_filter_po_order_npm_import() throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 3);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 1);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 10);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		WebElement grnStatus = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]"));
		System.out.println("GRN Status : " + grnStatus.getText());

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(1000);
	}

	@When("User select the Instore status from the filter  - \\(WEB Order - NPM - Import)")
	public void user_select_the_instore_status_from_the_filter_web_order_npm_import() throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 3);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 2);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 1);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 10);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		WebElement grnStatus = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]"));
		System.out.println("GRN Status : " + grnStatus.getText());

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(1000);
	}

	@When("User select the Instore status from the filter - \\(PO Order - RM - Domestic)")
	public void user_select_the_instore_status_from_the_filter_po_order_rm_domestic() throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement Status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(Status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 1);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 1);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 10);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		WebElement grnStatus = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]"));
		System.out.println("GRN Status : " + grnStatus.getText());

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(1000);
	}

	@When("User select the Instore status from the filter - \\(Testing & Services - Domestic)")
	public void user_select_the_instore_status_from_the_filter_testing_services_domestic() throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement Status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(Status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 3);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 10);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		WebElement grnStatus = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]"));
		System.out.println("GRN Status : " + grnStatus.getText());

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(1000);
	}

	@When("User select the Instore status from the filter - \\(CSM - Domestic)")
	public void user_select_the_instore_status_from_the_filter_csm_domestic() throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement Status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(Status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 4);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 10);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		WebElement grnStatus = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]"));
		System.out.println("GRN Status : " + grnStatus.getText());

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(1000);
	}

	@When("User select the Instore status from the filter - \\(WEB Order - RM - Domestic)")
	public void user_select_the_instore_status_from_the_filter_web_order_rm_domestic() throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement Status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(Status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 1);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 2);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 10);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		WebElement grnStatus = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]"));
		System.out.println("GRN Status : " + grnStatus.getText());

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(1000);
	}

	@When("User select the Instore status from the filter - \\(PO Order - FG - Domestic)")
	public void user_select_the_instore_status_from_the_filter_po_order_fg_domestic() throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement Status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(Status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 2);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 1);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 10);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		WebElement grnStatus = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]"));
		System.out.println("GRN Status : " + grnStatus.getText());

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(1000);
	}

	@When("User select the Instore status from the filter - \\(WEB Order - FG - Domestic)")
	public void user_select_the_instore_status_from_the_filter_web_order_fg_domestic() throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement Status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(Status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 2);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 2);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 10);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		WebElement grnStatus = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]"));
		System.out.println("GRN Status : " + grnStatus.getText());

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(1000);
	}

	@When("User select the Instore status from the filter - \\(PO Order - NPM - Domestic)")
	public void user_select_the_instore_status_from_the_filter_po_order_npm_domestic() throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement Status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(Status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 3);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 1);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 10);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		WebElement grnStatus = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]"));
		System.out.println("GRN Status : " + grnStatus.getText());

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(1000);
	}

	@When("User select the Instore status from the filter - \\(WEB Order - NPM - Domestic)")
	public void user_select_the_instore_status_from_the_filter_web_order_npm_domestic() throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement receiptBtn = driver.findElement(By.xpath("(//a[contains(text(),'Receipt')])[1]"));
		wait.until(ExpectedConditions.elementToBeClickable(receiptBtn));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].click();", receiptBtn);

		WebElement Status = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(Status, 0);
		Thread.sleep(2000);

		WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement GRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(GRNNo));
		WebElement refreshedGRNNo = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		wait.until(ExpectedConditions.visibilityOf(refreshedGRNNo));
		String grnNo = refreshedGRNNo.getText();
		System.out.println("GRN NO : " + grnNo);
		try {
			driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
			refreshedGRNNo.getText();
		} catch (StaleElementReferenceException e) {
		}

		WebElement materialType = driver.findElement(By.xpath("//select[@name='materialtypeid']"));
		selectOptionByIndex(materialType, 3);

		WebElement orderType = driver.findElement(By.xpath("//select[@name='ordertypeid']"));
		selectOptionByIndex(orderType, 2);

		WebElement purCategory = driver.findElement(By.xpath("//select[@name='purcategoryid']"));
		selectOptionByIndex(purCategory, 2);

		WebElement GRNStatus = driver.findElement(By.xpath("//select[@name='receiptstatusid']"));
		selectOptionByIndex(GRNStatus, 10);
		Thread.sleep(2000);

		WebElement GRNNo1 = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]//td[1]"));
		String grnNo1 = GRNNo1.getText();
		System.out.println("GRN NO : " + grnNo1);

		WebElement grnStatus = driver.findElement(By.xpath("//table[@role='grid']//tbody//tr[1]"));
		System.out.println("GRN Status : " + grnStatus.getText());

		if (grnNo != grnNo1) {
			System.out.println("GRN Number's are Not Matching Successfully");
		} else {
			System.out.println("GRN Numbers are Matching, Case Failed");
			driver.quit();
		}
		Thread.sleep(1000);
	}

	@When("User enters the Rejected qty")
	public void user_enters_the_rejected_qty() throws InterruptedException {
		Thread.sleep(500);
		JavascriptExecutor j = (JavascriptExecutor) driver;
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(20));

		By IqcRejectQtyLocator = By
				.xpath(".//div[contains (@class, 'slick-cell l13 r13')]");
		WebElement IqcRejectQty = driver.findElement(IqcRejectQtyLocator);
		wait.until(ExpectedConditions.visibilityOf(IqcRejectQty));
//		j.executeScript("arguments[0].click();", IqcRejectQty);

		WebElement refreshedIqcRejectQty = wait.until(ExpectedConditions.elementToBeClickable(IqcRejectQtyLocator));
		j.executeScript("arguments[0].click();", refreshedIqcRejectQty);

//		WebElement IqcRejectQty = driver.findElement(
//				By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div[1]/div[@class='slick-cell l12 r12']"));
//		wait.until(ExpectedConditions.presenceOfElementLocated(
//				By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div[1]/div[@class='slick-cell l12 r12']")));
//		WebElement refreshedIqcRejectQty = driver.findElement(
//				By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div[1]/div[@class='slick-cell l12 r12']"));
//		wait.until(ExpectedConditions.elementToBeClickable(refreshedIqcRejectQty));
//		j.executeScript("arguments[0].click();", refreshedIqcRejectQty);
		Alert a = driver.switchTo().alert();
		a.sendKeys("2");
		a.accept();
	}
	
	@When("User enters the Rejected qty - \\(PO Order - NPM - Domestic)")
	public void user_enters_the_rejected_qty_po_order_npm_domestic() throws InterruptedException {
		Thread.sleep(500);
		JavascriptExecutor j = (JavascriptExecutor) driver;
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(20));

		By IqcRejectQtyLocator = By
				.xpath(".//div[contains (@class, 'slick-cell l12 r12')]");
		WebElement IqcRejectQty = driver.findElement(IqcRejectQtyLocator);
		wait.until(ExpectedConditions.visibilityOf(IqcRejectQty));

		WebElement refreshedIqcRejectQty = wait.until(ExpectedConditions.elementToBeClickable(IqcRejectQtyLocator));
		j.executeScript("arguments[0].click();", refreshedIqcRejectQty);

		Alert a = driver.switchTo().alert();
		a.sendKeys("2");
		a.accept();
	}

	@When("User enters the Rejected qty - \\(CSM - Domestic)")
	public void user_enters_the_rejected_qty_csm_domestic() throws InterruptedException {
		Thread.sleep(500);
		JavascriptExecutor j = (JavascriptExecutor) driver;
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(20));

		By IqcRejectQtyLocator = By
				.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div[1]/div[@class='slick-cell l9 r9']");
		WebElement IqcRejectQty = driver.findElement(IqcRejectQtyLocator);
		wait.until(ExpectedConditions.visibilityOf(IqcRejectQty));
		WebElement refreshedIqcRejectQty = wait.until(ExpectedConditions.elementToBeClickable(IqcRejectQtyLocator));
		j.executeScript("arguments[0].click();", refreshedIqcRejectQty);
		Alert a = driver.switchTo().alert();
		a.sendKeys("2");
		a.accept();
	}

	@When("User enters the Rejection Reason")
	public void user_enters_the_rejection_reason() throws InterruptedException {
		int scrollAmount = 4000;
		WebElement slickGridScroll = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].scrollLeft += arguments[1];", slickGridScroll, scrollAmount);
		Thread.sleep(1000);

		WebElement rejReason = driver.findElement(
				By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l26 r26 selected']"));
		JavascriptExecutor js1 = (JavascriptExecutor) driver;
		js1.executeScript("arguments[0].click();", rejReason);

		WebElement reasonDialogueBox = driver
				.findElement(By.xpath("(//form//textarea[@id='remarktext' and @name='remark2'])[2]"));
		reasonDialogueBox.sendKeys("Damage");
		Thread.sleep(1000);

		WebElement okButton = driver.findElement(By.xpath("(//div//button[@id=\"remarkok\" and @type='button'])[2]"));
		okButton.click();
		Thread.sleep(2000);
	}

	@When("User enters the Rejection Reason - \\(PO Order - NPM - Domestic)")
	public void user_enters_the_rejection_reason_po_order_npm_domestic() throws InterruptedException {
		int scrollAmount = 4000;
		WebElement slickGridScroll = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].scrollLeft += arguments[1];", slickGridScroll, scrollAmount);
		Thread.sleep(1000);

		WebElement rejReason = driver.findElement(
				By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l24 r24 selected']"));
		JavascriptExecutor js1 = (JavascriptExecutor) driver;
		js1.executeScript("arguments[0].click();", rejReason);

		WebElement reasonDialogueBox = driver
				.findElement(By.xpath("(//form//textarea[@id=\"remarktext\" and @name='remark2'])[2]"));
		reasonDialogueBox.sendKeys("Damage");
		Thread.sleep(1000);

		WebElement okButton = driver.findElement(By.xpath("(//div//button[@id=\"remarkok\" and @type='button'])[2]"));
		okButton.click();
		Thread.sleep(2000);
	}

	@When("User move the stock to the Store")
	public void user_move_the_stock_to_the_store() {
		JavascriptExecutor j = (JavascriptExecutor) driver;
		WebElement checkBox = driver.findElement(By.xpath("(//input[@type='checkbox'])[2]"));
		j.executeScript("arguments[0].click();", checkBox);

		WebElement btnMoveToStore = driver.findElement(By.xpath("//button[contains (text(), 'Move to Store')]"));
		btnMoveToStore.click();
	}

	@When("User enters the P-MRA Qty")
	public void user_enters_the_p_mra_qty() throws InterruptedException {
		int scrollAmount = 300;
		WebElement slickGridScroll = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].scrollLeft += arguments[1];", slickGridScroll, scrollAmount);
		Thread.sleep(1000);

		WebElement PMRAQty = driver
				.findElement(By.xpath(".//div[contains (@class, 'slick-cell l15 r15')]"));
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", PMRAQty);
		Alert a = driver.switchTo().alert();
		a.sendKeys("1");
		a.accept();
	}
	
	@When("User enters the P-MRA Qty - \\(PO Order - NPM - Domestic)")
	public void user_enters_the_p_mra_qty_po_order_npm_domestic() throws InterruptedException {
		int scrollAmount = 300;
		WebElement slickGridScroll = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].scrollLeft += arguments[1];", slickGridScroll, scrollAmount);
		Thread.sleep(1000);

		WebElement PMRAQty = driver
				.findElement(By.xpath(".//div[contains (@class, 'slick-cell l14 r14')]"));
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", PMRAQty);
		Alert a = driver.switchTo().alert();
		a.sendKeys("1");
		a.accept();
	}

	@When("User enters the P-MRA Qty - \\(CSM - Domestic)")
	public void user_enters_the_p_mra_qty_csm_domestic() throws InterruptedException {
		int scrollAmount = 300;
		WebElement slickGridScroll = driver.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]"));
		JavascriptExecutor j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].scrollLeft += arguments[1];", slickGridScroll, scrollAmount);
		Thread.sleep(1000);

		WebElement PMRAQty = driver
				.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l11 r11']"));
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", PMRAQty);
		Alert a = driver.switchTo().alert();
		a.sendKeys("1");
		a.accept();
	}

	@When("User click on the Short closure in Grid")
	public void user_click_on_the_short_closure_in_grid() {
		WebElement shortClosure = driver.findElement(
				By.xpath(".//div[contains (@class, 'slick-cell l7 r7')]"));
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", shortClosure);
		WebElement checkBox = driver.findElement(By.xpath(
				".//div[contains (@class, 'slick-cell l7 r7')]//input"));
		JavascriptExecutor js1 = (JavascriptExecutor) driver;
		js1.executeScript("arguments[0].click();", checkBox);
	}
	
	@When("User click on the Short closure in Grid - \\(PO Order - NPM - Domestic)")
	public void user_click_on_the_short_closure_in_grid_po_order_npm_domestic() {
		WebElement shortClosure = driver.findElement(
				By.xpath(".//div[contains (@class, 'slick-cell l6 r6')]"));
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", shortClosure);
		WebElement checkBox = driver.findElement(By.xpath(
				".//div[contains (@class, 'slick-cell l6 r6')]//input"));
		JavascriptExecutor js1 = (JavascriptExecutor) driver;
		js1.executeScript("arguments[0].click();", checkBox);
	}

	@When("User click on the Short closure in Grid - \\(CSM - Domestic)")
	public void user_click_on_the_short_closure_in_grid_csm_domestic() {
		WebElement shortClosure = driver.findElement(
				By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l4 r4 selected']"));
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", shortClosure);
		WebElement checkBox = driver.findElement(By.xpath(
				"//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l4 r4 selected active editable']//input"));
		JavascriptExecutor js1 = (JavascriptExecutor) driver;
		js1.executeScript("arguments[0].click();", checkBox);
	}

	@When("User enter the Credit Note No")
	public void user_enter_the_credit_note_no() {
		JavascriptExecutor j = (JavascriptExecutor) driver;
		WebElement shortClosure = driver.findElement(
				By.xpath(".//div[contains (@class, 'slick-cell l8 r8')]"));
		j.executeScript("arguments[0].click();", shortClosure);
		Alert a = driver.switchTo().alert();
		a.sendKeys("12345");
		a.accept();
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(20));
		WebElement moveToScrapBtn = driver.findElement(By.xpath("//*[@id='scrap']"));
		wait.until(ExpectedConditions.elementToBeClickable(moveToScrapBtn));
		j.executeScript("arguments[0].click();", moveToScrapBtn);
	}
	
	@When("User enter the Credit Note No - \\(PO Order - NPM - Domestic)")
	public void user_enter_the_credit_note_no_po_order_npm_domestic() {
		JavascriptExecutor j = (JavascriptExecutor) driver;
		WebElement shortClosure = driver.findElement(
				By.xpath(".//div[contains (@class, 'slick-cell l7 r7')]"));
		j.executeScript("arguments[0].click();", shortClosure);
		Alert a = driver.switchTo().alert();
		a.sendKeys("12345");
		a.accept();
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(20));
		WebElement moveToScrapBtn = driver.findElement(By.xpath("//*[@id='scrap']"));
		wait.until(ExpectedConditions.elementToBeClickable(moveToScrapBtn));
		j.executeScript("arguments[0].click();", moveToScrapBtn);
	}

	@When("User enter the Credit Note No - \\(CSM - Domestic)")
	public void user_enter_the_credit_note_no_csm_domestic() {
		JavascriptExecutor j = (JavascriptExecutor) driver;
		WebElement shortClosure = driver.findElement(
				By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div/div[@class='slick-cell l5 r5 selected']"));
		j.executeScript("arguments[0].click();", shortClosure);
		Alert a = driver.switchTo().alert();
		a.sendKeys("12345");
		a.accept();
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(20));
		WebElement moveToScrapBtn = driver.findElement(By.xpath("//*[@id='scrap']"));
		wait.until(ExpectedConditions.elementToBeClickable(moveToScrapBtn));
		j.executeScript("arguments[0].click();", moveToScrapBtn);
	}

	@When("User move the stock from the P-MRA to S-Receive Qty")
	public void user_move_the_stock_from_the_p_mra_to_s_receive_qty() throws InterruptedException {
		WebElement storeReceiveQty = driver.findElement(
				By.xpath(".//div[contains (@class, 'slick-cell l9 r9')]"));
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", storeReceiveQty);
		Alert a = driver.switchTo().alert();
		a.accept();
	}
	
	@When("User move the stock from the P-MRA to S-Receive Qty - \\(PO Order - NPM - Domestic)")
	public void user_move_the_stock_from_the_p_mra_to_s_receive_qty_po_order_npm_domestic() {
		WebElement storeReceiveQty = driver.findElement(
				By.xpath(".//div[contains (@class, 'slick-cell l8 r8')]"));
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", storeReceiveQty);
		Alert a = driver.switchTo().alert();
		a.accept();
	}

	@When("User move the stock from the P-MRA to S-Receive Qty - \\(CSM - Domestic)")
	public void user_move_the_stock_from_the_p_mra_to_s_receive_qty_csm_domestic() {
		WebElement storeReceiveQty = driver.findElement(
				By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div[1]/div[@class='slick-cell l5 r5']"));
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", storeReceiveQty);
		Alert a = driver.switchTo().alert();
		a.accept();
	}

	@When("User enters the Accepted qty in the grid")
	public void user_enters_the_accepted_qty_in_the_grid() throws InterruptedException {
		WebElement IqcAcceptedQty = driver
				.findElement(By.xpath(".//div[contains (@class, 'slick-cell l12 r12')]"));
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", IqcAcceptedQty);
		Alert a = driver.switchTo().alert();
		a.accept();
		a.sendKeys("1");
		a.accept();
		Thread.sleep(1000);
	}
	
	@When("User enters the Accepted qty in the grid - \\(PO Order - NPM - Domestic)")
	public void user_enters_the_accepted_qty_in_the_grid_po_order_npm_domestic() throws InterruptedException {
		WebElement IqcAcceptedQty = driver
				.findElement(By.xpath(".//div[contains (@class, 'slick-cell l11 r11')]"));
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", IqcAcceptedQty);
		Alert a = driver.switchTo().alert();
		a.accept();
		a.sendKeys("1");
		a.accept();
		Thread.sleep(1000);
	}

	@When("User enters the Accepted qty in the grid - \\(CSM - Domestic)")
	public void user_enters_the_accepted_qty_in_the_grid_csm_domestic() throws InterruptedException {
		WebElement IqcAcceptedQty = driver
				.findElement(By.xpath("//*[@id='form_grid_0']/div[4]/div[3]/div/div[1]/div[9]"));
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].click();", IqcAcceptedQty);
		Alert a = driver.switchTo().alert();
		a.accept();
		a.sendKeys("1");
		a.accept();
		Thread.sleep(1000);
	}
}
